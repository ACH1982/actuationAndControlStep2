/*
 * speedgoat_test_SN5659_R2020b.cpp
 *
 * Code generation for model "speedgoat_test_SN5659_R2020b".
 *
 * Model version              : 1.2
 * Simulink Coder version : 9.6 (R2021b) 14-May-2021
 * C++ source code generated on : Fri Apr  8 08:54:49 2022
 *
 * Target selection: slrealtime.tlc
 * Note: GRT includes extra infrastructure and instrumentation for prototyping
 * Embedded hardware selection: Intel->x86-64 (Linux 64)
 * Code generation objectives: Unspecified
 * Validation result: Not run
 */

#include "speedgoat_test_SN5659_R2020b.h"
#include "speedgoat_test_SN5659_R2020b_private.h"

const real_T speedgoat_test_SN5659_R2020b_RGND = 0.0;/* real_T ground */

/* Block signals (default storage) */
B_speedgoat_test_SN5659_R2020b_T speedgoat_test_SN5659_R2020b_B;

/* Block states (default storage) */
DW_speedgoat_test_SN5659_R2020b_T speedgoat_test_SN5659_R2020b_DW;

/* Real-time model */
RT_MODEL_speedgoat_test_SN5659_R2020b_T speedgoat_test_SN5659_R2020b_M_ =
  RT_MODEL_speedgoat_test_SN5659_R2020b_T();
RT_MODEL_speedgoat_test_SN5659_R2020b_T *const speedgoat_test_SN5659_R2020b_M =
  &speedgoat_test_SN5659_R2020b_M_;

/*
 *         This function updates active task flag for each subrate.
 *         The function is called in the model base rate function.
 *         It maintains SampleHit information to allow scheduling
 *         of the subrates from the base rate function.
 */
void rate_scheduler(void)
{
  /* Compute which subrates run during the next base time step.  Subrates
   * are an integer multiple of the base rate counter.  Therefore, the subtask
   * counter is reset when it reaches its limit (zero means run).
   */
  (speedgoat_test_SN5659_R2020b_M->Timing.TaskCounters.TID[2])++;
  if ((speedgoat_test_SN5659_R2020b_M->Timing.TaskCounters.TID[2]) > 4) {/* Sample time: [0.005s, 0.0s] */
    speedgoat_test_SN5659_R2020b_M->Timing.TaskCounters.TID[2] = 0;
  }

  (speedgoat_test_SN5659_R2020b_M->Timing.TaskCounters.TID[3])++;
  if ((speedgoat_test_SN5659_R2020b_M->Timing.TaskCounters.TID[3]) > 9) {/* Sample time: [0.01s, 0.0s] */
    speedgoat_test_SN5659_R2020b_M->Timing.TaskCounters.TID[3] = 0;
  }
}

real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T hi;
  uint32_T lo;

  /* Uniform random number generator (random number between 0 and 1)

     #define IA      16807                      magic multiplier = 7^5
     #define IM      2147483647                 modulus = 2^31-1
     #define IQ      127773                     IM div IA
     #define IR      2836                       IM modulo IA
     #define S       4.656612875245797e-10      reciprocal of 2^31-1
     test = IA * (seed % IQ) - IR * (seed/IQ)
     seed = test < 0 ? (test + IM) : test
     return (seed*S)
   */
  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T si;
  real_T sr;
  real_T y;

  /* Normal (Gaussian) random number generator */
  do {
    sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = sr * sr + si * si;
  } while (si > 1.0);

  y = std::sqrt(-2.0 * std::log(si) / si) * sr;
  return y;
}

/* Model step function for TID0 */
void speedgoat_test_SN5659_R2020b_step0(void) /* Sample time: [0.0s, 0.0s] */
{
  {
    int32_T s10_iter;

    /* S-Function (sg_IO132_IO133_setup_s_v2): '<S2>/Setup v2 ' */

    /* Level2 S-Function Block: '<S2>/Setup v2 ' (sg_IO132_IO133_setup_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[2];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO132_IO133_ad_s_v2): '<S2>/Analog input v2 ' */

    /* Level2 S-Function Block: '<S2>/Analog input v2 ' (sg_IO132_IO133_ad_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[3];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S2>/Sine Wave' */
    speedgoat_test_SN5659_R2020b_B.SineWave = std::sin
      (speedgoat_test_SN5659_R2020_cal->SineWave_Freq *
       speedgoat_test_SN5659_R2020b_M->Timing.t[0] +
       speedgoat_test_SN5659_R2020_cal->SineWave_Phase) *
      speedgoat_test_SN5659_R2020_cal->SineWave_Amp +
      speedgoat_test_SN5659_R2020_cal->SineWave_Bias;

    /* Gain: '<S2>/Gain' */
    speedgoat_test_SN5659_R2020b_B.Gain =
      speedgoat_test_SN5659_R2020_cal->Gain_Gain *
      speedgoat_test_SN5659_R2020b_B.SineWave;

    /* Gain: '<S2>/Gain1' */
    speedgoat_test_SN5659_R2020b_B.Gain1 =
      speedgoat_test_SN5659_R2020_cal->Gain1_Gain *
      speedgoat_test_SN5659_R2020b_B.SineWave;

    /* Gain: '<S2>/Gain2' */
    speedgoat_test_SN5659_R2020b_B.Gain2 =
      speedgoat_test_SN5659_R2020_cal->Gain2_Gain *
      speedgoat_test_SN5659_R2020b_B.SineWave;

    /* Gain: '<S2>/Gain3' */
    speedgoat_test_SN5659_R2020b_B.Gain3 =
      speedgoat_test_SN5659_R2020_cal->Gain3_Gain *
      speedgoat_test_SN5659_R2020b_B.SineWave;

    /* S-Function (sg_IO132_IO133_da_s_v2): '<S2>/Analog output v2 ' */

    /* Level2 S-Function Block: '<S2>/Analog output v2 ' (sg_IO132_IO133_da_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[4];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO132_IO133_di_s_v2): '<S2>/Digital input v2 ' */

    /* Level2 S-Function Block: '<S2>/Digital input v2 ' (sg_IO132_IO133_di_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[5];
      sfcnOutputs(rts,0);
    }

    /* DiscretePulseGenerator: '<S2>/Pulse Generator' */
    speedgoat_test_SN5659_R2020b_B.PulseGenerator =
      (speedgoat_test_SN5659_R2020b_DW.clockTickCounter <
       speedgoat_test_SN5659_R2020_cal->PulseGenerator_Duty) &&
      (speedgoat_test_SN5659_R2020b_DW.clockTickCounter >= 0) ?
      speedgoat_test_SN5659_R2020_cal->PulseGenerator_Amp : 0.0;

    /* DiscretePulseGenerator: '<S2>/Pulse Generator' */
    if (speedgoat_test_SN5659_R2020b_DW.clockTickCounter >=
        speedgoat_test_SN5659_R2020_cal->PulseGenerator_Period - 1.0) {
      speedgoat_test_SN5659_R2020b_DW.clockTickCounter = 0;
    } else {
      speedgoat_test_SN5659_R2020b_DW.clockTickCounter++;
    }

    /* DiscretePulseGenerator: '<S2>/Pulse Generator1' */
    speedgoat_test_SN5659_R2020b_B.PulseGenerator1 =
      (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_c <
       speedgoat_test_SN5659_R2020_cal->PulseGenerator1_Duty) &&
      (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_c >= 0) ?
      speedgoat_test_SN5659_R2020_cal->PulseGenerator1_Amp : 0.0;

    /* DiscretePulseGenerator: '<S2>/Pulse Generator1' */
    if (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_c >=
        speedgoat_test_SN5659_R2020_cal->PulseGenerator1_Period - 1.0) {
      speedgoat_test_SN5659_R2020b_DW.clockTickCounter_c = 0;
    } else {
      speedgoat_test_SN5659_R2020b_DW.clockTickCounter_c++;
    }

    /* S-Function (sg_IO132_IO133_do_s_v2): '<S2>/Digital output v2 ' */

    /* Level2 S-Function Block: '<S2>/Digital output v2 ' (sg_IO132_IO133_do_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[6];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO204_setup_s): '<S3>/Setup' */

    /* Level2 S-Function Block: '<S3>/Setup' (sg_IO204_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[7];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO204_read_s): '<S3>/Read' */

    /* Level2 S-Function Block: '<S3>/Read' (sg_IO204_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[8];
      sfcnOutputs(rts,0);
    }

    /* Gain: '<S3>/Gain' */
    speedgoat_test_SN5659_R2020b_B.IO204_CH6 =
      speedgoat_test_SN5659_R2020_cal->Gain_Gain_i *
      speedgoat_test_SN5659_R2020b_B.Read_o6;

    /* Gain: '<S3>/Gain1' */
    speedgoat_test_SN5659_R2020b_B.IO204_CH11 =
      speedgoat_test_SN5659_R2020_cal->Gain1_Gain_o *
      speedgoat_test_SN5659_R2020b_B.Read_o11;

    /* Gain: '<S3>/Gain2' */
    speedgoat_test_SN5659_R2020b_B.IO204_CH16 =
      speedgoat_test_SN5659_R2020_cal->Gain2_Gain_j *
      speedgoat_test_SN5659_R2020b_B.Read_o16;

    /* S-Function (sg_IO204_write_s): '<S3>/Write' */

    /* Level2 S-Function Block: '<S3>/Write' (sg_IO204_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[9];
      sfcnOutputs(rts,0);
    }

    /* DiscretePulseGenerator: '<S3>/Pulse Generator' */
    speedgoat_test_SN5659_R2020b_B.PulseGenerator_k =
      (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_b <
       speedgoat_test_SN5659_R2020_cal->PulseGenerator_Duty_i) &&
      (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_b >= 0) ?
      speedgoat_test_SN5659_R2020_cal->PulseGenerator_Amp_g : 0.0;

    /* DiscretePulseGenerator: '<S3>/Pulse Generator' */
    if (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_b >=
        speedgoat_test_SN5659_R2020_cal->PulseGenerator_Period_i - 1.0) {
      speedgoat_test_SN5659_R2020b_DW.clockTickCounter_b = 0;
    } else {
      speedgoat_test_SN5659_R2020b_DW.clockTickCounter_b++;
    }

    /* S-Function (sg_serial_setup_s): '<S5>/Setup ' */

    /* Level2 S-Function Block: '<S5>/Setup ' (sg_serial_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[10];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO612_setup_s): '<S6>/CAN Setup' */

    /* Level2 S-Function Block: '<S6>/CAN Setup' (sg_IO612_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[11];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S6>/Sine Wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave_Freq_k *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave_Freq_k *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable = 0;
    }

    /* Sin: '<S6>/Sine Wave' */
    speedgoat_test_SN5659_R2020b_B.SineWave_e =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin *
        speedgoat_test_SN5659_R2020_cal->SineWave_PCos +
        speedgoat_test_SN5659_R2020b_DW.lastCos *
        speedgoat_test_SN5659_R2020_cal->SineWave_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave_HCos +
       (speedgoat_test_SN5659_R2020b_DW.lastCos *
        speedgoat_test_SN5659_R2020_cal->SineWave_PCos -
        speedgoat_test_SN5659_R2020b_DW.lastSin *
        speedgoat_test_SN5659_R2020_cal->SineWave_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave_Hsin) *
      speedgoat_test_SN5659_R2020_cal->SineWave_Amp_i +
      speedgoat_test_SN5659_R2020_cal->SineWave_Bias_e;

    /* S-Function (scanpack): '<S6>/CAN Pack' */
    /* S-Function (scanpack): '<S6>/CAN Pack' */
    speedgoat_test_SN5659_R2020b_B.CANPack.ID = 100U;
    speedgoat_test_SN5659_R2020b_B.CANPack.Length = 8U;
    speedgoat_test_SN5659_R2020b_B.CANPack.Extended = 0U;
    speedgoat_test_SN5659_R2020b_B.CANPack.Remote = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[0] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[1] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[2] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[3] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[4] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[5] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[6] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack.Data[7] = 0;

    {
      /* --------------- START Packing signal 0 ------------------
       *  startBit                = 0
       *  length                  = 64
       *  desiredSignalByteLayout = LITTLEENDIAN
       *  dataType                = DOUBLE
       *  factor                  = 1.0
       *  offset                  = 0.0
       *  minimum                 = 0.0
       *  maximum                 = 0.0
       * -----------------------------------------------------------------------*/
      {
        real64_T outValue = 0;

        {
          real64_T result = speedgoat_test_SN5659_R2020b_B.SineWave_e;

          /* no scaling required */
          outValue = result;
        }

        {
          real64_T typedValue = outValue;

          {
            (void) std::memcpy(speedgoat_test_SN5659_R2020b_B.CANPack.Data,
                               &typedValue,
                               8);
          }
        }
      }
    }

    /* S-Function (sg_IO61X_write_s): '<S6>/CAN Write' */

    /* Level2 S-Function Block: '<S6>/CAN Write' (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[12];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S6>/Sine Wave1' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_p != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_c = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave1_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_g = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave1_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_p = 0;
    }

    /* Sin: '<S6>/Sine Wave1' */
    speedgoat_test_SN5659_R2020b_B.SineWave1 =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_c *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PCos +
        speedgoat_test_SN5659_R2020b_DW.lastCos_g *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave1_HCos +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_g *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PCos -
        speedgoat_test_SN5659_R2020b_DW.lastSin_c *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin) *
      speedgoat_test_SN5659_R2020_cal->SineWave1_Amp +
      speedgoat_test_SN5659_R2020_cal->SineWave1_Bias;

    /* S-Function (scanpack): '<S6>/CAN Pack1' */
    /* S-Function (scanpack): '<S6>/CAN Pack1' */
    speedgoat_test_SN5659_R2020b_B.CANPack1.ID = 101U;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Length = 8U;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Extended = 0U;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Remote = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[0] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[1] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[2] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[3] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[4] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[5] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[6] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack1.Data[7] = 0;

    {
      /* --------------- START Packing signal 0 ------------------
       *  startBit                = 0
       *  length                  = 64
       *  desiredSignalByteLayout = LITTLEENDIAN
       *  dataType                = DOUBLE
       *  factor                  = 1.0
       *  offset                  = 0.0
       *  minimum                 = 0.0
       *  maximum                 = 0.0
       * -----------------------------------------------------------------------*/
      {
        real64_T outValue = 0;

        {
          real64_T result = speedgoat_test_SN5659_R2020b_B.SineWave1;

          /* no scaling required */
          outValue = result;
        }

        {
          real64_T typedValue = outValue;

          {
            (void) std::memcpy(speedgoat_test_SN5659_R2020b_B.CANPack1.Data,
                               &typedValue,
                               8);
          }
        }
      }
    }

    /* S-Function (sg_IO61X_write_s): '<S6>/CAN Write2' */

    /* Level2 S-Function Block: '<S6>/CAN Write2' (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[13];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S6>/Sine Wave2' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_i != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_i = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave2_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_i = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave2_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_i = 0;
    }

    /* Sin: '<S6>/Sine Wave2' */
    speedgoat_test_SN5659_R2020b_B.SineWave2 =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_i *
        speedgoat_test_SN5659_R2020_cal->SineWave2_PCos +
        speedgoat_test_SN5659_R2020b_DW.lastCos_i *
        speedgoat_test_SN5659_R2020_cal->SineWave2_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave2_HCos +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_i *
        speedgoat_test_SN5659_R2020_cal->SineWave2_PCos -
        speedgoat_test_SN5659_R2020b_DW.lastSin_i *
        speedgoat_test_SN5659_R2020_cal->SineWave2_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave2_Hsin) *
      speedgoat_test_SN5659_R2020_cal->SineWave2_Amp +
      speedgoat_test_SN5659_R2020_cal->SineWave2_Bias;

    /* S-Function (scanpack): '<S6>/CAN Pack2' */
    /* S-Function (scanpack): '<S6>/CAN Pack2' */
    speedgoat_test_SN5659_R2020b_B.CANPack2.ID = 102U;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Length = 8U;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Extended = 0U;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Remote = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[0] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[1] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[2] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[3] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[4] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[5] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[6] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack2.Data[7] = 0;

    {
      /* --------------- START Packing signal 0 ------------------
       *  startBit                = 0
       *  length                  = 64
       *  desiredSignalByteLayout = LITTLEENDIAN
       *  dataType                = DOUBLE
       *  factor                  = 1.0
       *  offset                  = 0.0
       *  minimum                 = 0.0
       *  maximum                 = 0.0
       * -----------------------------------------------------------------------*/
      {
        real64_T outValue = 0;

        {
          real64_T result = speedgoat_test_SN5659_R2020b_B.SineWave2;

          /* no scaling required */
          outValue = result;
        }

        {
          real64_T typedValue = outValue;

          {
            (void) std::memcpy(speedgoat_test_SN5659_R2020b_B.CANPack2.Data,
                               &typedValue,
                               8);
          }
        }
      }
    }

    /* S-Function (sg_IO61X_write_s): '<S6>/CAN Write3' */

    /* Level2 S-Function Block: '<S6>/CAN Write3' (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[14];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S6>/Sine Wave3' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_h != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_d = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave3_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_b = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave3_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_h = 0;
    }

    /* Sin: '<S6>/Sine Wave3' */
    speedgoat_test_SN5659_R2020b_B.SineWave3 =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_d *
        speedgoat_test_SN5659_R2020_cal->SineWave3_PCos +
        speedgoat_test_SN5659_R2020b_DW.lastCos_b *
        speedgoat_test_SN5659_R2020_cal->SineWave3_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave3_HCos +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_b *
        speedgoat_test_SN5659_R2020_cal->SineWave3_PCos -
        speedgoat_test_SN5659_R2020b_DW.lastSin_d *
        speedgoat_test_SN5659_R2020_cal->SineWave3_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave3_Hsin) *
      speedgoat_test_SN5659_R2020_cal->SineWave3_Amp +
      speedgoat_test_SN5659_R2020_cal->SineWave3_Bias;

    /* S-Function (scanpack): '<S6>/CAN Pack3' */
    /* S-Function (scanpack): '<S6>/CAN Pack3' */
    speedgoat_test_SN5659_R2020b_B.CANPack3.ID = 300U;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Length = 8U;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Extended = 0U;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Remote = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[0] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[1] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[2] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[3] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[4] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[5] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[6] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack3.Data[7] = 0;

    {
      /* --------------- START Packing signal 0 ------------------
       *  startBit                = 0
       *  length                  = 64
       *  desiredSignalByteLayout = LITTLEENDIAN
       *  dataType                = DOUBLE
       *  factor                  = 1.0
       *  offset                  = 0.0
       *  minimum                 = 0.0
       *  maximum                 = 0.0
       * -----------------------------------------------------------------------*/
      {
        real64_T outValue = 0;

        {
          real64_T result = speedgoat_test_SN5659_R2020b_B.SineWave3;

          /* no scaling required */
          outValue = result;
        }

        {
          real64_T typedValue = outValue;

          {
            (void) std::memcpy(speedgoat_test_SN5659_R2020b_B.CANPack3.Data,
                               &typedValue,
                               8);
          }
        }
      }
    }

    /* S-Function (sg_IO61X_write_s): '<S6>/CAN Write1' */

    /* Level2 S-Function Block: '<S6>/CAN Write1' (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[15];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S6>/Sine Wave4' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_b != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_h = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave4_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_j = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave4_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_b = 0;
    }

    /* Sin: '<S6>/Sine Wave4' */
    speedgoat_test_SN5659_R2020b_B.SineWave4 =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_h *
        speedgoat_test_SN5659_R2020_cal->SineWave4_PCos +
        speedgoat_test_SN5659_R2020b_DW.lastCos_j *
        speedgoat_test_SN5659_R2020_cal->SineWave4_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave4_HCos +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_j *
        speedgoat_test_SN5659_R2020_cal->SineWave4_PCos -
        speedgoat_test_SN5659_R2020b_DW.lastSin_h *
        speedgoat_test_SN5659_R2020_cal->SineWave4_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave4_Hsin) *
      speedgoat_test_SN5659_R2020_cal->SineWave4_Amp +
      speedgoat_test_SN5659_R2020_cal->SineWave4_Bias;

    /* S-Function (scanpack): '<S6>/CAN Pack4' */
    /* S-Function (scanpack): '<S6>/CAN Pack4' */
    speedgoat_test_SN5659_R2020b_B.CANPack4.ID = 301U;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Length = 8U;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Extended = 0U;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Remote = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[0] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[1] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[2] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[3] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[4] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[5] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[6] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack4.Data[7] = 0;

    {
      /* --------------- START Packing signal 0 ------------------
       *  startBit                = 0
       *  length                  = 64
       *  desiredSignalByteLayout = LITTLEENDIAN
       *  dataType                = DOUBLE
       *  factor                  = 1.0
       *  offset                  = 0.0
       *  minimum                 = 0.0
       *  maximum                 = 0.0
       * -----------------------------------------------------------------------*/
      {
        real64_T outValue = 0;

        {
          real64_T result = speedgoat_test_SN5659_R2020b_B.SineWave4;

          /* no scaling required */
          outValue = result;
        }

        {
          real64_T typedValue = outValue;

          {
            (void) std::memcpy(speedgoat_test_SN5659_R2020b_B.CANPack4.Data,
                               &typedValue,
                               8);
          }
        }
      }
    }

    /* S-Function (sg_IO61X_write_s): '<S6>/CAN Write4' */

    /* Level2 S-Function Block: '<S6>/CAN Write4' (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[16];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S6>/Sine Wave5' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_py != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_cd = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave5_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_c = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave5_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_py = 0;
    }

    /* Sin: '<S6>/Sine Wave5' */
    speedgoat_test_SN5659_R2020b_B.SineWave5 =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_cd *
        speedgoat_test_SN5659_R2020_cal->SineWave5_PCos +
        speedgoat_test_SN5659_R2020b_DW.lastCos_c *
        speedgoat_test_SN5659_R2020_cal->SineWave5_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave5_HCos +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_c *
        speedgoat_test_SN5659_R2020_cal->SineWave5_PCos -
        speedgoat_test_SN5659_R2020b_DW.lastSin_cd *
        speedgoat_test_SN5659_R2020_cal->SineWave5_PSin) *
       speedgoat_test_SN5659_R2020_cal->SineWave5_Hsin) *
      speedgoat_test_SN5659_R2020_cal->SineWave5_Amp +
      speedgoat_test_SN5659_R2020_cal->SineWave5_Bias;

    /* S-Function (scanpack): '<S6>/CAN Pack5' */
    /* S-Function (scanpack): '<S6>/CAN Pack5' */
    speedgoat_test_SN5659_R2020b_B.CANPack5.ID = 302U;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Length = 8U;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Extended = 0U;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Remote = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[0] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[1] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[2] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[3] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[4] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[5] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[6] = 0;
    speedgoat_test_SN5659_R2020b_B.CANPack5.Data[7] = 0;

    {
      /* --------------- START Packing signal 0 ------------------
       *  startBit                = 0
       *  length                  = 64
       *  desiredSignalByteLayout = LITTLEENDIAN
       *  dataType                = DOUBLE
       *  factor                  = 1.0
       *  offset                  = 0.0
       *  minimum                 = 0.0
       *  maximum                 = 0.0
       * -----------------------------------------------------------------------*/
      {
        real64_T outValue = 0;

        {
          real64_T result = speedgoat_test_SN5659_R2020b_B.SineWave5;

          /* no scaling required */
          outValue = result;
        }

        {
          real64_T typedValue = outValue;

          {
            (void) std::memcpy(speedgoat_test_SN5659_R2020b_B.CANPack5.Data,
                               &typedValue,
                               8);
          }
        }
      }
    }

    /* S-Function (sg_IO61X_write_s): '<S6>/CAN Write5' */

    /* Level2 S-Function Block: '<S6>/CAN Write5' (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[17];
      sfcnOutputs(rts,0);
    }

    /* Constant: '<S6>/RX Sample Time' */
    speedgoat_test_SN5659_R2020b_B.RXSampleTime =
      speedgoat_test_SN5659_R2020_cal->RXSampleTime_Value;

    /* Outputs for Iterator SubSystem: '<S6>/CAN Read Loop - Port 3' incorporates:
     *  WhileIterator: '<S10>/While Iterator'
     */
    s10_iter = 1;
    do {
      /* Level2 S-Function Block: '<S10>/CAN Read' (sg_IO61X_read_s) */
      {
        SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[0];
        sfcnOutputs(rts,0);
      }

      {
        /* S-Function (scanunpack): '<S10>/CAN Unpack' */
        if ((8 == speedgoat_test_SN5659_R2020b_B.CANRead_o2.Length) &&
            (speedgoat_test_SN5659_R2020b_B.CANRead_o2.ID != INVALID_CAN_ID) ) {
          if ((100 == speedgoat_test_SN5659_R2020b_B.CANRead_o2.ID) && (0U ==
               speedgoat_test_SN5659_R2020b_B.CANRead_o2.Extended) ) {
            {
              /* --------------- START Unpacking signal 0 ------------------
               *  startBit                = 0
               *  length                  = 64
               *  desiredSignalByteLayout = LITTLEENDIAN
               *  dataType                = DOUBLE
               *  factor                  = 1.0
               *  offset                  = 0.0
               * -----------------------------------------------------------------------*/
              {
                real64_T outValue = 0;

                {
                  real64_T typeUnpackedValue = 0;

                  {
                    (void) std::memcpy(&typeUnpackedValue,
                                       speedgoat_test_SN5659_R2020b_B.CANRead_o2.Data,
                                       8);
                  }

                  outValue = (real64_T) (typeUnpackedValue);
                }

                {
                  real64_T result = (real64_T) outValue;
                  speedgoat_test_SN5659_R2020b_B.CANUnpack_c = result;
                }
              }
            }
          }
        }
      }

      {
        /* S-Function (scanunpack): '<S10>/CAN Unpack1' */
        if ((8 == speedgoat_test_SN5659_R2020b_B.CANRead_o2.Length) &&
            (speedgoat_test_SN5659_R2020b_B.CANRead_o2.ID != INVALID_CAN_ID) ) {
          if ((101 == speedgoat_test_SN5659_R2020b_B.CANRead_o2.ID) && (0U ==
               speedgoat_test_SN5659_R2020b_B.CANRead_o2.Extended) ) {
            {
              /* --------------- START Unpacking signal 0 ------------------
               *  startBit                = 0
               *  length                  = 64
               *  desiredSignalByteLayout = LITTLEENDIAN
               *  dataType                = DOUBLE
               *  factor                  = 1.0
               *  offset                  = 0.0
               * -----------------------------------------------------------------------*/
              {
                real64_T outValue = 0;

                {
                  real64_T typeUnpackedValue = 0;

                  {
                    (void) std::memcpy(&typeUnpackedValue,
                                       speedgoat_test_SN5659_R2020b_B.CANRead_o2.Data,
                                       8);
                  }

                  outValue = (real64_T) (typeUnpackedValue);
                }

                {
                  real64_T result = (real64_T) outValue;
                  speedgoat_test_SN5659_R2020b_B.CANUnpack1_o = result;
                }
              }
            }
          }
        }
      }

      {
        /* S-Function (scanunpack): '<S10>/CAN Unpack2' */
        if ((8 == speedgoat_test_SN5659_R2020b_B.CANRead_o2.Length) &&
            (speedgoat_test_SN5659_R2020b_B.CANRead_o2.ID != INVALID_CAN_ID) ) {
          if ((102 == speedgoat_test_SN5659_R2020b_B.CANRead_o2.ID) && (0U ==
               speedgoat_test_SN5659_R2020b_B.CANRead_o2.Extended) ) {
            {
              /* --------------- START Unpacking signal 0 ------------------
               *  startBit                = 0
               *  length                  = 64
               *  desiredSignalByteLayout = LITTLEENDIAN
               *  dataType                = DOUBLE
               *  factor                  = 1.0
               *  offset                  = 0.0
               * -----------------------------------------------------------------------*/
              {
                real64_T outValue = 0;

                {
                  real64_T typeUnpackedValue = 0;

                  {
                    (void) std::memcpy(&typeUnpackedValue,
                                       speedgoat_test_SN5659_R2020b_B.CANRead_o2.Data,
                                       8);
                  }

                  outValue = (real64_T) (typeUnpackedValue);
                }

                {
                  real64_T result = (real64_T) outValue;
                  speedgoat_test_SN5659_R2020b_B.CANUnpack2_j = result;
                }
              }
            }
          }
        }
      }

      s10_iter++;
    } while (speedgoat_test_SN5659_R2020b_B.CANRead_o1 && (s10_iter <= 501));

    /* End of Outputs for SubSystem: '<S6>/CAN Read Loop - Port 3' */

    /* Constant: '<S6>/RX Sample Time1' */
    speedgoat_test_SN5659_R2020b_B.RXSampleTime1 =
      speedgoat_test_SN5659_R2020_cal->RXSampleTime1_Value;

    /* Outputs for Iterator SubSystem: '<S6>/CAN Read Loop - Port 4' incorporates:
     *  WhileIterator: '<S11>/While Iterator'
     */
    s10_iter = 1;
    do {
      /* Level2 S-Function Block: '<S11>/CAN Read1' (sg_IO61X_read_s) */
      {
        SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[1];
        sfcnOutputs(rts,0);
      }

      {
        /* S-Function (scanunpack): '<S11>/CAN Unpack' */
        if ((8 == speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Length) &&
            (speedgoat_test_SN5659_R2020b_B.CANRead1_o2.ID != INVALID_CAN_ID) )
        {
          if ((300 == speedgoat_test_SN5659_R2020b_B.CANRead1_o2.ID) && (0U ==
               speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Extended) ) {
            {
              /* --------------- START Unpacking signal 0 ------------------
               *  startBit                = 0
               *  length                  = 64
               *  desiredSignalByteLayout = LITTLEENDIAN
               *  dataType                = DOUBLE
               *  factor                  = 1.0
               *  offset                  = 0.0
               * -----------------------------------------------------------------------*/
              {
                real64_T outValue = 0;

                {
                  real64_T typeUnpackedValue = 0;

                  {
                    (void) std::memcpy(&typeUnpackedValue,
                                       speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Data,
                                       8);
                  }

                  outValue = (real64_T) (typeUnpackedValue);
                }

                {
                  real64_T result = (real64_T) outValue;
                  speedgoat_test_SN5659_R2020b_B.CANUnpack = result;
                }
              }
            }
          }
        }
      }

      {
        /* S-Function (scanunpack): '<S11>/CAN Unpack1' */
        if ((8 == speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Length) &&
            (speedgoat_test_SN5659_R2020b_B.CANRead1_o2.ID != INVALID_CAN_ID) )
        {
          if ((301 == speedgoat_test_SN5659_R2020b_B.CANRead1_o2.ID) && (0U ==
               speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Extended) ) {
            {
              /* --------------- START Unpacking signal 0 ------------------
               *  startBit                = 0
               *  length                  = 64
               *  desiredSignalByteLayout = LITTLEENDIAN
               *  dataType                = DOUBLE
               *  factor                  = 1.0
               *  offset                  = 0.0
               * -----------------------------------------------------------------------*/
              {
                real64_T outValue = 0;

                {
                  real64_T typeUnpackedValue = 0;

                  {
                    (void) std::memcpy(&typeUnpackedValue,
                                       speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Data,
                                       8);
                  }

                  outValue = (real64_T) (typeUnpackedValue);
                }

                {
                  real64_T result = (real64_T) outValue;
                  speedgoat_test_SN5659_R2020b_B.CANUnpack1 = result;
                }
              }
            }
          }
        }
      }

      {
        /* S-Function (scanunpack): '<S11>/CAN Unpack2' */
        if ((8 == speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Length) &&
            (speedgoat_test_SN5659_R2020b_B.CANRead1_o2.ID != INVALID_CAN_ID) )
        {
          if ((302 == speedgoat_test_SN5659_R2020b_B.CANRead1_o2.ID) && (0U ==
               speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Extended) ) {
            {
              /* --------------- START Unpacking signal 0 ------------------
               *  startBit                = 0
               *  length                  = 64
               *  desiredSignalByteLayout = LITTLEENDIAN
               *  dataType                = DOUBLE
               *  factor                  = 1.0
               *  offset                  = 0.0
               * -----------------------------------------------------------------------*/
              {
                real64_T outValue = 0;

                {
                  real64_T typeUnpackedValue = 0;

                  {
                    (void) std::memcpy(&typeUnpackedValue,
                                       speedgoat_test_SN5659_R2020b_B.CANRead1_o2.Data,
                                       8);
                  }

                  outValue = (real64_T) (typeUnpackedValue);
                }

                {
                  real64_T result = (real64_T) outValue;
                  speedgoat_test_SN5659_R2020b_B.CANUnpack2 = result;
                }
              }
            }
          }
        }
      }

      s10_iter++;
    } while (speedgoat_test_SN5659_R2020b_B.CANRead1_o1 && (s10_iter <= 501));

    /* End of Outputs for SubSystem: '<S6>/CAN Read Loop - Port 4' */
    /* S-Function (sg_io682_setup_s_v3): '<S7>/Setup v2 ' */

    /* Level2 S-Function Block: '<S7>/Setup v2 ' (sg_io682_setup_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[18];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S1>/Sine Wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_bc != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_ib = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave_Freq_f *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_i1 = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave_Freq_f *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_bc = 0;
    }

    /* Sin: '<S1>/Sine Wave' */
    speedgoat_test_SN5659_R2020b_B.SineWave_h =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_ib *
        speedgoat_test_SN5659_R2020_cal->SineWave_PCos_l +
        speedgoat_test_SN5659_R2020b_DW.lastCos_i1 *
        speedgoat_test_SN5659_R2020_cal->SineWave_PSin_o) *
       speedgoat_test_SN5659_R2020_cal->SineWave_HCos_b +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_i1 *
        speedgoat_test_SN5659_R2020_cal->SineWave_PCos_l -
        speedgoat_test_SN5659_R2020b_DW.lastSin_ib *
        speedgoat_test_SN5659_R2020_cal->SineWave_PSin_o) *
       speedgoat_test_SN5659_R2020_cal->SineWave_Hsin_c) *
      speedgoat_test_SN5659_R2020_cal->SineWave_Amp_l +
      speedgoat_test_SN5659_R2020_cal->SineWave_Bias_d;

    /* S-Function (sg_IO107_da_s): '<S1>/Analog output' */

    /* Level2 S-Function Block: '<S1>/Analog output' (sg_IO107_da_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[19];
      sfcnOutputs(rts,0);
    }

    /* Sin: '<S1>/Sine Wave1' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_o != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_d2 = std::sin
        (speedgoat_test_SN5659_R2020_cal->SineWave1_Freq_c *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_o = std::cos
        (speedgoat_test_SN5659_R2020_cal->SineWave1_Freq_c *
         speedgoat_test_SN5659_R2020b_M->Timing.t[1]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_o = 0;
    }

    /* Sin: '<S1>/Sine Wave1' */
    speedgoat_test_SN5659_R2020b_B.SineWave1_c =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_d2 *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PCos_o +
        speedgoat_test_SN5659_R2020b_DW.lastCos_o *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PSin_n) *
       speedgoat_test_SN5659_R2020_cal->SineWave1_HCos_j +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_o *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PCos_o -
        speedgoat_test_SN5659_R2020b_DW.lastSin_d2 *
        speedgoat_test_SN5659_R2020_cal->SineWave1_PSin_n) *
       speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin_m) *
      speedgoat_test_SN5659_R2020_cal->SineWave1_Amp_d +
      speedgoat_test_SN5659_R2020_cal->SineWave1_Bias_d;

    /* S-Function (sg_IO107_da_s): '<S1>/Analog output1' */

    /* Level2 S-Function Block: '<S1>/Analog output1' (sg_IO107_da_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[20];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO107_setup_s): '<S1>/Setup' */

    /* Level2 S-Function Block: '<S1>/Setup' (sg_IO107_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[21];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO107_setup_s): '<S1>/Setup1' */

    /* Level2 S-Function Block: '<S1>/Setup1' (sg_IO107_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[22];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO421_lvdt_read_s): '<S4>/LVDT read' */

    /* Level2 S-Function Block: '<S4>/LVDT read' (sg_IO421_lvdt_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[23];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO421_lvdt_read_s): '<S4>/LVDT read1' */

    /* Level2 S-Function Block: '<S4>/LVDT read1' (sg_IO421_lvdt_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[24];
      sfcnOutputs(rts,0);
    }

    /* S-Function (sg_IO421_ref_s): '<S4>/REF' */

    /* Level2 S-Function Block: '<S4>/REF' (sg_IO421_ref_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[25];
      sfcnOutputs(rts,0);
    }
  }

  {
    real_T HoldCosine;
    real_T HoldSine;

    /* Update for Sin: '<S6>/Sine Wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos;
    speedgoat_test_SN5659_R2020b_DW.lastSin = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave_HCos + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave_Hsin;
    speedgoat_test_SN5659_R2020b_DW.lastCos = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave_HCos - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave_Hsin;

    /* Update for Sin: '<S6>/Sine Wave1' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_c;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_g;
    speedgoat_test_SN5659_R2020b_DW.lastSin_c = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_HCos + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin;
    speedgoat_test_SN5659_R2020b_DW.lastCos_g = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_HCos - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin;

    /* Update for Sin: '<S6>/Sine Wave2' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_i;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_i;
    speedgoat_test_SN5659_R2020b_DW.lastSin_i = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave2_HCos + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave2_Hsin;
    speedgoat_test_SN5659_R2020b_DW.lastCos_i = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave2_HCos - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave2_Hsin;

    /* Update for Sin: '<S6>/Sine Wave3' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_d;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_b;
    speedgoat_test_SN5659_R2020b_DW.lastSin_d = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave3_HCos + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave3_Hsin;
    speedgoat_test_SN5659_R2020b_DW.lastCos_b = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave3_HCos - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave3_Hsin;

    /* Update for Sin: '<S6>/Sine Wave4' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_h;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_j;
    speedgoat_test_SN5659_R2020b_DW.lastSin_h = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave4_HCos + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave4_Hsin;
    speedgoat_test_SN5659_R2020b_DW.lastCos_j = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave4_HCos - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave4_Hsin;

    /* Update for Sin: '<S6>/Sine Wave5' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_cd;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_c;
    speedgoat_test_SN5659_R2020b_DW.lastSin_cd = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave5_HCos + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave5_Hsin;
    speedgoat_test_SN5659_R2020b_DW.lastCos_c = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave5_HCos - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave5_Hsin;

    /* Update for Sin: '<S1>/Sine Wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_ib;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_i1;
    speedgoat_test_SN5659_R2020b_DW.lastSin_ib = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave_HCos_b + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave_Hsin_c;
    speedgoat_test_SN5659_R2020b_DW.lastCos_i1 = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave_HCos_b - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave_Hsin_c;

    /* Update for Sin: '<S1>/Sine Wave1' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_d2;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_o;
    speedgoat_test_SN5659_R2020b_DW.lastSin_d2 = HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_HCos_j + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin_m;
    speedgoat_test_SN5659_R2020b_DW.lastCos_o = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_HCos_j - HoldSine *
      speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin_m;
  }

  /* Update absolute time */
  /* The "clockTick0" counts the number of times the code of this task has
   * been executed. The absolute time is the multiplication of "clockTick0"
   * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
   * overflow during the application lifespan selected.
   * Timer of this task consists of two 32 bit unsigned integers.
   * The two integers represent the low bits Timing.clockTick0 and the high bits
   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.
   */
  if (!(++speedgoat_test_SN5659_R2020b_M->Timing.clockTick0)) {
    ++speedgoat_test_SN5659_R2020b_M->Timing.clockTickH0;
  }

  speedgoat_test_SN5659_R2020b_M->Timing.t[0] =
    speedgoat_test_SN5659_R2020b_M->Timing.clockTick0 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize0 +
    speedgoat_test_SN5659_R2020b_M->Timing.clockTickH0 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize0 * 4294967296.0;

  /* Update absolute time */
  /* The "clockTick1" counts the number of times the code of this task has
   * been executed. The absolute time is the multiplication of "clockTick1"
   * and "Timing.stepSize1". Size of "clockTick1" ensures timer will not
   * overflow during the application lifespan selected.
   * Timer of this task consists of two 32 bit unsigned integers.
   * The two integers represent the low bits Timing.clockTick1 and the high bits
   * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.
   */
  if (!(++speedgoat_test_SN5659_R2020b_M->Timing.clockTick1)) {
    ++speedgoat_test_SN5659_R2020b_M->Timing.clockTickH1;
  }

  speedgoat_test_SN5659_R2020b_M->Timing.t[1] =
    speedgoat_test_SN5659_R2020b_M->Timing.clockTick1 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize1 +
    speedgoat_test_SN5659_R2020b_M->Timing.clockTickH1 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize1 * 4294967296.0;
}

/* Model step function for TID2 */
void speedgoat_test_SN5659_R2020b_step2(void) /* Sample time: [0.005s, 0.0s] */
{
  {
    real_T tmp;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 ' */

    /* Level2 S-Function Block: '<S7>/Receive v2 ' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[26];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 1' */

    /* Level2 S-Function Block: '<S12>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[27];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 5' */

    /* Level2 S-Function Block: '<S12>/Decode 5' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[28];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 3' */

    /* Level2 S-Function Block: '<S12>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[29];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 4' */

    /* Level2 S-Function Block: '<S12>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[30];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 1' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH1[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH1[1] =
      speedgoat_test_SN5659_R2020b_B.Decode5;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH1[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH1[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 1' */

    /* Level2 S-Function Block: '<S7>/Receive v2 1' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[31];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 1' */

    /* Level2 S-Function Block: '<S20>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[32];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 2' */

    /* Level2 S-Function Block: '<S20>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[33];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 3' */

    /* Level2 S-Function Block: '<S20>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[34];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 4' */

    /* Level2 S-Function Block: '<S20>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[35];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 2' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH2[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_m;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH2[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH2[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_l;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH2[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_d;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 8' */

    /* Level2 S-Function Block: '<S7>/Receive v2 8' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[36];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 1' */

    /* Level2 S-Function Block: '<S27>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[37];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 5' */

    /* Level2 S-Function Block: '<S27>/Decode 5' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[38];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 3' */

    /* Level2 S-Function Block: '<S27>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[39];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 4' */

    /* Level2 S-Function Block: '<S27>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[40];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 9' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH9[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_d;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH9[1] =
      speedgoat_test_SN5659_R2020b_B.Decode5_p;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH9[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_c;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH9[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_o;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 9' */

    /* Level2 S-Function Block: '<S7>/Receive v2 9' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[41];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 1' */

    /* Level2 S-Function Block: '<S13>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[42];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 2' */

    /* Level2 S-Function Block: '<S13>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[43];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 3' */

    /* Level2 S-Function Block: '<S13>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[44];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 4' */

    /* Level2 S-Function Block: '<S13>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[45];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 10' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH10[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_g;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH10[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_n;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH10[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_j;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH10[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_h;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 10' */

    /* Level2 S-Function Block: '<S7>/Receive v2 10' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[46];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 1' */

    /* Level2 S-Function Block: '<S14>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[47];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 2' */

    /* Level2 S-Function Block: '<S14>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[48];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 3' */

    /* Level2 S-Function Block: '<S14>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[49];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 4' */

    /* Level2 S-Function Block: '<S14>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[50];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 11' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH11[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_f;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH11[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_j;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH11[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_k;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH11[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_c;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 11' */

    /* Level2 S-Function Block: '<S7>/Receive v2 11' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[51];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 1' */

    /* Level2 S-Function Block: '<S15>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[52];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 2' */

    /* Level2 S-Function Block: '<S15>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[53];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 3' */

    /* Level2 S-Function Block: '<S15>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[54];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 4' */

    /* Level2 S-Function Block: '<S15>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[55];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 12' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH12[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_a;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH12[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_j2;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH12[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_m;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH12[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_a;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 12' */

    /* Level2 S-Function Block: '<S7>/Receive v2 12' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[56];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 1' */

    /* Level2 S-Function Block: '<S16>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[57];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 5' */

    /* Level2 S-Function Block: '<S16>/Decode 5' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[58];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 3' */

    /* Level2 S-Function Block: '<S16>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[59];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 4' */

    /* Level2 S-Function Block: '<S16>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[60];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 13' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH13[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_i;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH13[1] =
      speedgoat_test_SN5659_R2020b_B.Decode5_i;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH13[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_o;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH13[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_b;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 13' */

    /* Level2 S-Function Block: '<S7>/Receive v2 13' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[61];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 1' */

    /* Level2 S-Function Block: '<S17>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[62];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 2' */

    /* Level2 S-Function Block: '<S17>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[63];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 3' */

    /* Level2 S-Function Block: '<S17>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[64];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 4' */

    /* Level2 S-Function Block: '<S17>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[65];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 14' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH14[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_my;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH14[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_i;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH14[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_n;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH14[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_c1;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 14' */

    /* Level2 S-Function Block: '<S7>/Receive v2 14' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[66];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 1' */

    /* Level2 S-Function Block: '<S18>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[67];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 2' */

    /* Level2 S-Function Block: '<S18>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[68];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 3' */

    /* Level2 S-Function Block: '<S18>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[69];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 4' */

    /* Level2 S-Function Block: '<S18>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[70];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 15' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH15[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_n;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH15[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_b;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH15[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_cq;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH15[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_oi;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 15' */

    /* Level2 S-Function Block: '<S7>/Receive v2 15' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[71];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 1' */

    /* Level2 S-Function Block: '<S19>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[72];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 2' */

    /* Level2 S-Function Block: '<S19>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[73];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 3' */

    /* Level2 S-Function Block: '<S19>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[74];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 4' */

    /* Level2 S-Function Block: '<S19>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[75];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 16' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH16[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_al;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH16[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_l;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH16[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_ou;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH16[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_p;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 2' */

    /* Level2 S-Function Block: '<S7>/Receive v2 2' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[76];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 1' */

    /* Level2 S-Function Block: '<S21>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[77];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 2' */

    /* Level2 S-Function Block: '<S21>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[78];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 3' */

    /* Level2 S-Function Block: '<S21>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[79];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 4' */

    /* Level2 S-Function Block: '<S21>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[80];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 3' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH3[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_p;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH3[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_ba;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH3[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_a;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH3[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_f;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 3' */

    /* Level2 S-Function Block: '<S7>/Receive v2 3' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[81];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 1' */

    /* Level2 S-Function Block: '<S22>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[82];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 2' */

    /* Level2 S-Function Block: '<S22>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[83];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 3' */

    /* Level2 S-Function Block: '<S22>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[84];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 4' */

    /* Level2 S-Function Block: '<S22>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[85];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 4' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH4[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_pf;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH4[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_k;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH4[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_b;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH4[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_ff;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 4' */

    /* Level2 S-Function Block: '<S7>/Receive v2 4' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[86];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 1' */

    /* Level2 S-Function Block: '<S23>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[87];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 5' */

    /* Level2 S-Function Block: '<S23>/Decode 5' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[88];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 3' */

    /* Level2 S-Function Block: '<S23>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[89];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 4' */

    /* Level2 S-Function Block: '<S23>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[90];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 5' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH5[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_io;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH5[1] =
      speedgoat_test_SN5659_R2020b_B.Decode5_b;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH5[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_ny;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH5[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_j;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 5' */

    /* Level2 S-Function Block: '<S7>/Receive v2 5' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[91];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 1' */

    /* Level2 S-Function Block: '<S24>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[92];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 2' */

    /* Level2 S-Function Block: '<S24>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[93];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 3' */

    /* Level2 S-Function Block: '<S24>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[94];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 4' */

    /* Level2 S-Function Block: '<S24>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[95];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 6' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH6[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_gi;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH6[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_f;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH6[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_o4;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH6[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_f4;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 6' */

    /* Level2 S-Function Block: '<S7>/Receive v2 6' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[96];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 1' */

    /* Level2 S-Function Block: '<S25>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[97];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 2' */

    /* Level2 S-Function Block: '<S25>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[98];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 3' */

    /* Level2 S-Function Block: '<S25>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[99];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 4' */

    /* Level2 S-Function Block: '<S25>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[100];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 7' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH7[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_p1;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH7[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_h;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH7[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_lc;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH7[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_l;

    /* S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 7' */

    /* Level2 S-Function Block: '<S7>/Receive v2 7' (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[101];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 1' */

    /* Level2 S-Function Block: '<S26>/Decode 1' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[102];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 2' */

    /* Level2 S-Function Block: '<S26>/Decode 2' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[103];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 3' */

    /* Level2 S-Function Block: '<S26>/Decode 3' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[104];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 4' */

    /* Level2 S-Function Block: '<S26>/Decode 4' (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[105];
      sfcnOutputs(rts,2);
    }

    /* SignalConversion generated from: '<S7>/Decode Channel 8' */
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH8[0] =
      speedgoat_test_SN5659_R2020b_B.Decode1_b;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH8[1] =
      speedgoat_test_SN5659_R2020b_B.Decode2_nz;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH8[2] =
      speedgoat_test_SN5659_R2020b_B.Decode3_mj;
    speedgoat_test_SN5659_R2020b_B.IO682_SerialIN_CH8[3] =
      speedgoat_test_SN5659_R2020b_B.Decode4_m;

    /* RandomNumber: '<S28>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber =
      speedgoat_test_SN5659_R2020b_DW.NextOutput;

    /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 1' */

    /* Level2 S-Function Block: '<S28>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[106];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S44>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_o =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_c;

    /* DataTypeConversion: '<S28>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion =
      speedgoat_test_SN5659_R2020b_B.Output_o;

    /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 5' */

    /* Level2 S-Function Block: '<S28>/Encode 5' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[107];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S28>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_i2 != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_o = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_h = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_i2 = 0;
    }

    /* Sin: '<S28>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_o *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos +
        speedgoat_test_SN5659_R2020b_DW.lastCos_h *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_h *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos -
        speedgoat_test_SN5659_R2020b_DW.lastSin_o *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias;

    /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 3' */

    /* Level2 S-Function Block: '<S28>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[108];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S45>/Divide' incorporates:
     *  Constant: '<S28>/Constant'
     *  Constant: '<S45>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide =
      speedgoat_test_SN5659_R2020_cal->Constant_Value /
      speedgoat_test_SN5659_R2020_cal->Scale_Value;

    /* Product: '<S45>/Multiply' incorporates:
     *  Constant: '<S45>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply =
      speedgoat_test_SN5659_R2020b_B.Divide *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_V;

    /* DataTypeConversion: '<S45>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S45>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_k5 = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S45>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_k5 &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask;

    /* ArithShift: '<S45>/Shift to SSM slot' incorporates:
     *  Constant: '<S45>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot =
      speedgoat_test_SN5659_R2020_cal->SSM_Value << 29;

    /* ArithShift: '<S45>/Shift to SDI slot' incorporates:
     *  Constant: '<S45>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot =
      speedgoat_test_SN5659_R2020_cal->SDI_Value << 8;

    /* S-Function (sfix_bitop): '<S45>/Bitwise Operator' incorporates:
     *  Constant: '<S45>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator =
      speedgoat_test_SN5659_R2020b_B.Mask |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot |
      speedgoat_test_SN5659_R2020_cal->Label_Value;

    /* DataTypeConversion: '<S45>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1 =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator;

    /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 2' */

    /* Level2 S-Function Block: '<S28>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[109];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 ' */

    /* Level2 S-Function Block: '<S7>/Send v2 ' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[110];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S46>/FixPt Sum1' incorporates:
     *  Constant: '<S46>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_i = static_cast<uint8_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_o) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_h);

    /* Switch: '<S47>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_i >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_i) {
      /* Switch: '<S47>/FixPt Switch' incorporates:
       *  Constant: '<S47>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_ha =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_av;
    } else {
      /* Switch: '<S47>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_ha =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_i;
    }

    /* End of Switch: '<S47>/FixPt Switch' */

    /* RandomNumber: '<S29>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_c =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_a;

    /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 1' */

    /* Level2 S-Function Block: '<S29>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[111];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S48>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE;

    /* DataTypeConversion: '<S29>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_h =
      speedgoat_test_SN5659_R2020b_B.Output;

    /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 2' */

    /* Level2 S-Function Block: '<S29>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[112];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S29>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_n != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_cq = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_p *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_p = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_p *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_n = 0;
    }

    /* Sin: '<S29>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_o =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_cq *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_c +
        speedgoat_test_SN5659_R2020b_DW.lastCos_p *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_p) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_l +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_p *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_c -
        speedgoat_test_SN5659_R2020b_DW.lastSin_cq *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_p) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_j) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_o +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_k;

    /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 3' */

    /* Level2 S-Function Block: '<S29>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[113];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S49>/Divide' incorporates:
     *  Constant: '<S29>/Constant'
     *  Constant: '<S49>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_k =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_j /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_l;

    /* Product: '<S49>/Multiply' incorporates:
     *  Constant: '<S49>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_h =
      speedgoat_test_SN5659_R2020b_B.Divide_k *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_o;

    /* DataTypeConversion: '<S49>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_h);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S49>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_c = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S49>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_a =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_c &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_h;

    /* ArithShift: '<S49>/Shift to SSM slot' incorporates:
     *  Constant: '<S49>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_h =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_o << 29;

    /* ArithShift: '<S49>/Shift to SDI slot' incorporates:
     *  Constant: '<S49>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_l =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_d << 8;

    /* S-Function (sfix_bitop): '<S49>/Bitwise Operator' incorporates:
     *  Constant: '<S49>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_m =
      speedgoat_test_SN5659_R2020b_B.Mask_a |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_h |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_l |
      speedgoat_test_SN5659_R2020_cal->Label_Value_d;

    /* DataTypeConversion: '<S49>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_g =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_m;

    /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 4' */

    /* Level2 S-Function Block: '<S29>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[114];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 9' */

    /* Level2 S-Function Block: '<S7>/Send v2 9' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[115];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S50>/FixPt Sum1' incorporates:
     *  Constant: '<S50>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1 = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value);

    /* Switch: '<S51>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1 >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit) {
      /* Switch: '<S51>/FixPt Switch' incorporates:
       *  Constant: '<S51>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_c;
    } else {
      /* Switch: '<S51>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1;
    }

    /* End of Switch: '<S51>/FixPt Switch' */

    /* RandomNumber: '<S30>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_p =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_n;

    /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 1' */

    /* Level2 S-Function Block: '<S30>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[116];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S52>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_b =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_o;

    /* DataTypeConversion: '<S30>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_e =
      speedgoat_test_SN5659_R2020b_B.Output_b;

    /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 2' */

    /* Level2 S-Function Block: '<S30>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[117];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S30>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_bt != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_m = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_g *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_m = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_g *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_bt = 0;
    }

    /* Sin: '<S30>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_f =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_m *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_j +
        speedgoat_test_SN5659_R2020b_DW.lastCos_m *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_h) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_j +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_m *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_j -
        speedgoat_test_SN5659_R2020b_DW.lastSin_m *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_h) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_n) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_i +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_c;

    /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 3' */

    /* Level2 S-Function Block: '<S30>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[118];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S53>/Divide' incorporates:
     *  Constant: '<S30>/Constant'
     *  Constant: '<S53>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_h =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_i /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_a;

    /* Product: '<S53>/Multiply' incorporates:
     *  Constant: '<S53>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_a =
      speedgoat_test_SN5659_R2020b_B.Divide_h *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_p;

    /* DataTypeConversion: '<S53>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_a);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S53>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ec = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S53>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_n =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ec &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_k;

    /* ArithShift: '<S53>/Shift to SSM slot' incorporates:
     *  Constant: '<S53>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_m =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_l << 29;

    /* ArithShift: '<S53>/Shift to SDI slot' incorporates:
     *  Constant: '<S53>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_a =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_m << 8;

    /* S-Function (sfix_bitop): '<S53>/Bitwise Operator' incorporates:
     *  Constant: '<S53>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_a =
      speedgoat_test_SN5659_R2020b_B.Mask_n |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_m |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_a |
      speedgoat_test_SN5659_R2020_cal->Label_Value_e;

    /* DataTypeConversion: '<S53>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_i =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_a;

    /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 4' */

    /* Level2 S-Function Block: '<S30>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[119];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 10' */

    /* Level2 S-Function Block: '<S7>/Send v2 10' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[120];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S54>/FixPt Sum1' incorporates:
     *  Constant: '<S54>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_n = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_b) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_a);

    /* Switch: '<S55>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_n >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_d) {
      /* Switch: '<S55>/FixPt Switch' incorporates:
       *  Constant: '<S55>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_h =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_dm;
    } else {
      /* Switch: '<S55>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_h =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_n;
    }

    /* End of Switch: '<S55>/FixPt Switch' */

    /* RandomNumber: '<S31>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_b =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_f;

    /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 1' */

    /* Level2 S-Function Block: '<S31>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[121];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S56>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_p =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_o0;

    /* DataTypeConversion: '<S31>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_j =
      speedgoat_test_SN5659_R2020b_B.Output_p;

    /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 2' */

    /* Level2 S-Function Block: '<S31>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[122];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S31>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_f != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_ct = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_a *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_a = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_a *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_f = 0;
    }

    /* Sin: '<S31>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_k =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_ct *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_p +
        speedgoat_test_SN5659_R2020b_DW.lastCos_a *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_c) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_j4 +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_a *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_p -
        speedgoat_test_SN5659_R2020b_DW.lastSin_ct *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_c) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_d) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_d +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_e;

    /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 3' */

    /* Level2 S-Function Block: '<S31>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[123];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S57>/Divide' incorporates:
     *  Constant: '<S31>/Constant'
     *  Constant: '<S57>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_p =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_e /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_b;

    /* Product: '<S57>/Multiply' incorporates:
     *  Constant: '<S57>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_j =
      speedgoat_test_SN5659_R2020b_B.Divide_p *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_g;

    /* DataTypeConversion: '<S57>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_j);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S57>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_jj = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S57>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_i =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_jj &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_d;

    /* ArithShift: '<S57>/Shift to SSM slot' incorporates:
     *  Constant: '<S57>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_b =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_n << 29;

    /* ArithShift: '<S57>/Shift to SDI slot' incorporates:
     *  Constant: '<S57>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_k =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_l << 8;

    /* S-Function (sfix_bitop): '<S57>/Bitwise Operator' incorporates:
     *  Constant: '<S57>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_p =
      speedgoat_test_SN5659_R2020b_B.Mask_i |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_b |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_k |
      speedgoat_test_SN5659_R2020_cal->Label_Value_j;

    /* DataTypeConversion: '<S57>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_p =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_p;

    /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 4' */

    /* Level2 S-Function Block: '<S31>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[124];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 11' */

    /* Level2 S-Function Block: '<S7>/Send v2 11' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[125];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S58>/FixPt Sum1' incorporates:
     *  Constant: '<S58>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_a = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_p) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_o);

    /* Switch: '<S59>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_a >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_k) {
      /* Switch: '<S59>/FixPt Switch' incorporates:
       *  Constant: '<S59>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_b =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_n;
    } else {
      /* Switch: '<S59>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_b =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_a;
    }

    /* End of Switch: '<S59>/FixPt Switch' */

    /* RandomNumber: '<S32>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_pz =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_nj;

    /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 1' */

    /* Level2 S-Function Block: '<S32>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[126];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S60>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_j =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_m;

    /* DataTypeConversion: '<S32>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_p =
      speedgoat_test_SN5659_R2020b_B.Output_j;

    /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 5' */

    /* Level2 S-Function Block: '<S32>/Encode 5' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[127];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S32>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_m != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_p = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_m *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_af = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_m *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_m = 0;
    }

    /* Sin: '<S32>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_p =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_p *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_h +
        speedgoat_test_SN5659_R2020b_DW.lastCos_af *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_e) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_o +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_af *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_h -
        speedgoat_test_SN5659_R2020b_DW.lastSin_p *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_e) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_h +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_m;

    /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 3' */

    /* Level2 S-Function Block: '<S32>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[128];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S61>/Divide' incorporates:
     *  Constant: '<S32>/Constant'
     *  Constant: '<S61>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_i =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_d /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_f;

    /* Product: '<S61>/Multiply' incorporates:
     *  Constant: '<S61>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_he =
      speedgoat_test_SN5659_R2020b_B.Divide_i *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_i;

    /* DataTypeConversion: '<S61>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_he);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S61>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_b = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S61>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_c =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_b &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_e;

    /* ArithShift: '<S61>/Shift to SSM slot' incorporates:
     *  Constant: '<S61>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_k =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_m << 29;

    /* ArithShift: '<S61>/Shift to SDI slot' incorporates:
     *  Constant: '<S61>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_b =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_a << 8;

    /* S-Function (sfix_bitop): '<S61>/Bitwise Operator' incorporates:
     *  Constant: '<S61>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_k =
      speedgoat_test_SN5659_R2020b_B.Mask_c |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_k |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_b |
      speedgoat_test_SN5659_R2020_cal->Label_Value_ex;

    /* DataTypeConversion: '<S61>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_n =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_k;

    /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 2' */

    /* Level2 S-Function Block: '<S32>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[129];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 12' */

    /* Level2 S-Function Block: '<S7>/Send v2 12' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[130];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S62>/FixPt Sum1' incorporates:
     *  Constant: '<S62>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_g = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_j) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_oz);

    /* Switch: '<S63>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_g >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_c) {
      /* Switch: '<S63>/FixPt Switch' incorporates:
       *  Constant: '<S63>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_a;
    } else {
      /* Switch: '<S63>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_g;
    }

    /* End of Switch: '<S63>/FixPt Switch' */

    /* RandomNumber: '<S33>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_n =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_ni;

    /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 1' */

    /* Level2 S-Function Block: '<S33>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[131];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S64>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_m =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_oy;

    /* DataTypeConversion: '<S33>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_o =
      speedgoat_test_SN5659_R2020b_B.Output_m;

    /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 2' */

    /* Level2 S-Function Block: '<S33>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[132];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S33>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_j != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_dj = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_ah *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_ht = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_ah *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_j = 0;
    }

    /* Sin: '<S33>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_g =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_dj *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_f +
        speedgoat_test_SN5659_R2020b_DW.lastCos_ht *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_f) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_jn +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_ht *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_f -
        speedgoat_test_SN5659_R2020b_DW.lastSin_dj *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_f) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_i) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_n +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_j;

    /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 3' */

    /* Level2 S-Function Block: '<S33>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[133];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S65>/Divide' incorporates:
     *  Constant: '<S33>/Constant'
     *  Constant: '<S65>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_j =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_g /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_d;

    /* Product: '<S65>/Multiply' incorporates:
     *  Constant: '<S65>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_i =
      speedgoat_test_SN5659_R2020b_B.Divide_j *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitslef_pp;

    /* DataTypeConversion: '<S65>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_i);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S65>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_er = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S65>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_m =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_er &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_p;

    /* ArithShift: '<S65>/Shift to SSM slot' incorporates:
     *  Constant: '<S65>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_mi =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_j << 29;

    /* ArithShift: '<S65>/Shift to SDI slot' incorporates:
     *  Constant: '<S65>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_km =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_h << 8;

    /* S-Function (sfix_bitop): '<S65>/Bitwise Operator' incorporates:
     *  Constant: '<S65>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_c =
      speedgoat_test_SN5659_R2020b_B.Mask_m |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_mi |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_km |
      speedgoat_test_SN5659_R2020_cal->Label_Value_f;

    /* DataTypeConversion: '<S65>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_gm =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_c;

    /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 4' */

    /* Level2 S-Function Block: '<S33>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[134];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 13' */

    /* Level2 S-Function Block: '<S7>/Send v2 13' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[135];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S66>/FixPt Sum1' incorporates:
     *  Constant: '<S66>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_e = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_m) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_j);

    /* Switch: '<S67>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_e >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_n) {
      /* Switch: '<S67>/FixPt Switch' incorporates:
       *  Constant: '<S67>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_bx =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_k;
    } else {
      /* Switch: '<S67>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_bx =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_e;
    }

    /* End of Switch: '<S67>/FixPt Switch' */

    /* RandomNumber: '<S34>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_m =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_ft;

    /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 1' */

    /* Level2 S-Function Block: '<S34>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[136];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S68>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_e =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_e;

    /* DataTypeConversion: '<S34>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_d =
      speedgoat_test_SN5659_R2020b_B.Output_e;

    /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 2' */

    /* Level2 S-Function Block: '<S34>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[137];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S34>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_a != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_du = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_c *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_l = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_c *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_a = 0;
    }

    /* Sin: '<S34>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_kh =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_du *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_a +
        speedgoat_test_SN5659_R2020b_DW.lastCos_l *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_fk) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_jg +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_l *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_a -
        speedgoat_test_SN5659_R2020b_DW.lastSin_du *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_fk) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o1) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_hh +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_g;

    /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 3' */

    /* Level2 S-Function Block: '<S34>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[138];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S69>/Divide' incorporates:
     *  Constant: '<S34>/Constant'
     *  Constant: '<S69>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_g =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_l /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_c;

    /* Product: '<S69>/Multiply' incorporates:
     *  Constant: '<S69>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_n =
      speedgoat_test_SN5659_R2020b_B.Divide_g *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitslef_oj;

    /* DataTypeConversion: '<S69>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_n);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S69>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_fb = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S69>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_h =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_fb &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_pd;

    /* ArithShift: '<S69>/Shift to SSM slot' incorporates:
     *  Constant: '<S69>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_f =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_ji << 29;

    /* ArithShift: '<S69>/Shift to SDI slot' incorporates:
     *  Constant: '<S69>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_c =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_i << 8;

    /* S-Function (sfix_bitop): '<S69>/Bitwise Operator' incorporates:
     *  Constant: '<S69>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_f =
      speedgoat_test_SN5659_R2020b_B.Mask_h |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_f |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_c |
      speedgoat_test_SN5659_R2020_cal->Label_Value_b;

    /* DataTypeConversion: '<S69>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_ga =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_f;

    /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 4' */

    /* Level2 S-Function Block: '<S34>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[139];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 14' */

    /* Level2 S-Function Block: '<S7>/Send v2 14' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[140];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S70>/FixPt Sum1' incorporates:
     *  Constant: '<S70>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_o = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_e) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_l);

    /* Switch: '<S71>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_o >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_cp) {
      /* Switch: '<S71>/FixPt Switch' incorporates:
       *  Constant: '<S71>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_lo =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_aq;
    } else {
      /* Switch: '<S71>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_lo =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_o;
    }

    /* End of Switch: '<S71>/FixPt Switch' */

    /* RandomNumber: '<S35>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_br =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_i;

    /* S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 1' */

    /* Level2 S-Function Block: '<S35>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[141];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S72>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_k =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_k;

    /* DataTypeConversion: '<S35>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_jr =
      speedgoat_test_SN5659_R2020b_B.Output_k;

    /* S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 2' */

    /* Level2 S-Function Block: '<S35>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[142];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S35>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_p0 != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_f = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_mo *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_ld = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_mo *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_p0 = 0;
    }

    /* Sin: '<S35>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_a =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_f *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_m +
        speedgoat_test_SN5659_R2020b_DW.lastCos_ld *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_m) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_f +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_ld *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_m -
        speedgoat_test_SN5659_R2020b_DW.lastSin_f *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_m) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_h) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_c +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_kg;

    /* S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 3' */

    /* Level2 S-Function Block: '<S35>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[143];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S73>/Divide' incorporates:
     *  Constant: '<S35>/Constant'
     *  Constant: '<S73>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_k3 =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_o /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_i;

    /* Product: '<S73>/Multiply' incorporates:
     *  Constant: '<S73>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_hd =
      speedgoat_test_SN5659_R2020b_B.Divide_k3 *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_h;

    /* DataTypeConversion: '<S73>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_hd);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S73>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_f5 = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S73>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_h0 =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_f5 &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_a;

    /* ArithShift: '<S73>/Shift to SSM slot' incorporates:
     *  Constant: '<S73>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_m3 =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_i << 29;

    /* ArithShift: '<S73>/Shift to SDI slot' incorporates:
     *  Constant: '<S73>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_m =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_m3 << 8;

    /* S-Function (sfix_bitop): '<S73>/Bitwise Operator' incorporates:
     *  Constant: '<S73>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_e =
      speedgoat_test_SN5659_R2020b_B.Mask_h0 |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_m3 |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_m |
      speedgoat_test_SN5659_R2020_cal->Label_Value_k;

    /* DataTypeConversion: '<S73>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_d =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_e;

    /* S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 4' */

    /* Level2 S-Function Block: '<S35>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[144];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 15' */

    /* Level2 S-Function Block: '<S7>/Send v2 15' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[145];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S74>/FixPt Sum1' incorporates:
     *  Constant: '<S74>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_d = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_k) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_i);

    /* Switch: '<S75>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_d >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_g) {
      /* Switch: '<S75>/FixPt Switch' incorporates:
       *  Constant: '<S75>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l2 =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_p;
    } else {
      /* Switch: '<S75>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l2 =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_d;
    }

    /* End of Switch: '<S75>/FixPt Switch' */

    /* RandomNumber: '<S36>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_e =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_j;

    /* S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 1' */

    /* Level2 S-Function Block: '<S36>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[146];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S76>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_g =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_e0;

    /* DataTypeConversion: '<S36>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_hu =
      speedgoat_test_SN5659_R2020b_B.Output_g;

    /* S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 2' */

    /* Level2 S-Function Block: '<S36>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[147];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S36>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_ml != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_e = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_l *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_lh = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_l *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_ml = 0;
    }

    /* Sin: '<S36>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_o5 =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_e *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_k +
        speedgoat_test_SN5659_R2020b_DW.lastCos_lh *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_g) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_b +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_lh *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_k -
        speedgoat_test_SN5659_R2020b_DW.lastSin_e *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_g) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_e) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_nm +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_jq;

    /* S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 3' */

    /* Level2 S-Function Block: '<S36>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[148];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S77>/Divide' incorporates:
     *  Constant: '<S36>/Constant'
     *  Constant: '<S77>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_g4 =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_b /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_k;

    /* Product: '<S77>/Multiply' incorporates:
     *  Constant: '<S77>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_il =
      speedgoat_test_SN5659_R2020b_B.Divide_g4 *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_j;

    /* DataTypeConversion: '<S77>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_il);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S77>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_bh = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S77>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_d =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_bh &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_l;

    /* ArithShift: '<S77>/Shift to SSM slot' incorporates:
     *  Constant: '<S77>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_g =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_na << 29;

    /* ArithShift: '<S77>/Shift to SDI slot' incorporates:
     *  Constant: '<S77>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_g =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_l4 << 8;

    /* S-Function (sfix_bitop): '<S77>/Bitwise Operator' incorporates:
     *  Constant: '<S77>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_j =
      speedgoat_test_SN5659_R2020b_B.Mask_d |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_g |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_g |
      speedgoat_test_SN5659_R2020_cal->Label_Value_n;

    /* DataTypeConversion: '<S77>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_l =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_j;

    /* S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 4' */

    /* Level2 S-Function Block: '<S36>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[149];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 1' */

    /* Level2 S-Function Block: '<S7>/Send v2 1' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[150];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S78>/FixPt Sum1' incorporates:
     *  Constant: '<S78>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_fe = static_cast<uint8_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_g) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_k0);

    /* Switch: '<S79>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_fe >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_be) {
      /* Switch: '<S79>/FixPt Switch' incorporates:
       *  Constant: '<S79>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_jo =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_ee;
    } else {
      /* Switch: '<S79>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_jo =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_fe;
    }

    /* End of Switch: '<S79>/FixPt Switch' */

    /* RandomNumber: '<S37>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_f =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_m;

    /* S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 1' */

    /* Level2 S-Function Block: '<S37>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[151];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S80>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_b2 =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_g;

    /* DataTypeConversion: '<S37>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_dd =
      speedgoat_test_SN5659_R2020b_B.Output_b2;

    /* S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 2' */

    /* Level2 S-Function Block: '<S37>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[152];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S37>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_bx != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_pg = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_b *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_gg = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_b *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_bx = 0;
    }

    /* Sin: '<S37>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_oh =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_pg *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_ma +
        speedgoat_test_SN5659_R2020b_DW.lastCos_gg *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_gt) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_bz +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_gg *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_ma -
        speedgoat_test_SN5659_R2020b_DW.lastSin_pg *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_gt) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_h4) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_a +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_mn;

    /* S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 3' */

    /* Level2 S-Function Block: '<S37>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[153];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S81>/Divide' incorporates:
     *  Constant: '<S37>/Constant'
     *  Constant: '<S81>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_n =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_ek /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_e;

    /* Product: '<S81>/Multiply' incorporates:
     *  Constant: '<S81>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_e =
      speedgoat_test_SN5659_R2020b_B.Divide_n *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_n;

    /* DataTypeConversion: '<S81>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_e);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S81>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_l = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S81>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_k =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_l &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_e3;

    /* ArithShift: '<S81>/Shift to SSM slot' incorporates:
     *  Constant: '<S81>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_kz =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_os << 29;

    /* ArithShift: '<S81>/Shift to SDI slot' incorporates:
     *  Constant: '<S81>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_n =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_p << 8;

    /* S-Function (sfix_bitop): '<S81>/Bitwise Operator' incorporates:
     *  Constant: '<S81>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_a4 =
      speedgoat_test_SN5659_R2020b_B.Mask_k |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_kz |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_n |
      speedgoat_test_SN5659_R2020_cal->Label_Value_fv;

    /* DataTypeConversion: '<S81>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_a =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_a4;

    /* S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 4' */

    /* Level2 S-Function Block: '<S37>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[154];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 2' */

    /* Level2 S-Function Block: '<S7>/Send v2 2' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[155];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S82>/FixPt Sum1' incorporates:
     *  Constant: '<S82>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_h = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_b2) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_oq);

    /* Switch: '<S83>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_h >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_e) {
      /* Switch: '<S83>/FixPt Switch' incorporates:
       *  Constant: '<S83>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_d =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_j5;
    } else {
      /* Switch: '<S83>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_d =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_h;
    }

    /* End of Switch: '<S83>/FixPt Switch' */

    /* RandomNumber: '<S38>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_g =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_h;

    /* S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 1' */

    /* Level2 S-Function Block: '<S38>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[156];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S84>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_d =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_p;

    /* DataTypeConversion: '<S38>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_f =
      speedgoat_test_SN5659_R2020b_B.Output_d;

    /* S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 2' */

    /* Level2 S-Function Block: '<S38>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[157];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S38>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_g != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_l = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_lw *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_ge = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_lw *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_g = 0;
    }

    /* Sin: '<S38>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_n =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_l *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_jo +
        speedgoat_test_SN5659_R2020b_DW.lastCos_ge *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_px) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_e +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_ge *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_jo -
        speedgoat_test_SN5659_R2020b_DW.lastSin_l *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_px) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_a) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_m +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_o;

    /* S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 3' */

    /* Level2 S-Function Block: '<S38>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[158];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S85>/Divide' incorporates:
     *  Constant: '<S38>/Constant'
     *  Constant: '<S85>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_o =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_gg /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_o;

    /* Product: '<S85>/Multiply' incorporates:
     *  Constant: '<S85>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_b =
      speedgoat_test_SN5659_R2020b_B.Divide_o *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitslef_jt;

    /* DataTypeConversion: '<S85>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_b);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S85>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_fr = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S85>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_p =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_fr &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_f;

    /* ArithShift: '<S85>/Shift to SSM slot' incorporates:
     *  Constant: '<S85>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_e =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_nl << 29;

    /* ArithShift: '<S85>/Shift to SDI slot' incorporates:
     *  Constant: '<S85>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_ck =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_g << 8;

    /* S-Function (sfix_bitop): '<S85>/Bitwise Operator' incorporates:
     *  Constant: '<S85>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_pk =
      speedgoat_test_SN5659_R2020b_B.Mask_p |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_e |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_ck |
      speedgoat_test_SN5659_R2020_cal->Label_Value_l;

    /* DataTypeConversion: '<S85>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_gh =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_pk;

    /* S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 4' */

    /* Level2 S-Function Block: '<S38>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[159];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 3' */

    /* Level2 S-Function Block: '<S7>/Send v2 3' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[160];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S86>/FixPt Sum1' incorporates:
     *  Constant: '<S86>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_f = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_d) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_k);

    /* Switch: '<S87>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_f >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_p) {
      /* Switch: '<S87>/FixPt Switch' incorporates:
       *  Constant: '<S87>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_j =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_ly;
    } else {
      /* Switch: '<S87>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_j =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_f;
    }

    /* End of Switch: '<S87>/FixPt Switch' */

    /* RandomNumber: '<S39>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_i =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_ir;

    /* S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 1' */

    /* Level2 S-Function Block: '<S39>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[161];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S88>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_jl =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_b;

    /* DataTypeConversion: '<S39>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_hb =
      speedgoat_test_SN5659_R2020b_B.Output_jl;

    /* S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 5' */

    /* Level2 S-Function Block: '<S39>/Encode 5' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[162];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S39>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_pe != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_i3 = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_am *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_oh = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_am *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_pe = 0;
    }

    /* Sin: '<S39>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_d =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_i3 *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_d +
        speedgoat_test_SN5659_R2020b_DW.lastCos_oh *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_d) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_p +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_oh *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_d -
        speedgoat_test_SN5659_R2020b_DW.lastSin_i3 *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_d) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_p) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_h5 +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_a;

    /* S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 3' */

    /* Level2 S-Function Block: '<S39>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[163];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S89>/Divide' incorporates:
     *  Constant: '<S39>/Constant'
     *  Constant: '<S89>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_m =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_h /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_g;

    /* Product: '<S89>/Multiply' incorporates:
     *  Constant: '<S89>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_m =
      speedgoat_test_SN5659_R2020b_B.Divide_m *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_d;

    /* DataTypeConversion: '<S89>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_m);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S89>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_dn = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S89>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_cs =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_dn &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_c;

    /* ArithShift: '<S89>/Shift to SSM slot' incorporates:
     *  Constant: '<S89>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_n =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_f << 29;

    /* ArithShift: '<S89>/Shift to SDI slot' incorporates:
     *  Constant: '<S89>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_d =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_ai << 8;

    /* S-Function (sfix_bitop): '<S89>/Bitwise Operator' incorporates:
     *  Constant: '<S89>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_b =
      speedgoat_test_SN5659_R2020b_B.Mask_cs |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_n |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_d |
      speedgoat_test_SN5659_R2020_cal->Label_Value_kp;

    /* DataTypeConversion: '<S89>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_nb =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_b;

    /* S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 2' */

    /* Level2 S-Function Block: '<S39>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[164];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 4' */

    /* Level2 S-Function Block: '<S7>/Send v2 4' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[165];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S90>/FixPt Sum1' incorporates:
     *  Constant: '<S90>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_h2 = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_jl) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_m);

    /* Switch: '<S91>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_h2 >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_ck) {
      /* Switch: '<S91>/FixPt Switch' incorporates:
       *  Constant: '<S91>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_k =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_ng;
    } else {
      /* Switch: '<S91>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_k =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_h2;
    }

    /* End of Switch: '<S91>/FixPt Switch' */

    /* RandomNumber: '<S40>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_i2 =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_hu;

    /* S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 1' */

    /* Level2 S-Function Block: '<S40>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[166];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S92>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_i =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_f;

    /* DataTypeConversion: '<S40>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_n =
      speedgoat_test_SN5659_R2020b_B.Output_i;

    /* S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 2' */

    /* Level2 S-Function Block: '<S40>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[167];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S40>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_ik != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_a = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_cn *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_oy = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_cn *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_ik = 0;
    }

    /* Sin: '<S40>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_fe =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_a *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_e +
        speedgoat_test_SN5659_R2020b_DW.lastCos_oy *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_l) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_i +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_oy *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_e -
        speedgoat_test_SN5659_R2020b_DW.lastSin_a *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_l) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_c) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_m2 +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_ac;

    /* S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 3' */

    /* Level2 S-Function Block: '<S40>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[168];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S93>/Divide' incorporates:
     *  Constant: '<S40>/Constant'
     *  Constant: '<S93>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_pl =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_f /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_h;

    /* Product: '<S93>/Multiply' incorporates:
     *  Constant: '<S93>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_k =
      speedgoat_test_SN5659_R2020b_B.Divide_pl *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_b;

    /* DataTypeConversion: '<S93>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_k);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S93>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_m = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S93>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_my =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_m &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_er;

    /* ArithShift: '<S93>/Shift to SSM slot' incorporates:
     *  Constant: '<S93>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_et =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_a << 29;

    /* ArithShift: '<S93>/Shift to SDI slot' incorporates:
     *  Constant: '<S93>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_mf =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_ig << 8;

    /* S-Function (sfix_bitop): '<S93>/Bitwise Operator' incorporates:
     *  Constant: '<S93>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_eh =
      speedgoat_test_SN5659_R2020b_B.Mask_my |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_et |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_mf |
      speedgoat_test_SN5659_R2020_cal->Label_Value_p;

    /* DataTypeConversion: '<S93>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_f =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_eh;

    /* S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 4' */

    /* Level2 S-Function Block: '<S40>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[169];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 5' */

    /* Level2 S-Function Block: '<S7>/Send v2 5' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[170];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S94>/FixPt Sum1' incorporates:
     *  Constant: '<S94>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_m = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_i) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_n);

    /* Switch: '<S95>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_m >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_l) {
      /* Switch: '<S95>/FixPt Switch' incorporates:
       *  Constant: '<S95>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_hh =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_oy;
    } else {
      /* Switch: '<S95>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_hh =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_m;
    }

    /* End of Switch: '<S95>/FixPt Switch' */

    /* RandomNumber: '<S41>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_d =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_p;

    /* S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 1' */

    /* Level2 S-Function Block: '<S41>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[171];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S96>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_bg =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_h;

    /* DataTypeConversion: '<S41>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_i =
      speedgoat_test_SN5659_R2020b_B.Output_bg;

    /* S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 2' */

    /* Level2 S-Function Block: '<S41>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[172];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S41>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_jy != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_pf = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_a2 *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_jh = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_a2 *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_jy = 0;
    }

    /* Sin: '<S41>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_ff =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_pf *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_n +
        speedgoat_test_SN5659_R2020b_DW.lastCos_jh *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_o) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_h +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_jh *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_n -
        speedgoat_test_SN5659_R2020b_DW.lastSin_pf *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_o) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_cy) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_ch +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_d;

    /* S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 3' */

    /* Level2 S-Function Block: '<S41>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[173];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S97>/Divide' incorporates:
     *  Constant: '<S41>/Constant'
     *  Constant: '<S97>/Scale'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_c =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_bz /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_e3;

    /* Product: '<S97>/Multiply' incorporates:
     *  Constant: '<S97>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_hz =
      speedgoat_test_SN5659_R2020b_B.Divide_c *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitslef_jj;

    /* DataTypeConversion: '<S97>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_hz);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S97>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_cp = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S97>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_b =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_cp &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_f3;

    /* ArithShift: '<S97>/Shift to SSM slot' incorporates:
     *  Constant: '<S97>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_o =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_g << 29;

    /* ArithShift: '<S97>/Shift to SDI slot' incorporates:
     *  Constant: '<S97>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_bb =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_k << 8;

    /* S-Function (sfix_bitop): '<S97>/Bitwise Operator' incorporates:
     *  Constant: '<S97>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_n =
      speedgoat_test_SN5659_R2020b_B.Mask_b |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_o |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_bb |
      speedgoat_test_SN5659_R2020_cal->Label_Value_jf;

    /* DataTypeConversion: '<S97>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_fw =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_n;

    /* S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 4' */

    /* Level2 S-Function Block: '<S41>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[174];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 6' */

    /* Level2 S-Function Block: '<S7>/Send v2 6' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[175];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S98>/FixPt Sum1' incorporates:
     *  Constant: '<S98>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_he = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_bg) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_ie);

    /* Switch: '<S99>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_he >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_du) {
      /* Switch: '<S99>/FixPt Switch' incorporates:
       *  Constant: '<S99>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_a =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_pl;
    } else {
      /* Switch: '<S99>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_a =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_he;
    }

    /* End of Switch: '<S99>/FixPt Switch' */

    /* RandomNumber: '<S42>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_n4 =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_jn;

    /* S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 1' */

    /* Level2 S-Function Block: '<S42>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[176];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S100>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_mw =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_m4;

    /* DataTypeConversion: '<S42>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_k =
      speedgoat_test_SN5659_R2020b_B.Output_mw;

    /* S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 2' */

    /* Level2 S-Function Block: '<S42>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[177];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S42>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_gv != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_iv = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_j *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_ca = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_j *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_gv = 0;
    }

    /* Sin: '<S42>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_m =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_iv *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_l +
        speedgoat_test_SN5659_R2020b_DW.lastCos_ca *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_b) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_h2 +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_ca *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_l -
        speedgoat_test_SN5659_R2020b_DW.lastSin_iv *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_b) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_jl) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_hw +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_p;

    /* S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 3' */

    /* Level2 S-Function Block: '<S42>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[178];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S101>/Divide' incorporates:
     *  Constant: '<S101>/Scale'
     *  Constant: '<S42>/Constant'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_oc =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_b5 /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_kb;

    /* Product: '<S101>/Multiply' incorporates:
     *  Constant: '<S101>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_kl =
      speedgoat_test_SN5659_R2020b_B.Divide_oc *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitsleft_f;

    /* DataTypeConversion: '<S101>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_kl);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S101>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_is = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S101>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_aj =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_is &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_kz;

    /* ArithShift: '<S101>/Shift to SSM slot' incorporates:
     *  Constant: '<S101>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_ea =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_p << 29;

    /* ArithShift: '<S101>/Shift to SDI slot' incorporates:
     *  Constant: '<S101>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_f =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_im << 8;

    /* S-Function (sfix_bitop): '<S101>/Bitwise Operator' incorporates:
     *  Constant: '<S101>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_b5 =
      speedgoat_test_SN5659_R2020b_B.Mask_aj |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_ea |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_f |
      speedgoat_test_SN5659_R2020_cal->Label_Value_pn;

    /* DataTypeConversion: '<S101>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_j =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_b5;

    /* S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 4' */

    /* Level2 S-Function Block: '<S42>/Encode 4' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[179];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 7' */

    /* Level2 S-Function Block: '<S7>/Send v2 7' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[180];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S102>/FixPt Sum1' incorporates:
     *  Constant: '<S102>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_p = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_mw) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_b);

    /* Switch: '<S103>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_p >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_b) {
      /* Switch: '<S103>/FixPt Switch' incorporates:
       *  Constant: '<S103>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l0 =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_pv;
    } else {
      /* Switch: '<S103>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l0 =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_p;
    }

    /* End of Switch: '<S103>/FixPt Switch' */

    /* RandomNumber: '<S43>/Random number' */
    speedgoat_test_SN5659_R2020b_B.Randomnumber_j =
      speedgoat_test_SN5659_R2020b_DW.NextOutput_b;

    /* S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 1' */

    /* Level2 S-Function Block: '<S43>/Encode 1' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[181];
      sfcnOutputs(rts,2);
    }

    /* UnitDelay: '<S104>/Output' */
    speedgoat_test_SN5659_R2020b_B.Output_pd =
      speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_fw;

    /* DataTypeConversion: '<S43>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_dw =
      speedgoat_test_SN5659_R2020b_B.Output_pd;

    /* S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 5' */

    /* Level2 S-Function Block: '<S43>/Encode 5' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[182];
      sfcnOutputs(rts,2);
    }

    /* Sin: '<S43>/Sine wave' */
    if (speedgoat_test_SN5659_R2020b_DW.systemEnable_o1 != 0) {
      speedgoat_test_SN5659_R2020b_DW.lastSin_fv = std::sin
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_k *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.lastCos_bf = std::cos
        (speedgoat_test_SN5659_R2020_cal->Sinewave_Freq_k *
         speedgoat_test_SN5659_R2020b_M->Timing.t[2]);
      speedgoat_test_SN5659_R2020b_DW.systemEnable_o1 = 0;
    }

    /* Sin: '<S43>/Sine wave' */
    speedgoat_test_SN5659_R2020b_B.Sinewave_ao =
      ((speedgoat_test_SN5659_R2020b_DW.lastSin_fv *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_lt +
        speedgoat_test_SN5659_R2020b_DW.lastCos_bf *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_bm) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_n +
       (speedgoat_test_SN5659_R2020b_DW.lastCos_bf *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PCos_lt -
        speedgoat_test_SN5659_R2020b_DW.lastSin_fv *
        speedgoat_test_SN5659_R2020_cal->Sinewave_PSin_bm) *
       speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o2) *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Amp_f +
      speedgoat_test_SN5659_R2020_cal->Sinewave_Bias_je;

    /* S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 3' */

    /* Level2 S-Function Block: '<S43>/Encode 3' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[183];
      sfcnOutputs(rts,2);
    }

    /* Product: '<S105>/Divide' incorporates:
     *  Constant: '<S105>/Scale'
     *  Constant: '<S43>/Constant'
     */
    speedgoat_test_SN5659_R2020b_B.Divide_os =
      speedgoat_test_SN5659_R2020_cal->Constant_Value_le /
      speedgoat_test_SN5659_R2020_cal->Scale_Value_n;

    /* Product: '<S105>/Multiply' incorporates:
     *  Constant: '<S105>/'shift' the double value 27 bits left'
     */
    speedgoat_test_SN5659_R2020b_B.Multiply_c =
      speedgoat_test_SN5659_R2020b_B.Divide_os *
      speedgoat_test_SN5659_R2020_cal->shiftthedoublevalue27bitslef_hk;

    /* DataTypeConversion: '<S105>/Data Type Conversion' */
    tmp = std::floor(speedgoat_test_SN5659_R2020b_B.Multiply_c);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    /* DataTypeConversion: '<S105>/Data Type Conversion' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ku = tmp < 0.0 ?
      static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-tmp))) :
      static_cast<uint32_T>(tmp);

    /* S-Function (sfix_bitop): '<S105>/Mask ' */
    speedgoat_test_SN5659_R2020b_B.Mask_cy =
      speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ku &
      speedgoat_test_SN5659_R2020_cal->Mask_BitMask_cx;

    /* ArithShift: '<S105>/Shift to SSM slot' incorporates:
     *  Constant: '<S105>/SSM'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_hy =
      speedgoat_test_SN5659_R2020_cal->SSM_Value_jt << 29;

    /* ArithShift: '<S105>/Shift to SDI slot' incorporates:
     *  Constant: '<S105>/SDI'
     */
    speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_fi =
      speedgoat_test_SN5659_R2020_cal->SDI_Value_mq << 8;

    /* S-Function (sfix_bitop): '<S105>/Bitwise Operator' incorporates:
     *  Constant: '<S105>/Label'
     */
    speedgoat_test_SN5659_R2020b_B.BitwiseOperator_fl =
      speedgoat_test_SN5659_R2020b_B.Mask_cy |
      speedgoat_test_SN5659_R2020b_B.ShifttoSSMslot_hy |
      speedgoat_test_SN5659_R2020b_B.ShifttoSDIslot_fi |
      speedgoat_test_SN5659_R2020_cal->Label_Value_kg;

    /* DataTypeConversion: '<S105>/Data Type Conversion1' */
    speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_e =
      speedgoat_test_SN5659_R2020b_B.BitwiseOperator_fl;

    /* S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 2' */

    /* Level2 S-Function Block: '<S43>/Encode 2' (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[184];
      sfcnOutputs(rts,2);
    }

    /* S-Function (sg_io682_send_s_v3): '<S7>/Send v2 8' */

    /* Level2 S-Function Block: '<S7>/Send v2 8' (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[185];
      sfcnOutputs(rts,2);
    }

    /* Sum: '<S106>/FixPt Sum1' incorporates:
     *  Constant: '<S106>/FixPt Constant'
     */
    speedgoat_test_SN5659_R2020b_B.FixPtSum1_b = static_cast<uint16_T>(
      static_cast<uint32_T>(speedgoat_test_SN5659_R2020b_B.Output_pd) +
      speedgoat_test_SN5659_R2020_cal->FixPtConstant_Value_jp);

    /* Switch: '<S107>/FixPt Switch' */
    if (speedgoat_test_SN5659_R2020b_B.FixPtSum1_b >
        speedgoat_test_SN5659_R2020_cal->CounterLimited_uplimit_a) {
      /* Switch: '<S107>/FixPt Switch' incorporates:
       *  Constant: '<S107>/Constant'
       */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_m =
        speedgoat_test_SN5659_R2020_cal->Constant_Value_b2;
    } else {
      /* Switch: '<S107>/FixPt Switch' */
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_m =
        speedgoat_test_SN5659_R2020b_B.FixPtSum1_b;
    }

    /* End of Switch: '<S107>/FixPt Switch' */
  }

  {
    real_T HoldCosine;
    real_T HoldSine;

    /* Update for RandomNumber: '<S28>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean;

    /* Update for UnitDelay: '<S44>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_c =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_ha;

    /* Update for Sin: '<S28>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_o;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_h;
    speedgoat_test_SN5659_R2020b_DW.lastSin_o = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin;
    speedgoat_test_SN5659_R2020b_DW.lastCos_h = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin;

    /* Update for RandomNumber: '<S29>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_a = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_m) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_a +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_f;

    /* Update for UnitDelay: '<S48>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch;

    /* Update for Sin: '<S29>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_cq;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_p;
    speedgoat_test_SN5659_R2020b_DW.lastSin_cq = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_l + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_j;
    speedgoat_test_SN5659_R2020b_DW.lastCos_p = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_l - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_j;

    /* Update for RandomNumber: '<S30>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_n = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_h) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_l +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_k;

    /* Update for UnitDelay: '<S52>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_o =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_h;

    /* Update for Sin: '<S30>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_m;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_m;
    speedgoat_test_SN5659_R2020b_DW.lastSin_m = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_j + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_n;
    speedgoat_test_SN5659_R2020b_DW.lastCos_m = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_j - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_n;

    /* Update for RandomNumber: '<S31>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_f = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_k) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_j +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_fn;

    /* Update for UnitDelay: '<S56>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_o0 =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_b;

    /* Update for Sin: '<S31>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_ct;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_a;
    speedgoat_test_SN5659_R2020b_DW.lastSin_ct = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_j4 + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_d;
    speedgoat_test_SN5659_R2020b_DW.lastCos_a = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_j4 - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_d;

    /* Update for RandomNumber: '<S32>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_nj = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_g) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_k +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_a;

    /* Update for UnitDelay: '<S60>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_m =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l;

    /* Update for Sin: '<S32>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_p;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_af;
    speedgoat_test_SN5659_R2020b_DW.lastSin_p = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_o + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o;
    speedgoat_test_SN5659_R2020b_DW.lastCos_af = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_o - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o;

    /* Update for RandomNumber: '<S33>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_ni = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_f) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_g +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_h;

    /* Update for UnitDelay: '<S64>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_oy =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_bx;

    /* Update for Sin: '<S33>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_dj;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_ht;
    speedgoat_test_SN5659_R2020b_DW.lastSin_dj = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_jn + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_i;
    speedgoat_test_SN5659_R2020b_DW.lastCos_ht = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_jn - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_i;

    /* Update for RandomNumber: '<S34>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_ft = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_f4) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_l4 +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_b;

    /* Update for UnitDelay: '<S68>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_e =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_lo;

    /* Update for Sin: '<S34>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_du;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_l;
    speedgoat_test_SN5659_R2020b_DW.lastSin_du = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_jg + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o1;
    speedgoat_test_SN5659_R2020b_DW.lastCos_l = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_jg - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o1;

    /* Update for RandomNumber: '<S35>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_i = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_i) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_n +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_fh;

    /* Update for UnitDelay: '<S72>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_k =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l2;

    /* Update for Sin: '<S35>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_f;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_ld;
    speedgoat_test_SN5659_R2020b_DW.lastSin_f = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_f + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_h;
    speedgoat_test_SN5659_R2020b_DW.lastCos_ld = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_f - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_h;

    /* Update for RandomNumber: '<S36>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_j = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_d) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_m +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_f3;

    /* Update for UnitDelay: '<S76>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_e0 =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_jo;

    /* Update for Sin: '<S36>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_e;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_lh;
    speedgoat_test_SN5659_R2020b_DW.lastSin_e = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_b + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_e;
    speedgoat_test_SN5659_R2020b_DW.lastCos_lh = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_b - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_e;

    /* Update for RandomNumber: '<S37>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_m = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_b) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_f +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_d;

    /* Update for UnitDelay: '<S80>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_g =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_d;

    /* Update for Sin: '<S37>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_pg;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_gg;
    speedgoat_test_SN5659_R2020b_DW.lastSin_pg = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_bz + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_h4;
    speedgoat_test_SN5659_R2020b_DW.lastCos_gg = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_bz - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_h4;

    /* Update for RandomNumber: '<S38>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_h = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_hi) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_b +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_p;

    /* Update for UnitDelay: '<S84>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_p =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_j;

    /* Update for Sin: '<S38>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_l;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_ge;
    speedgoat_test_SN5659_R2020b_DW.lastSin_l = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_e + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_a;
    speedgoat_test_SN5659_R2020b_DW.lastCos_ge = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_e - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_a;

    /* Update for RandomNumber: '<S39>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_ir = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_bw) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_mo +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_c;

    /* Update for UnitDelay: '<S88>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_b =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_k;

    /* Update for Sin: '<S39>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_i3;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_oh;
    speedgoat_test_SN5659_R2020b_DW.lastSin_i3 = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_p + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_p;
    speedgoat_test_SN5659_R2020b_DW.lastCos_oh = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_p - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_p;

    /* Update for RandomNumber: '<S40>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_hu = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_j) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_o +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_l;

    /* Update for UnitDelay: '<S92>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_f =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_hh;

    /* Update for Sin: '<S40>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_a;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_oy;
    speedgoat_test_SN5659_R2020b_DW.lastSin_a = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_i + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_c;
    speedgoat_test_SN5659_R2020b_DW.lastCos_oy = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_i - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_c;

    /* Update for RandomNumber: '<S41>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_p = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_n) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_fs +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_pl;

    /* Update for UnitDelay: '<S96>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_h =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_a;

    /* Update for Sin: '<S41>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_pf;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_jh;
    speedgoat_test_SN5659_R2020b_DW.lastSin_pf = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_h + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_cy;
    speedgoat_test_SN5659_R2020b_DW.lastCos_jh = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_h - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_cy;

    /* Update for RandomNumber: '<S42>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_jn = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_l) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_e +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_pz;

    /* Update for UnitDelay: '<S100>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_m4 =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_l0;

    /* Update for Sin: '<S42>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_iv;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_ca;
    speedgoat_test_SN5659_R2020b_DW.lastSin_iv = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_h2 + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_jl;
    speedgoat_test_SN5659_R2020b_DW.lastCos_ca = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_h2 - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_jl;

    /* Update for RandomNumber: '<S43>/Random number' */
    speedgoat_test_SN5659_R2020b_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_fs) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_oa +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_fb;

    /* Update for UnitDelay: '<S104>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_fw =
      speedgoat_test_SN5659_R2020b_B.FixPtSwitch_m;

    /* Update for Sin: '<S43>/Sine wave' */
    HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_fv;
    HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_bf;
    speedgoat_test_SN5659_R2020b_DW.lastSin_fv = HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_n + HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o2;
    speedgoat_test_SN5659_R2020b_DW.lastCos_bf = HoldCosine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_HCos_n - HoldSine *
      speedgoat_test_SN5659_R2020_cal->Sinewave_Hsin_o2;
  }

  /* Update absolute time */
  /* The "clockTick2" counts the number of times the code of this task has
   * been executed. The absolute time is the multiplication of "clockTick2"
   * and "Timing.stepSize2". Size of "clockTick2" ensures timer will not
   * overflow during the application lifespan selected.
   * Timer of this task consists of two 32 bit unsigned integers.
   * The two integers represent the low bits Timing.clockTick2 and the high bits
   * Timing.clockTickH2. When the low bit overflows to 0, the high bits increment.
   */
  if (!(++speedgoat_test_SN5659_R2020b_M->Timing.clockTick2)) {
    ++speedgoat_test_SN5659_R2020b_M->Timing.clockTickH2;
  }

  speedgoat_test_SN5659_R2020b_M->Timing.t[2] =
    speedgoat_test_SN5659_R2020b_M->Timing.clockTick2 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize2 +
    speedgoat_test_SN5659_R2020b_M->Timing.clockTickH2 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize2 * 4294967296.0;
}

/* Model step function for TID3 */
void speedgoat_test_SN5659_R2020b_step3(void) /* Sample time: [0.01s, 0.0s] */
{
  real_T HoldCosine;
  real_T HoldSine;

  /* S-Function (sg_serial_read_s): '<S5>/Read ' */

  /* Level2 S-Function Block: '<S5>/Read ' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[186];
    sfcnOutputs(rts,3);
  }

  /* S-Function (slfifowrite): '<S5>/FIFO write' */
  {
    const char *err;
    static char msg[100];
    err = fifowrite((int32_T *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[0],
                    speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[1],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[2],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite_IWORK[0]);
    if (err) {
      if (strncmp("FIFO", err, 4)) {
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, err);
      } else {
        int n = strlen(err);
        strcpy(msg, err);
        strncpy(msg + n, "Rx Ch1 overflow", 99 - n);
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, msg);
      }
    }
  }

  /* S-Function (slfiforead): '<S5>/FIFO read' */
  {
    void **iPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread_PWORK[0];
    void **oPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread_PWORK[3];
    fiforead((const void **)iPtrs, oPtrs,
             &speedgoat_test_SN5659_R2020b_DW.FIFOread_IWORK[0]);
  }

  /* S-Function (slasciidecode): '<S5>/ASCII Decode' */

  /* Level2 S-Function Block: '<S5>/ASCII Decode' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[187];
    sfcnOutputs(rts,3);
  }

  /* S-Function (sg_serial_read_s): '<S5>/Read 1' */

  /* Level2 S-Function Block: '<S5>/Read 1' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[188];
    sfcnOutputs(rts,3);
  }

  /* S-Function (slfifowrite): '<S5>/FIFO write1' */
  {
    const char *err;
    static char msg[100];
    err = fifowrite((int32_T *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK
                    [0], speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[1],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[2],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_IWORK[0]);
    if (err) {
      if (strncmp("FIFO", err, 4)) {
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, err);
      } else {
        int n = strlen(err);
        strcpy(msg, err);
        strncpy(msg + n, "Rx Ch2 overflow", 99 - n);
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, msg);
      }
    }
  }

  /* S-Function (slfiforead): '<S5>/FIFO read1' */
  {
    void **iPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread1_PWORK[0];
    void **oPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread1_PWORK[3];
    fiforead((const void **)iPtrs, oPtrs,
             &speedgoat_test_SN5659_R2020b_DW.FIFOread1_IWORK[0]);
  }

  /* S-Function (slasciidecode): '<S5>/ASCII Decode1' */

  /* Level2 S-Function Block: '<S5>/ASCII Decode1' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[189];
    sfcnOutputs(rts,3);
  }

  /* S-Function (sg_serial_read_s): '<S5>/Read 2' */

  /* Level2 S-Function Block: '<S5>/Read 2' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[190];
    sfcnOutputs(rts,3);
  }

  /* S-Function (slfifowrite): '<S5>/FIFO write2' */
  {
    const char *err;
    static char msg[100];
    err = fifowrite((int32_T *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK
                    [0], speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[1],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[2],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_IWORK[0]);
    if (err) {
      if (strncmp("FIFO", err, 4)) {
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, err);
      } else {
        int n = strlen(err);
        strcpy(msg, err);
        strncpy(msg + n, "Rx Ch3 overflow", 99 - n);
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, msg);
      }
    }
  }

  /* S-Function (slfiforead): '<S5>/FIFO read2' */
  {
    void **iPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread2_PWORK[0];
    void **oPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread2_PWORK[3];
    fiforead((const void **)iPtrs, oPtrs,
             &speedgoat_test_SN5659_R2020b_DW.FIFOread2_IWORK[0]);
  }

  /* S-Function (slasciidecode): '<S5>/ASCII Decode2' */

  /* Level2 S-Function Block: '<S5>/ASCII Decode2' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[191];
    sfcnOutputs(rts,3);
  }

  /* S-Function (sg_serial_read_s): '<S5>/Read 3' */

  /* Level2 S-Function Block: '<S5>/Read 3' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[192];
    sfcnOutputs(rts,3);
  }

  /* S-Function (slfifowrite): '<S5>/FIFO write3' */
  {
    const char *err;
    static char msg[100];
    err = fifowrite((int32_T *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK
                    [0], speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[1],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[2],
                    &speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_IWORK[0]);
    if (err) {
      if (strncmp("FIFO", err, 4)) {
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, err);
      } else {
        int n = strlen(err);
        strcpy(msg, err);
        strncpy(msg + n, "Rx Ch4 overflow", 99 - n);
        rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, msg);
      }
    }
  }

  /* S-Function (slfiforead): '<S5>/FIFO read3' */
  {
    void **iPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread3_PWORK[0];
    void **oPtrs = &speedgoat_test_SN5659_R2020b_DW.FIFOread3_PWORK[3];
    fiforead((const void **)iPtrs, oPtrs,
             &speedgoat_test_SN5659_R2020b_DW.FIFOread3_IWORK[0]);
  }

  /* S-Function (slasciidecode): '<S5>/ASCII Decode3' */

  /* Level2 S-Function Block: '<S5>/ASCII Decode3' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[193];
    sfcnOutputs(rts,3);
  }

  /* Sin: '<S5>/Sine Wave1' */
  if (speedgoat_test_SN5659_R2020b_DW.systemEnable_k != 0) {
    speedgoat_test_SN5659_R2020b_DW.lastSin_h5 = std::sin
      (speedgoat_test_SN5659_R2020_cal->SineWave1_Freq_b *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.lastCos_aj = std::cos
      (speedgoat_test_SN5659_R2020_cal->SineWave1_Freq_b *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.systemEnable_k = 0;
  }

  /* Sin: '<S5>/Sine Wave1' */
  speedgoat_test_SN5659_R2020b_B.SineWave1_k =
    ((speedgoat_test_SN5659_R2020b_DW.lastSin_h5 *
      speedgoat_test_SN5659_R2020_cal->SineWave1_PCos_c +
      speedgoat_test_SN5659_R2020b_DW.lastCos_aj *
      speedgoat_test_SN5659_R2020_cal->SineWave1_PSin_e) *
     speedgoat_test_SN5659_R2020_cal->SineWave1_HCos_l +
     (speedgoat_test_SN5659_R2020b_DW.lastCos_aj *
      speedgoat_test_SN5659_R2020_cal->SineWave1_PCos_c -
      speedgoat_test_SN5659_R2020b_DW.lastSin_h5 *
      speedgoat_test_SN5659_R2020_cal->SineWave1_PSin_e) *
     speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin_j) *
    speedgoat_test_SN5659_R2020_cal->SineWave1_Amp_i +
    speedgoat_test_SN5659_R2020_cal->SineWave1_Bias_du;

  /* S-Function (slasciiencode): '<S5>/ASCII Encode' */

  /* Level2 S-Function Block: '<S5>/ASCII Encode' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[194];
    sfcnOutputs(rts,3);
  }

  /* S-Function (sg_serial_write_s): '<S5>/Write ' */

  /* Level2 S-Function Block: '<S5>/Write ' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[195];
    sfcnOutputs(rts,3);
  }

  /* Sin: '<S5>/Sine Wave2' */
  if (speedgoat_test_SN5659_R2020b_DW.systemEnable_p2 != 0) {
    speedgoat_test_SN5659_R2020b_DW.lastSin_ew = std::sin
      (speedgoat_test_SN5659_R2020_cal->SineWave2_Freq_o *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.lastCos_oj = std::cos
      (speedgoat_test_SN5659_R2020_cal->SineWave2_Freq_o *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.systemEnable_p2 = 0;
  }

  /* Sin: '<S5>/Sine Wave2' */
  speedgoat_test_SN5659_R2020b_B.SineWave2_m =
    ((speedgoat_test_SN5659_R2020b_DW.lastSin_ew *
      speedgoat_test_SN5659_R2020_cal->SineWave2_PCos_p +
      speedgoat_test_SN5659_R2020b_DW.lastCos_oj *
      speedgoat_test_SN5659_R2020_cal->SineWave2_PSin_p) *
     speedgoat_test_SN5659_R2020_cal->SineWave2_HCos_a +
     (speedgoat_test_SN5659_R2020b_DW.lastCos_oj *
      speedgoat_test_SN5659_R2020_cal->SineWave2_PCos_p -
      speedgoat_test_SN5659_R2020b_DW.lastSin_ew *
      speedgoat_test_SN5659_R2020_cal->SineWave2_PSin_p) *
     speedgoat_test_SN5659_R2020_cal->SineWave2_Hsin_k) *
    speedgoat_test_SN5659_R2020_cal->SineWave2_Amp_e +
    speedgoat_test_SN5659_R2020_cal->SineWave2_Bias_e;

  /* S-Function (slasciiencode): '<S5>/ASCII Encode1' */

  /* Level2 S-Function Block: '<S5>/ASCII Encode1' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[196];
    sfcnOutputs(rts,3);
  }

  /* S-Function (sg_serial_write_s): '<S5>/Write 1' */

  /* Level2 S-Function Block: '<S5>/Write 1' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[197];
    sfcnOutputs(rts,3);
  }

  /* Sin: '<S5>/Sine Wave3' */
  if (speedgoat_test_SN5659_R2020b_DW.systemEnable_av != 0) {
    speedgoat_test_SN5659_R2020b_DW.lastSin_ln = std::sin
      (speedgoat_test_SN5659_R2020_cal->SineWave3_Freq_p *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.lastCos_bs = std::cos
      (speedgoat_test_SN5659_R2020_cal->SineWave3_Freq_p *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.systemEnable_av = 0;
  }

  /* Sin: '<S5>/Sine Wave3' */
  speedgoat_test_SN5659_R2020b_B.SineWave3_k =
    ((speedgoat_test_SN5659_R2020b_DW.lastSin_ln *
      speedgoat_test_SN5659_R2020_cal->SineWave3_PCos_a +
      speedgoat_test_SN5659_R2020b_DW.lastCos_bs *
      speedgoat_test_SN5659_R2020_cal->SineWave3_PSin_n) *
     speedgoat_test_SN5659_R2020_cal->SineWave3_HCos_e +
     (speedgoat_test_SN5659_R2020b_DW.lastCos_bs *
      speedgoat_test_SN5659_R2020_cal->SineWave3_PCos_a -
      speedgoat_test_SN5659_R2020b_DW.lastSin_ln *
      speedgoat_test_SN5659_R2020_cal->SineWave3_PSin_n) *
     speedgoat_test_SN5659_R2020_cal->SineWave3_Hsin_g) *
    speedgoat_test_SN5659_R2020_cal->SineWave3_Amp_n +
    speedgoat_test_SN5659_R2020_cal->SineWave3_Bias_m;

  /* S-Function (slasciiencode): '<S5>/ASCII Encode2' */

  /* Level2 S-Function Block: '<S5>/ASCII Encode2' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[198];
    sfcnOutputs(rts,3);
  }

  /* S-Function (sg_serial_write_s): '<S5>/Write 2' */

  /* Level2 S-Function Block: '<S5>/Write 2' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[199];
    sfcnOutputs(rts,3);
  }

  /* Sin: '<S5>/Sine Wave4' */
  if (speedgoat_test_SN5659_R2020b_DW.systemEnable_gp != 0) {
    speedgoat_test_SN5659_R2020b_DW.lastSin_ck = std::sin
      (speedgoat_test_SN5659_R2020_cal->SineWave4_Freq_e *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.lastCos_ab = std::cos
      (speedgoat_test_SN5659_R2020_cal->SineWave4_Freq_e *
       speedgoat_test_SN5659_R2020b_M->Timing.t[3]);
    speedgoat_test_SN5659_R2020b_DW.systemEnable_gp = 0;
  }

  /* Sin: '<S5>/Sine Wave4' */
  speedgoat_test_SN5659_R2020b_B.SineWave4_j =
    ((speedgoat_test_SN5659_R2020b_DW.lastSin_ck *
      speedgoat_test_SN5659_R2020_cal->SineWave4_PCos_f +
      speedgoat_test_SN5659_R2020b_DW.lastCos_ab *
      speedgoat_test_SN5659_R2020_cal->SineWave4_PSin_l) *
     speedgoat_test_SN5659_R2020_cal->SineWave4_HCos_a +
     (speedgoat_test_SN5659_R2020b_DW.lastCos_ab *
      speedgoat_test_SN5659_R2020_cal->SineWave4_PCos_f -
      speedgoat_test_SN5659_R2020b_DW.lastSin_ck *
      speedgoat_test_SN5659_R2020_cal->SineWave4_PSin_l) *
     speedgoat_test_SN5659_R2020_cal->SineWave4_Hsin_f) *
    speedgoat_test_SN5659_R2020_cal->SineWave4_Amp_b +
    speedgoat_test_SN5659_R2020_cal->SineWave4_Bias_h;

  /* S-Function (slasciiencode): '<S5>/ASCII Encode3' */

  /* Level2 S-Function Block: '<S5>/ASCII Encode3' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[200];
    sfcnOutputs(rts,3);
  }

  /* S-Function (sg_serial_write_s): '<S5>/Write 3' */

  /* Level2 S-Function Block: '<S5>/Write 3' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[201];
    sfcnOutputs(rts,3);
  }

  /* DiscretePulseGenerator: '<S8>/Pulse Generator' */
  speedgoat_test_SN5659_R2020b_B.PulseGenerator_p =
    (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_i <
     speedgoat_test_SN5659_R2020_cal->PulseGenerator_Duty_h) &&
    (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_i >= 0) ?
    speedgoat_test_SN5659_R2020_cal->PulseGenerator_Amp_g3 : 0.0;

  /* DiscretePulseGenerator: '<S8>/Pulse Generator' */
  if (speedgoat_test_SN5659_R2020b_DW.clockTickCounter_i >=
      speedgoat_test_SN5659_R2020_cal->PulseGenerator_Period_o - 1.0) {
    speedgoat_test_SN5659_R2020b_DW.clockTickCounter_i = 0;
  } else {
    speedgoat_test_SN5659_R2020b_DW.clockTickCounter_i++;
  }

  /* DataTypeConversion: '<S8>/Data Type Conversion' */
  speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib =
    (speedgoat_test_SN5659_R2020b_B.PulseGenerator_p != 0.0);

  /* S-Function (sg_IOPIL_relay_s): '<S8>/Relays ' */

  /* Level2 S-Function Block: '<S8>/Relays ' (sg_IOPIL_relay_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[202];
    sfcnOutputs(rts,3);
  }

  /* Update for Sin: '<S5>/Sine Wave1' */
  HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_h5;
  HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_aj;
  speedgoat_test_SN5659_R2020b_DW.lastSin_h5 = HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave1_HCos_l + HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin_j;
  speedgoat_test_SN5659_R2020b_DW.lastCos_aj = HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave1_HCos_l - HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave1_Hsin_j;

  /* Update for Sin: '<S5>/Sine Wave2' */
  HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_ew;
  HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_oj;
  speedgoat_test_SN5659_R2020b_DW.lastSin_ew = HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave2_HCos_a + HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave2_Hsin_k;
  speedgoat_test_SN5659_R2020b_DW.lastCos_oj = HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave2_HCos_a - HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave2_Hsin_k;

  /* Update for Sin: '<S5>/Sine Wave3' */
  HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_ln;
  HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_bs;
  speedgoat_test_SN5659_R2020b_DW.lastSin_ln = HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave3_HCos_e + HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave3_Hsin_g;
  speedgoat_test_SN5659_R2020b_DW.lastCos_bs = HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave3_HCos_e - HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave3_Hsin_g;

  /* Update for Sin: '<S5>/Sine Wave4' */
  HoldSine = speedgoat_test_SN5659_R2020b_DW.lastSin_ck;
  HoldCosine = speedgoat_test_SN5659_R2020b_DW.lastCos_ab;
  speedgoat_test_SN5659_R2020b_DW.lastSin_ck = HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave4_HCos_a + HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave4_Hsin_f;
  speedgoat_test_SN5659_R2020b_DW.lastCos_ab = HoldCosine *
    speedgoat_test_SN5659_R2020_cal->SineWave4_HCos_a - HoldSine *
    speedgoat_test_SN5659_R2020_cal->SineWave4_Hsin_f;

  /* Update absolute time */
  /* The "clockTick3" counts the number of times the code of this task has
   * been executed. The absolute time is the multiplication of "clockTick3"
   * and "Timing.stepSize3". Size of "clockTick3" ensures timer will not
   * overflow during the application lifespan selected.
   * Timer of this task consists of two 32 bit unsigned integers.
   * The two integers represent the low bits Timing.clockTick3 and the high bits
   * Timing.clockTickH3. When the low bit overflows to 0, the high bits increment.
   */
  if (!(++speedgoat_test_SN5659_R2020b_M->Timing.clockTick3)) {
    ++speedgoat_test_SN5659_R2020b_M->Timing.clockTickH3;
  }

  speedgoat_test_SN5659_R2020b_M->Timing.t[3] =
    speedgoat_test_SN5659_R2020b_M->Timing.clockTick3 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize3 +
    speedgoat_test_SN5659_R2020b_M->Timing.clockTickH3 *
    speedgoat_test_SN5659_R2020b_M->Timing.stepSize3 * 4294967296.0;
}

/* Model initialize function */
void speedgoat_test_SN5659_R2020b_initialize(void)
{
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
  (speedgoat_test_SN5659_R2020b_M)->Timing.TaskCounters.cLimit[0] = 1;
  (speedgoat_test_SN5659_R2020b_M)->Timing.TaskCounters.cLimit[1] = 1;
  (speedgoat_test_SN5659_R2020b_M)->Timing.TaskCounters.cLimit[2] = 5;
  (speedgoat_test_SN5659_R2020b_M)->Timing.TaskCounters.cLimit[3] = 10;

  {
    /* Setup solver object */
    rtsiSetSimTimeStepPtr(&speedgoat_test_SN5659_R2020b_M->solverInfo,
                          &speedgoat_test_SN5659_R2020b_M->Timing.simTimeStep);
    rtsiSetTPtr(&speedgoat_test_SN5659_R2020b_M->solverInfo, &rtmGetTPtr
                (speedgoat_test_SN5659_R2020b_M));
    rtsiSetStepSizePtr(&speedgoat_test_SN5659_R2020b_M->solverInfo,
                       &speedgoat_test_SN5659_R2020b_M->Timing.stepSize0);
    rtsiSetErrorStatusPtr(&speedgoat_test_SN5659_R2020b_M->solverInfo,
                          (&rtmGetErrorStatus(speedgoat_test_SN5659_R2020b_M)));
    rtsiSetRTModelPtr(&speedgoat_test_SN5659_R2020b_M->solverInfo,
                      speedgoat_test_SN5659_R2020b_M);
  }

  rtsiSetSimTimeStep(&speedgoat_test_SN5659_R2020b_M->solverInfo,
                     MAJOR_TIME_STEP);
  rtsiSetSolverName(&speedgoat_test_SN5659_R2020b_M->solverInfo,
                    "FixedStepDiscrete");
  speedgoat_test_SN5659_R2020b_M->solverInfoPtr =
    (&speedgoat_test_SN5659_R2020b_M->solverInfo);

  /* Initialize timing info */
  {
    int_T *mdlTsMap =
      speedgoat_test_SN5659_R2020b_M->Timing.sampleTimeTaskIDArray;
    mdlTsMap[0] = 0;
    mdlTsMap[1] = 1;
    mdlTsMap[2] = 2;
    mdlTsMap[3] = 3;

    /* polyspace +2 MISRA2012:D4.1 [Justified:Low] "speedgoat_test_SN5659_R2020b_M points to
       static memory which is guaranteed to be non-NULL" */
    speedgoat_test_SN5659_R2020b_M->Timing.sampleTimeTaskIDPtr = (&mdlTsMap[0]);
    speedgoat_test_SN5659_R2020b_M->Timing.sampleTimes =
      (&speedgoat_test_SN5659_R2020b_M->Timing.sampleTimesArray[0]);
    speedgoat_test_SN5659_R2020b_M->Timing.offsetTimes =
      (&speedgoat_test_SN5659_R2020b_M->Timing.offsetTimesArray[0]);

    /* task periods */
    speedgoat_test_SN5659_R2020b_M->Timing.sampleTimes[0] = (0.0);
    speedgoat_test_SN5659_R2020b_M->Timing.sampleTimes[1] = (0.001);
    speedgoat_test_SN5659_R2020b_M->Timing.sampleTimes[2] = (0.005);
    speedgoat_test_SN5659_R2020b_M->Timing.sampleTimes[3] = (0.01);

    /* task offsets */
    speedgoat_test_SN5659_R2020b_M->Timing.offsetTimes[0] = (0.0);
    speedgoat_test_SN5659_R2020b_M->Timing.offsetTimes[1] = (0.0);
    speedgoat_test_SN5659_R2020b_M->Timing.offsetTimes[2] = (0.0);
    speedgoat_test_SN5659_R2020b_M->Timing.offsetTimes[3] = (0.0);
  }

  rtmSetTPtr(speedgoat_test_SN5659_R2020b_M,
             &speedgoat_test_SN5659_R2020b_M->Timing.tArray[0]);

  {
    int_T *mdlSampleHits = speedgoat_test_SN5659_R2020b_M->Timing.sampleHitArray;
    int_T *mdlPerTaskSampleHits =
      speedgoat_test_SN5659_R2020b_M->Timing.perTaskSampleHitsArray;
    speedgoat_test_SN5659_R2020b_M->Timing.perTaskSampleHits =
      (&mdlPerTaskSampleHits[0]);
    mdlSampleHits[0] = 1;
    speedgoat_test_SN5659_R2020b_M->Timing.sampleHits = (&mdlSampleHits[0]);
  }

  rtmSetTFinal(speedgoat_test_SN5659_R2020b_M, -1);
  speedgoat_test_SN5659_R2020b_M->Timing.stepSize0 = 0.001;
  speedgoat_test_SN5659_R2020b_M->Timing.stepSize1 = 0.001;
  speedgoat_test_SN5659_R2020b_M->Timing.stepSize2 = 0.005;
  speedgoat_test_SN5659_R2020b_M->Timing.stepSize3 = 0.01;
  speedgoat_test_SN5659_R2020b_M->solverInfoPtr =
    (&speedgoat_test_SN5659_R2020b_M->solverInfo);
  speedgoat_test_SN5659_R2020b_M->Timing.stepSize = (0.001);
  rtsiSetFixedStepSize(&speedgoat_test_SN5659_R2020b_M->solverInfo, 0.001);
  rtsiSetSolverMode(&speedgoat_test_SN5659_R2020b_M->solverInfo,
                    SOLVER_MODE_MULTITASKING);

  /* block I/O */
  (void) std::memset((static_cast<void *>(&speedgoat_test_SN5659_R2020b_B)), 0,
                     sizeof(B_speedgoat_test_SN5659_R2020b_T));

  {
    speedgoat_test_SN5659_R2020b_B.CANPack = CAN_DATATYPE_GROUND;
    speedgoat_test_SN5659_R2020b_B.CANPack1 = CAN_DATATYPE_GROUND;
    speedgoat_test_SN5659_R2020b_B.CANPack2 = CAN_DATATYPE_GROUND;
    speedgoat_test_SN5659_R2020b_B.CANPack3 = CAN_DATATYPE_GROUND;
    speedgoat_test_SN5659_R2020b_B.CANPack4 = CAN_DATATYPE_GROUND;
    speedgoat_test_SN5659_R2020b_B.CANPack5 = CAN_DATATYPE_GROUND;
    speedgoat_test_SN5659_R2020b_B.CANRead1_o2 = CAN_DATATYPE_GROUND;
    speedgoat_test_SN5659_R2020b_B.CANRead_o2 = CAN_DATATYPE_GROUND;
  }

  /* states (dwork) */
  (void) std::memset(static_cast<void *>(&speedgoat_test_SN5659_R2020b_DW), 0,
                     sizeof(DW_speedgoat_test_SN5659_R2020b_T));

  /* child S-Function registration */
  {
    RTWSfcnInfo *sfcnInfo =
      &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.sfcnInfo;
    speedgoat_test_SN5659_R2020b_M->sfcnInfo = (sfcnInfo);
    rtssSetErrorStatusPtr(sfcnInfo, (&rtmGetErrorStatus
      (speedgoat_test_SN5659_R2020b_M)));
    speedgoat_test_SN5659_R2020b_M->Sizes.numSampTimes = (4);
    rtssSetNumRootSampTimesPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2020b_M->Sizes.numSampTimes);
    speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.taskTimePtrs[0] =
      &(rtmGetTPtr(speedgoat_test_SN5659_R2020b_M)[0]);
    speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.taskTimePtrs[1] =
      &(rtmGetTPtr(speedgoat_test_SN5659_R2020b_M)[1]);
    speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.taskTimePtrs[2] =
      &(rtmGetTPtr(speedgoat_test_SN5659_R2020b_M)[2]);
    speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.taskTimePtrs[3] =
      &(rtmGetTPtr(speedgoat_test_SN5659_R2020b_M)[3]);
    rtssSetTPtrPtr(sfcnInfo,
                   speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.taskTimePtrs);
    rtssSetTStartPtr(sfcnInfo, &rtmGetTStart(speedgoat_test_SN5659_R2020b_M));
    rtssSetTFinalPtr(sfcnInfo, &rtmGetTFinal(speedgoat_test_SN5659_R2020b_M));
    rtssSetTimeOfLastOutputPtr(sfcnInfo, &rtmGetTimeOfLastOutput
      (speedgoat_test_SN5659_R2020b_M));
    rtssSetStepSizePtr(sfcnInfo,
                       &speedgoat_test_SN5659_R2020b_M->Timing.stepSize);
    rtssSetStopRequestedPtr(sfcnInfo, &rtmGetStopRequested
      (speedgoat_test_SN5659_R2020b_M));
    rtssSetDerivCacheNeedsResetPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2020b_M->derivCacheNeedsReset);
    rtssSetZCCacheNeedsResetPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2020b_M->zCCacheNeedsReset);
    rtssSetContTimeOutputInconsistentWithStateAtMajorStepPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2020b_M->CTOutputIncnstWithState);
    rtssSetSampleHitsPtr(sfcnInfo,
                         &speedgoat_test_SN5659_R2020b_M->Timing.sampleHits);
    rtssSetPerTaskSampleHitsPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2020b_M->Timing.perTaskSampleHits);
    rtssSetSimModePtr(sfcnInfo, &speedgoat_test_SN5659_R2020b_M->simMode);
    rtssSetSolverInfoPtr(sfcnInfo,
                         &speedgoat_test_SN5659_R2020b_M->solverInfoPtr);
  }

  speedgoat_test_SN5659_R2020b_M->Sizes.numSFcns = (203);

  /* register each child */
  {
    (void) std::memset(static_cast<void *>
                       (&speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.childSFunctions
                        [0]), 0,
                       203*sizeof(SimStruct));
    speedgoat_test_SN5659_R2020b_M->childSfunctions =
      (&speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.childSFunctionPtrs[0]);

    {
      int_T i;
      for (i = 0; i < 203; i++) {
        speedgoat_test_SN5659_R2020b_M->childSfunctions[i] =
          (&speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.childSFunctions[i]);
      }
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S10>/CAN Read (sg_IO61X_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[0];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [0]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[0]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [0]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [0]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [0]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [0]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[0]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 2);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn0.outputPortUnits[0]);
        ssSetOutputPortUnit(rts, 0, 0);
        ssSetOutputPortUnit(rts, 1, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 1, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.CANRead_o1));
        }

        /* port 1 */
        {
          _ssSetOutputPortNumDimensions(rts, 1, 1);
          ssSetOutputPortWidth(rts, 1, 1);
          ssSetOutputPortSignal(rts, 1, ((CAN_DATATYPE *)
            &speedgoat_test_SN5659_R2020b_B.CANRead_o2));
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Read");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO612/CAN Read Loop - Port 3/CAN Read");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.params;
        ssSetSFcnParamsCount(rts, 7);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead_P7_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANRead_IWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn0.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANRead_IWORK);
      }

      /* registration */
      sg_IO61X_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 1, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);
      _ssSetOutputPortBeingMerged(rts, 1, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S11>/CAN Read1 (sg_IO61X_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[1];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [1]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[1]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [1]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [1]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [1]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [1]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[1]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 2);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn1.outputPortUnits[0]);
        ssSetOutputPortUnit(rts, 0, 0);
        ssSetOutputPortUnit(rts, 1, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 1, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.CANRead1_o1));
        }

        /* port 1 */
        {
          _ssSetOutputPortNumDimensions(rts, 1, 1);
          ssSetOutputPortWidth(rts, 1, 1);
          ssSetOutputPortSignal(rts, 1, ((CAN_DATATYPE *)
            &speedgoat_test_SN5659_R2020b_B.CANRead1_o2));
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Read1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO612/CAN Read Loop - Port 4/CAN Read1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.params;
        ssSetSFcnParamsCount(rts, 7);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANRead1_P7_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANRead1_IWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn1.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANRead1_IWORK);
      }

      /* registration */
      sg_IO61X_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 1, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);
      _ssSetOutputPortBeingMerged(rts, 1, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S2>/Setup v2  (sg_IO132_IO133_setup_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[2];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn2.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn2.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn2.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [2]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[2]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [2]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [2]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [2]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [2]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[2]);
      }

      /* path info */
      ssSetModelName(rts, "Setup v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO133/Setup v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn2.params;
        ssSetSFcnParamsCount(rts, 35);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P16_Size);
        ssSetSFcnParam(rts, 16, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P17_Size);
        ssSetSFcnParam(rts, 17, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P18_Size);
        ssSetSFcnParam(rts, 18, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P19_Size);
        ssSetSFcnParam(rts, 19, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P20_Size);
        ssSetSFcnParam(rts, 20, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P21_Size);
        ssSetSFcnParam(rts, 21, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P22_Size);
        ssSetSFcnParam(rts, 22, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P23_Size);
        ssSetSFcnParam(rts, 23, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P24_Size);
        ssSetSFcnParam(rts, 24, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P25_Size);
        ssSetSFcnParam(rts, 25, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P26_Size);
        ssSetSFcnParam(rts, 26, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P27_Size);
        ssSetSFcnParam(rts, 27, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P28_Size);
        ssSetSFcnParam(rts, 28, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P29_Size);
        ssSetSFcnParam(rts, 29, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P30_Size);
        ssSetSFcnParam(rts, 30, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P31_Size);
        ssSetSFcnParam(rts, 31, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P32_Size);
        ssSetSFcnParam(rts, 32, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P33_Size);
        ssSetSFcnParam(rts, 33, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P34_Size);
        ssSetSFcnParam(rts, 34, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P35_Size);
      }

      /* registration */
      sg_IO132_IO133_setup_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S2>/Analog input v2  (sg_IO132_IO133_ad_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[3];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [3]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[3]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [3]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [3]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [3]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [3]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[3]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 4);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn3.outputPortUnits[0]);
        ssSetOutputPortUnit(rts, 0, 0);
        ssSetOutputPortUnit(rts, 1, 0);
        ssSetOutputPortUnit(rts, 2, 0);
        ssSetOutputPortUnit(rts, 3, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 1, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 2, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 3, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO133_AI_CH1));
        }

        /* port 1 */
        {
          _ssSetOutputPortNumDimensions(rts, 1, 1);
          ssSetOutputPortWidth(rts, 1, 1);
          ssSetOutputPortSignal(rts, 1, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO133_AI_CH2));
        }

        /* port 2 */
        {
          _ssSetOutputPortNumDimensions(rts, 2, 1);
          ssSetOutputPortWidth(rts, 2, 1);
          ssSetOutputPortSignal(rts, 2, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO133_AI_CH3));
        }

        /* port 3 */
        {
          _ssSetOutputPortNumDimensions(rts, 3, 1);
          ssSetOutputPortWidth(rts, 3, 1);
          ssSetOutputPortSignal(rts, 3, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO133_AI_CH4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Analog input v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO133/Analog input v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.params;
        ssSetSFcnParamsCount(rts, 11);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analoginputv2_P11_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Analoginputv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn3.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 4);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Analoginputv2_PWORK
                   [0]);
      }

      /* registration */
      sg_IO132_IO133_ad_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 1, 1);
      _ssSetOutputPortConnected(rts, 2, 1);
      _ssSetOutputPortConnected(rts, 3, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);
      _ssSetOutputPortBeingMerged(rts, 1, 0);
      _ssSetOutputPortBeingMerged(rts, 2, 0);
      _ssSetOutputPortBeingMerged(rts, 3, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S2>/Analog output v2  (sg_IO132_IO133_da_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[4];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [4]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[4]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [4]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [4]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [4]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [4]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[4]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 4);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        ssSetInputPortUnit(rts, 1, 0);
        ssSetInputPortUnit(rts, 2, 0);
        ssSetInputPortUnit(rts, 3, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);
        ssSetInputPortIsContinuousQuantity(rts, 1, 0);
        ssSetInputPortIsContinuousQuantity(rts, 2, 0);
        ssSetInputPortIsContinuousQuantity(rts, 3, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.Gain);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }

        /* port 1 */
        {
          ssSetInputPortRequiredContiguous(rts, 1, 1);
          ssSetInputPortSignal(rts, 1, &speedgoat_test_SN5659_R2020b_B.Gain1);
          _ssSetInputPortNumDimensions(rts, 1, 1);
          ssSetInputPortWidth(rts, 1, 1);
        }

        /* port 2 */
        {
          ssSetInputPortRequiredContiguous(rts, 2, 1);
          ssSetInputPortSignal(rts, 2, &speedgoat_test_SN5659_R2020b_B.Gain2);
          _ssSetInputPortNumDimensions(rts, 2, 1);
          ssSetInputPortWidth(rts, 2, 1);
        }

        /* port 3 */
        {
          ssSetInputPortRequiredContiguous(rts, 3, 1);
          ssSetInputPortSignal(rts, 3, &speedgoat_test_SN5659_R2020b_B.Gain3);
          _ssSetInputPortNumDimensions(rts, 3, 1);
          ssSetInputPortWidth(rts, 3, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "Analog output v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO133/Analog output v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.params;
        ssSetSFcnParamsCount(rts, 13);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutputv2_P13_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Analogoutputv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn4.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 5);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2020b_DW.Analogoutputv2_PWORK[0]);
      }

      /* registration */
      sg_IO132_IO133_da_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetInputPortConnected(rts, 1, 1);
      _ssSetInputPortConnected(rts, 2, 1);
      _ssSetInputPortConnected(rts, 3, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
      ssSetInputPortBufferDstPort(rts, 1, -1);
      ssSetInputPortBufferDstPort(rts, 2, -1);
      ssSetInputPortBufferDstPort(rts, 3, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S2>/Digital input v2  (sg_IO132_IO133_di_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[5];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [5]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[5]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [5]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [5]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [5]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [5]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[5]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 2);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn5.outputPortUnits[0]);
        ssSetOutputPortUnit(rts, 0, 0);
        ssSetOutputPortUnit(rts, 1, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 1, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO133_DI_CH8));
        }

        /* port 1 */
        {
          _ssSetOutputPortNumDimensions(rts, 1, 1);
          ssSetOutputPortWidth(rts, 1, 1);
          ssSetOutputPortSignal(rts, 1, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO133_DI_CH9));
        }
      }

      /* path info */
      ssSetModelName(rts, "Digital input v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO133/Digital input v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitalinputv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitalinputv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitalinputv2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitalinputv2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitalinputv2_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Digitalinputv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn5.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2020b_DW.Digitalinputv2_PWORK[0]);
      }

      /* registration */
      sg_IO132_IO133_di_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 1, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);
      _ssSetOutputPortBeingMerged(rts, 1, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S2>/Digital output v2  (sg_IO132_IO133_do_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[6];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [6]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[6]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [6]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [6]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [6]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [6]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[6]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 2);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        ssSetInputPortUnit(rts, 1, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);
        ssSetInputPortIsContinuousQuantity(rts, 1, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.PulseGenerator);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }

        /* port 1 */
        {
          ssSetInputPortRequiredContiguous(rts, 1, 1);
          ssSetInputPortSignal(rts, 1,
                               &speedgoat_test_SN5659_R2020b_B.PulseGenerator1);
          _ssSetInputPortNumDimensions(rts, 1, 1);
          ssSetInputPortWidth(rts, 1, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "Digital output v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO133/Digital output v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.params;
        ssSetSFcnParamsCount(rts, 7);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitaloutputv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitaloutputv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitaloutputv2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitaloutputv2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitaloutputv2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitaloutputv2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Digitaloutputv2_P7_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Digitaloutputv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn6.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2020b_DW.Digitaloutputv2_PWORK[0]);
      }

      /* registration */
      sg_IO132_IO133_do_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetInputPortConnected(rts, 1, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
      ssSetInputPortBufferDstPort(rts, 1, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S3>/Setup (sg_IO204_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[7];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn7.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn7.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn7.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [7]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[7]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [7]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [7]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [7]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [7]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[7]);
      }

      /* path info */
      ssSetModelName(rts, "Setup");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO204/Setup");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn7.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P5_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Setup_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Setup_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn7.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn7.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Setup_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Setup_PWORK);
      }

      /* registration */
      sg_IO204_setup_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S3>/Read (sg_IO204_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[8];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [8]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[8]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [8]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [8]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [8]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [8]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[8]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 16);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn8.outputPortUnits[0]);
        ssSetOutputPortUnit(rts, 0, 0);
        ssSetOutputPortUnit(rts, 1, 0);
        ssSetOutputPortUnit(rts, 2, 0);
        ssSetOutputPortUnit(rts, 3, 0);
        ssSetOutputPortUnit(rts, 4, 0);
        ssSetOutputPortUnit(rts, 5, 0);
        ssSetOutputPortUnit(rts, 6, 0);
        ssSetOutputPortUnit(rts, 7, 0);
        ssSetOutputPortUnit(rts, 8, 0);
        ssSetOutputPortUnit(rts, 9, 0);
        ssSetOutputPortUnit(rts, 10, 0);
        ssSetOutputPortUnit(rts, 11, 0);
        ssSetOutputPortUnit(rts, 12, 0);
        ssSetOutputPortUnit(rts, 13, 0);
        ssSetOutputPortUnit(rts, 14, 0);
        ssSetOutputPortUnit(rts, 15, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 1, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 2, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 3, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 4, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 5, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 6, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 7, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 8, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 9, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 10, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 11, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 12, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 13, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 14, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 15, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO204_CH1));
        }

        /* port 1 */
        {
          _ssSetOutputPortNumDimensions(rts, 1, 1);
          ssSetOutputPortWidth(rts, 1, 1);
          ssSetOutputPortSignal(rts, 1, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o2));
        }

        /* port 2 */
        {
          _ssSetOutputPortNumDimensions(rts, 2, 1);
          ssSetOutputPortWidth(rts, 2, 1);
          ssSetOutputPortSignal(rts, 2, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o3));
        }

        /* port 3 */
        {
          _ssSetOutputPortNumDimensions(rts, 3, 1);
          ssSetOutputPortWidth(rts, 3, 1);
          ssSetOutputPortSignal(rts, 3, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o4));
        }

        /* port 4 */
        {
          _ssSetOutputPortNumDimensions(rts, 4, 1);
          ssSetOutputPortWidth(rts, 4, 1);
          ssSetOutputPortSignal(rts, 4, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o5));
        }

        /* port 5 */
        {
          _ssSetOutputPortNumDimensions(rts, 5, 1);
          ssSetOutputPortWidth(rts, 5, 1);
          ssSetOutputPortSignal(rts, 5, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o6));
        }

        /* port 6 */
        {
          _ssSetOutputPortNumDimensions(rts, 6, 1);
          ssSetOutputPortWidth(rts, 6, 1);
          ssSetOutputPortSignal(rts, 6, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o7));
        }

        /* port 7 */
        {
          _ssSetOutputPortNumDimensions(rts, 7, 1);
          ssSetOutputPortWidth(rts, 7, 1);
          ssSetOutputPortSignal(rts, 7, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o8));
        }

        /* port 8 */
        {
          _ssSetOutputPortNumDimensions(rts, 8, 1);
          ssSetOutputPortWidth(rts, 8, 1);
          ssSetOutputPortSignal(rts, 8, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o9));
        }

        /* port 9 */
        {
          _ssSetOutputPortNumDimensions(rts, 9, 1);
          ssSetOutputPortWidth(rts, 9, 1);
          ssSetOutputPortSignal(rts, 9, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o10));
        }

        /* port 10 */
        {
          _ssSetOutputPortNumDimensions(rts, 10, 1);
          ssSetOutputPortWidth(rts, 10, 1);
          ssSetOutputPortSignal(rts, 10, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o11));
        }

        /* port 11 */
        {
          _ssSetOutputPortNumDimensions(rts, 11, 1);
          ssSetOutputPortWidth(rts, 11, 1);
          ssSetOutputPortSignal(rts, 11, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o12));
        }

        /* port 12 */
        {
          _ssSetOutputPortNumDimensions(rts, 12, 1);
          ssSetOutputPortWidth(rts, 12, 1);
          ssSetOutputPortSignal(rts, 12, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o13));
        }

        /* port 13 */
        {
          _ssSetOutputPortNumDimensions(rts, 13, 1);
          ssSetOutputPortWidth(rts, 13, 1);
          ssSetOutputPortSignal(rts, 13, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o14));
        }

        /* port 14 */
        {
          _ssSetOutputPortNumDimensions(rts, 14, 1);
          ssSetOutputPortWidth(rts, 14, 1);
          ssSetOutputPortSignal(rts, 14, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o15));
        }

        /* port 15 */
        {
          _ssSetOutputPortNumDimensions(rts, 15, 1);
          ssSetOutputPortWidth(rts, 15, 1);
          ssSetOutputPortSignal(rts, 15, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Read_o16));
        }
      }

      /* path info */
      ssSetModelName(rts, "Read");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO204/Read");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P5_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Read_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Read_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn8.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Read_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Read_PWORK);
      }

      /* registration */
      sg_IO204_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 1, 0);
      _ssSetOutputPortConnected(rts, 2, 0);
      _ssSetOutputPortConnected(rts, 3, 0);
      _ssSetOutputPortConnected(rts, 4, 0);
      _ssSetOutputPortConnected(rts, 5, 1);
      _ssSetOutputPortConnected(rts, 6, 0);
      _ssSetOutputPortConnected(rts, 7, 0);
      _ssSetOutputPortConnected(rts, 8, 0);
      _ssSetOutputPortConnected(rts, 9, 0);
      _ssSetOutputPortConnected(rts, 10, 1);
      _ssSetOutputPortConnected(rts, 11, 0);
      _ssSetOutputPortConnected(rts, 12, 0);
      _ssSetOutputPortConnected(rts, 13, 0);
      _ssSetOutputPortConnected(rts, 14, 0);
      _ssSetOutputPortConnected(rts, 15, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);
      _ssSetOutputPortBeingMerged(rts, 1, 0);
      _ssSetOutputPortBeingMerged(rts, 2, 0);
      _ssSetOutputPortBeingMerged(rts, 3, 0);
      _ssSetOutputPortBeingMerged(rts, 4, 0);
      _ssSetOutputPortBeingMerged(rts, 5, 0);
      _ssSetOutputPortBeingMerged(rts, 6, 0);
      _ssSetOutputPortBeingMerged(rts, 7, 0);
      _ssSetOutputPortBeingMerged(rts, 8, 0);
      _ssSetOutputPortBeingMerged(rts, 9, 0);
      _ssSetOutputPortBeingMerged(rts, 10, 0);
      _ssSetOutputPortBeingMerged(rts, 11, 0);
      _ssSetOutputPortBeingMerged(rts, 12, 0);
      _ssSetOutputPortBeingMerged(rts, 13, 0);
      _ssSetOutputPortBeingMerged(rts, 14, 0);
      _ssSetOutputPortBeingMerged(rts, 15, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S3>/Write (sg_IO204_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[9];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [9]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[9]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [9]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [9]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [9]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [9]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[9]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 16);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        ssSetInputPortUnit(rts, 1, 0);
        ssSetInputPortUnit(rts, 2, 0);
        ssSetInputPortUnit(rts, 3, 0);
        ssSetInputPortUnit(rts, 4, 0);
        ssSetInputPortUnit(rts, 5, 0);
        ssSetInputPortUnit(rts, 6, 0);
        ssSetInputPortUnit(rts, 7, 0);
        ssSetInputPortUnit(rts, 8, 0);
        ssSetInputPortUnit(rts, 9, 0);
        ssSetInputPortUnit(rts, 10, 0);
        ssSetInputPortUnit(rts, 11, 0);
        ssSetInputPortUnit(rts, 12, 0);
        ssSetInputPortUnit(rts, 13, 0);
        ssSetInputPortUnit(rts, 14, 0);
        ssSetInputPortUnit(rts, 15, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);
        ssSetInputPortIsContinuousQuantity(rts, 1, 0);
        ssSetInputPortIsContinuousQuantity(rts, 2, 0);
        ssSetInputPortIsContinuousQuantity(rts, 3, 0);
        ssSetInputPortIsContinuousQuantity(rts, 4, 0);
        ssSetInputPortIsContinuousQuantity(rts, 5, 0);
        ssSetInputPortIsContinuousQuantity(rts, 6, 0);
        ssSetInputPortIsContinuousQuantity(rts, 7, 0);
        ssSetInputPortIsContinuousQuantity(rts, 8, 0);
        ssSetInputPortIsContinuousQuantity(rts, 9, 0);
        ssSetInputPortIsContinuousQuantity(rts, 10, 0);
        ssSetInputPortIsContinuousQuantity(rts, 11, 0);
        ssSetInputPortIsContinuousQuantity(rts, 12, 0);
        ssSetInputPortIsContinuousQuantity(rts, 13, 0);
        ssSetInputPortIsContinuousQuantity(rts, 14, 0);
        ssSetInputPortIsContinuousQuantity(rts, 15, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.PulseGenerator_k);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }

        /* port 1 */
        {
          ssSetInputPortRequiredContiguous(rts, 1, 1);
          ssSetInputPortSignal(rts, 1, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 1, 1);
          ssSetInputPortWidth(rts, 1, 1);
        }

        /* port 2 */
        {
          ssSetInputPortRequiredContiguous(rts, 2, 1);
          ssSetInputPortSignal(rts, 2, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 2, 1);
          ssSetInputPortWidth(rts, 2, 1);
        }

        /* port 3 */
        {
          ssSetInputPortRequiredContiguous(rts, 3, 1);
          ssSetInputPortSignal(rts, 3, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 3, 1);
          ssSetInputPortWidth(rts, 3, 1);
        }

        /* port 4 */
        {
          ssSetInputPortRequiredContiguous(rts, 4, 1);
          ssSetInputPortSignal(rts, 4, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 4, 1);
          ssSetInputPortWidth(rts, 4, 1);
        }

        /* port 5 */
        {
          ssSetInputPortRequiredContiguous(rts, 5, 1);
          ssSetInputPortSignal(rts, 5,
                               &speedgoat_test_SN5659_R2020b_B.PulseGenerator_k);
          _ssSetInputPortNumDimensions(rts, 5, 1);
          ssSetInputPortWidth(rts, 5, 1);
        }

        /* port 6 */
        {
          ssSetInputPortRequiredContiguous(rts, 6, 1);
          ssSetInputPortSignal(rts, 6, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 6, 1);
          ssSetInputPortWidth(rts, 6, 1);
        }

        /* port 7 */
        {
          ssSetInputPortRequiredContiguous(rts, 7, 1);
          ssSetInputPortSignal(rts, 7, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 7, 1);
          ssSetInputPortWidth(rts, 7, 1);
        }

        /* port 8 */
        {
          ssSetInputPortRequiredContiguous(rts, 8, 1);
          ssSetInputPortSignal(rts, 8, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 8, 1);
          ssSetInputPortWidth(rts, 8, 1);
        }

        /* port 9 */
        {
          ssSetInputPortRequiredContiguous(rts, 9, 1);
          ssSetInputPortSignal(rts, 9, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 9, 1);
          ssSetInputPortWidth(rts, 9, 1);
        }

        /* port 10 */
        {
          ssSetInputPortRequiredContiguous(rts, 10, 1);
          ssSetInputPortSignal(rts, 10,
                               &speedgoat_test_SN5659_R2020b_B.PulseGenerator_k);
          _ssSetInputPortNumDimensions(rts, 10, 1);
          ssSetInputPortWidth(rts, 10, 1);
        }

        /* port 11 */
        {
          ssSetInputPortRequiredContiguous(rts, 11, 1);
          ssSetInputPortSignal(rts, 11, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 11, 1);
          ssSetInputPortWidth(rts, 11, 1);
        }

        /* port 12 */
        {
          ssSetInputPortRequiredContiguous(rts, 12, 1);
          ssSetInputPortSignal(rts, 12, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 12, 1);
          ssSetInputPortWidth(rts, 12, 1);
        }

        /* port 13 */
        {
          ssSetInputPortRequiredContiguous(rts, 13, 1);
          ssSetInputPortSignal(rts, 13, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 13, 1);
          ssSetInputPortWidth(rts, 13, 1);
        }

        /* port 14 */
        {
          ssSetInputPortRequiredContiguous(rts, 14, 1);
          ssSetInputPortSignal(rts, 14, (const_cast<real_T*>
            (&speedgoat_test_SN5659_R2020b_RGND)));
          _ssSetInputPortNumDimensions(rts, 14, 1);
          ssSetInputPortWidth(rts, 14, 1);
        }

        /* port 15 */
        {
          ssSetInputPortRequiredContiguous(rts, 15, 1);
          ssSetInputPortSignal(rts, 15,
                               &speedgoat_test_SN5659_R2020b_B.PulseGenerator_k);
          _ssSetInputPortNumDimensions(rts, 15, 1);
          ssSetInputPortWidth(rts, 15, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "Write");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO204/Write");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.params;
        ssSetSFcnParamsCount(rts, 4);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P4_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Write_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Write_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn9.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Write_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Write_PWORK);
      }

      /* registration */
      sg_IO204_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetInputPortConnected(rts, 1, 0);
      _ssSetInputPortConnected(rts, 2, 0);
      _ssSetInputPortConnected(rts, 3, 0);
      _ssSetInputPortConnected(rts, 4, 0);
      _ssSetInputPortConnected(rts, 5, 1);
      _ssSetInputPortConnected(rts, 6, 0);
      _ssSetInputPortConnected(rts, 7, 0);
      _ssSetInputPortConnected(rts, 8, 0);
      _ssSetInputPortConnected(rts, 9, 0);
      _ssSetInputPortConnected(rts, 10, 1);
      _ssSetInputPortConnected(rts, 11, 0);
      _ssSetInputPortConnected(rts, 12, 0);
      _ssSetInputPortConnected(rts, 13, 0);
      _ssSetInputPortConnected(rts, 14, 0);
      _ssSetInputPortConnected(rts, 15, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
      ssSetInputPortBufferDstPort(rts, 1, -1);
      ssSetInputPortBufferDstPort(rts, 2, -1);
      ssSetInputPortBufferDstPort(rts, 3, -1);
      ssSetInputPortBufferDstPort(rts, 4, -1);
      ssSetInputPortBufferDstPort(rts, 5, -1);
      ssSetInputPortBufferDstPort(rts, 6, -1);
      ssSetInputPortBufferDstPort(rts, 7, -1);
      ssSetInputPortBufferDstPort(rts, 8, -1);
      ssSetInputPortBufferDstPort(rts, 9, -1);
      ssSetInputPortBufferDstPort(rts, 10, -1);
      ssSetInputPortBufferDstPort(rts, 11, -1);
      ssSetInputPortBufferDstPort(rts, 12, -1);
      ssSetInputPortBufferDstPort(rts, 13, -1);
      ssSetInputPortBufferDstPort(rts, 14, -1);
      ssSetInputPortBufferDstPort(rts, 15, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Setup  (sg_serial_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[10];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn10.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn10.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn10.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [10]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[10]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [10]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [10]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [10]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [10]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[10]);
      }

      /* path info */
      ssSetModelName(rts, "Setup ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Setup ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn10.params;
        ssSetSFcnParamsCount(rts, 25);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P2_Size_e);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P16_Size);
        ssSetSFcnParam(rts, 16, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P17_Size);
        ssSetSFcnParam(rts, 17, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P18_Size);
        ssSetSFcnParam(rts, 18, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P19_Size);
        ssSetSFcnParam(rts, 19, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P20_Size);
        ssSetSFcnParam(rts, 20, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P21_Size);
        ssSetSFcnParam(rts, 21, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P22_Size);
        ssSetSFcnParam(rts, 22, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P23_Size);
        ssSetSFcnParam(rts, 23, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P24_Size);
        ssSetSFcnParam(rts, 24, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P25_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Setup_IWORK_m[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Setup_PWORK_j);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn10.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn10.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Setup_IWORK_m[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Setup_PWORK_j);
      }

      /* registration */
      sg_serial_setup_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S6>/CAN Setup (sg_IO612_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[11];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn11.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn11.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn11.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [11]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[11]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [11]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [11]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [11]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [11]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[11]);
      }

      /* path info */
      ssSetModelName(rts, "CAN Setup");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO612/CAN Setup");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn11.params;
        ssSetSFcnParamsCount(rts, 31);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P16_Size);
        ssSetSFcnParam(rts, 16, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P17_Size);
        ssSetSFcnParam(rts, 17, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P18_Size);
        ssSetSFcnParam(rts, 18, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P19_Size);
        ssSetSFcnParam(rts, 19, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P20_Size);
        ssSetSFcnParam(rts, 20, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P21_Size);
        ssSetSFcnParam(rts, 21, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P22_Size);
        ssSetSFcnParam(rts, 22, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P23_Size);
        ssSetSFcnParam(rts, 23, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P24_Size);
        ssSetSFcnParam(rts, 24, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P25_Size);
        ssSetSFcnParam(rts, 25, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P26_Size);
        ssSetSFcnParam(rts, 26, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P27_Size);
        ssSetSFcnParam(rts, 27, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P28_Size);
        ssSetSFcnParam(rts, 28, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P29_Size);
        ssSetSFcnParam(rts, 29, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P30_Size);
        ssSetSFcnParam(rts, 30, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANSetup_P31_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANSetup_IWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn11.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn11.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANSetup_IWORK);
      }

      /* registration */
      sg_IO612_setup_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S6>/CAN Write (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[12];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [12]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[12]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [12]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [12]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [12]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [12]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[12]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn12.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.CANPack);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Write");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO612/CAN Write");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANWrite_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.CANWrite_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn12.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANWrite_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.CANWrite_PWORK);
      }

      /* registration */
      sg_IO61X_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S6>/CAN Write2 (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[13];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [13]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[13]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [13]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [13]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [13]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [13]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[13]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn13.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.CANPack1);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Write2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO612/CAN Write2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite2_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANWrite2_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.CANWrite2_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn13.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANWrite2_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.CANWrite2_PWORK);
      }

      /* registration */
      sg_IO61X_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S6>/CAN Write3 (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[14];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [14]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[14]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [14]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [14]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [14]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [14]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[14]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn14.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.CANPack2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Write3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO612/CAN Write3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite3_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANWrite3_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.CANWrite3_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn14.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANWrite3_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.CANWrite3_PWORK);
      }

      /* registration */
      sg_IO61X_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S6>/CAN Write1 (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[15];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [15]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[15]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [15]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [15]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [15]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [15]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[15]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn15.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.CANPack3);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Write1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO612/CAN Write1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite1_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANWrite1_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.CANWrite1_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn15.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANWrite1_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.CANWrite1_PWORK);
      }

      /* registration */
      sg_IO61X_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S6>/CAN Write4 (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[16];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [16]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[16]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [16]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [16]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [16]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [16]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[16]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn16.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.CANPack4);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Write4");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO612/CAN Write4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite4_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANWrite4_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.CANWrite4_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn16.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANWrite4_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.CANWrite4_PWORK);
      }

      /* registration */
      sg_IO61X_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S6>/CAN Write5 (sg_IO61X_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[17];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [17]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[17]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [17]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [17]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [17]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [17]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[17]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn17.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.CANPack5);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "CAN Write5");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO612/CAN Write5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->CANWrite5_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.CANWrite5_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.CANWrite5_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn17.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.CANWrite5_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.CANWrite5_PWORK);
      }

      /* registration */
      sg_IO61X_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Setup v2  (sg_io682_setup_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[18];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn18.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn18.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn18.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [18]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[18]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [18]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [18]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [18]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [18]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[18]);
      }

      /* path info */
      ssSetModelName(rts, "Setup v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Setup v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn18.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setupv2_P8_Size_p);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Setupv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn18.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn18.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Setupv2_PWORK[0]);
      }

      /* registration */
      sg_io682_setup_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S1>/Analog output (sg_IO107_da_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[19];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [19]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[19]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [19]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [19]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [19]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [19]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[19]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 16);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn19.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        ssSetInputPortUnit(rts, 1, 0);
        ssSetInputPortUnit(rts, 2, 0);
        ssSetInputPortUnit(rts, 3, 0);
        ssSetInputPortUnit(rts, 4, 0);
        ssSetInputPortUnit(rts, 5, 0);
        ssSetInputPortUnit(rts, 6, 0);
        ssSetInputPortUnit(rts, 7, 0);
        ssSetInputPortUnit(rts, 8, 0);
        ssSetInputPortUnit(rts, 9, 0);
        ssSetInputPortUnit(rts, 10, 0);
        ssSetInputPortUnit(rts, 11, 0);
        ssSetInputPortUnit(rts, 12, 0);
        ssSetInputPortUnit(rts, 13, 0);
        ssSetInputPortUnit(rts, 14, 0);
        ssSetInputPortUnit(rts, 15, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);
        ssSetInputPortIsContinuousQuantity(rts, 1, 0);
        ssSetInputPortIsContinuousQuantity(rts, 2, 0);
        ssSetInputPortIsContinuousQuantity(rts, 3, 0);
        ssSetInputPortIsContinuousQuantity(rts, 4, 0);
        ssSetInputPortIsContinuousQuantity(rts, 5, 0);
        ssSetInputPortIsContinuousQuantity(rts, 6, 0);
        ssSetInputPortIsContinuousQuantity(rts, 7, 0);
        ssSetInputPortIsContinuousQuantity(rts, 8, 0);
        ssSetInputPortIsContinuousQuantity(rts, 9, 0);
        ssSetInputPortIsContinuousQuantity(rts, 10, 0);
        ssSetInputPortIsContinuousQuantity(rts, 11, 0);
        ssSetInputPortIsContinuousQuantity(rts, 12, 0);
        ssSetInputPortIsContinuousQuantity(rts, 13, 0);
        ssSetInputPortIsContinuousQuantity(rts, 14, 0);
        ssSetInputPortIsContinuousQuantity(rts, 15, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }

        /* port 1 */
        {
          ssSetInputPortRequiredContiguous(rts, 1, 1);
          ssSetInputPortSignal(rts, 1,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 1, 1);
          ssSetInputPortWidth(rts, 1, 1);
        }

        /* port 2 */
        {
          ssSetInputPortRequiredContiguous(rts, 2, 1);
          ssSetInputPortSignal(rts, 2,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 2, 1);
          ssSetInputPortWidth(rts, 2, 1);
        }

        /* port 3 */
        {
          ssSetInputPortRequiredContiguous(rts, 3, 1);
          ssSetInputPortSignal(rts, 3,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 3, 1);
          ssSetInputPortWidth(rts, 3, 1);
        }

        /* port 4 */
        {
          ssSetInputPortRequiredContiguous(rts, 4, 1);
          ssSetInputPortSignal(rts, 4,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 4, 1);
          ssSetInputPortWidth(rts, 4, 1);
        }

        /* port 5 */
        {
          ssSetInputPortRequiredContiguous(rts, 5, 1);
          ssSetInputPortSignal(rts, 5,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 5, 1);
          ssSetInputPortWidth(rts, 5, 1);
        }

        /* port 6 */
        {
          ssSetInputPortRequiredContiguous(rts, 6, 1);
          ssSetInputPortSignal(rts, 6,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 6, 1);
          ssSetInputPortWidth(rts, 6, 1);
        }

        /* port 7 */
        {
          ssSetInputPortRequiredContiguous(rts, 7, 1);
          ssSetInputPortSignal(rts, 7,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 7, 1);
          ssSetInputPortWidth(rts, 7, 1);
        }

        /* port 8 */
        {
          ssSetInputPortRequiredContiguous(rts, 8, 1);
          ssSetInputPortSignal(rts, 8,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 8, 1);
          ssSetInputPortWidth(rts, 8, 1);
        }

        /* port 9 */
        {
          ssSetInputPortRequiredContiguous(rts, 9, 1);
          ssSetInputPortSignal(rts, 9,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 9, 1);
          ssSetInputPortWidth(rts, 9, 1);
        }

        /* port 10 */
        {
          ssSetInputPortRequiredContiguous(rts, 10, 1);
          ssSetInputPortSignal(rts, 10,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 10, 1);
          ssSetInputPortWidth(rts, 10, 1);
        }

        /* port 11 */
        {
          ssSetInputPortRequiredContiguous(rts, 11, 1);
          ssSetInputPortSignal(rts, 11,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 11, 1);
          ssSetInputPortWidth(rts, 11, 1);
        }

        /* port 12 */
        {
          ssSetInputPortRequiredContiguous(rts, 12, 1);
          ssSetInputPortSignal(rts, 12,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 12, 1);
          ssSetInputPortWidth(rts, 12, 1);
        }

        /* port 13 */
        {
          ssSetInputPortRequiredContiguous(rts, 13, 1);
          ssSetInputPortSignal(rts, 13,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 13, 1);
          ssSetInputPortWidth(rts, 13, 1);
        }

        /* port 14 */
        {
          ssSetInputPortRequiredContiguous(rts, 14, 1);
          ssSetInputPortSignal(rts, 14,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 14, 1);
          ssSetInputPortWidth(rts, 14, 1);
        }

        /* port 15 */
        {
          ssSetInputPortRequiredContiguous(rts, 15, 1);
          ssSetInputPortSignal(rts, 15,
                               &speedgoat_test_SN5659_R2020b_B.SineWave_h);
          _ssSetInputPortNumDimensions(rts, 15, 1);
          ssSetInputPortWidth(rts, 15, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "Analog output");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO107 (1-2)/Analog output");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.params;
        ssSetSFcnParamsCount(rts, 7);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput_P7_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Analogoutput_RWORK[0]);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Analogoutput_IWORK);
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Analogoutput_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn19.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 3);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Analogoutput_RWORK[0]);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Analogoutput_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 2, 1);
        ssSetDWorkDataType(rts, 2,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 2, 0);
        ssSetDWork(rts, 2, &speedgoat_test_SN5659_R2020b_DW.Analogoutput_PWORK);
      }

      /* registration */
      sg_IO107_da_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetInputPortConnected(rts, 1, 1);
      _ssSetInputPortConnected(rts, 2, 1);
      _ssSetInputPortConnected(rts, 3, 1);
      _ssSetInputPortConnected(rts, 4, 1);
      _ssSetInputPortConnected(rts, 5, 1);
      _ssSetInputPortConnected(rts, 6, 1);
      _ssSetInputPortConnected(rts, 7, 1);
      _ssSetInputPortConnected(rts, 8, 1);
      _ssSetInputPortConnected(rts, 9, 1);
      _ssSetInputPortConnected(rts, 10, 1);
      _ssSetInputPortConnected(rts, 11, 1);
      _ssSetInputPortConnected(rts, 12, 1);
      _ssSetInputPortConnected(rts, 13, 1);
      _ssSetInputPortConnected(rts, 14, 1);
      _ssSetInputPortConnected(rts, 15, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
      ssSetInputPortBufferDstPort(rts, 1, -1);
      ssSetInputPortBufferDstPort(rts, 2, -1);
      ssSetInputPortBufferDstPort(rts, 3, -1);
      ssSetInputPortBufferDstPort(rts, 4, -1);
      ssSetInputPortBufferDstPort(rts, 5, -1);
      ssSetInputPortBufferDstPort(rts, 6, -1);
      ssSetInputPortBufferDstPort(rts, 7, -1);
      ssSetInputPortBufferDstPort(rts, 8, -1);
      ssSetInputPortBufferDstPort(rts, 9, -1);
      ssSetInputPortBufferDstPort(rts, 10, -1);
      ssSetInputPortBufferDstPort(rts, 11, -1);
      ssSetInputPortBufferDstPort(rts, 12, -1);
      ssSetInputPortBufferDstPort(rts, 13, -1);
      ssSetInputPortBufferDstPort(rts, 14, -1);
      ssSetInputPortBufferDstPort(rts, 15, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S1>/Analog output1 (sg_IO107_da_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[20];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [20]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[20]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [20]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [20]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [20]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [20]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[20]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 16);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn20.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        ssSetInputPortUnit(rts, 1, 0);
        ssSetInputPortUnit(rts, 2, 0);
        ssSetInputPortUnit(rts, 3, 0);
        ssSetInputPortUnit(rts, 4, 0);
        ssSetInputPortUnit(rts, 5, 0);
        ssSetInputPortUnit(rts, 6, 0);
        ssSetInputPortUnit(rts, 7, 0);
        ssSetInputPortUnit(rts, 8, 0);
        ssSetInputPortUnit(rts, 9, 0);
        ssSetInputPortUnit(rts, 10, 0);
        ssSetInputPortUnit(rts, 11, 0);
        ssSetInputPortUnit(rts, 12, 0);
        ssSetInputPortUnit(rts, 13, 0);
        ssSetInputPortUnit(rts, 14, 0);
        ssSetInputPortUnit(rts, 15, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);
        ssSetInputPortIsContinuousQuantity(rts, 1, 0);
        ssSetInputPortIsContinuousQuantity(rts, 2, 0);
        ssSetInputPortIsContinuousQuantity(rts, 3, 0);
        ssSetInputPortIsContinuousQuantity(rts, 4, 0);
        ssSetInputPortIsContinuousQuantity(rts, 5, 0);
        ssSetInputPortIsContinuousQuantity(rts, 6, 0);
        ssSetInputPortIsContinuousQuantity(rts, 7, 0);
        ssSetInputPortIsContinuousQuantity(rts, 8, 0);
        ssSetInputPortIsContinuousQuantity(rts, 9, 0);
        ssSetInputPortIsContinuousQuantity(rts, 10, 0);
        ssSetInputPortIsContinuousQuantity(rts, 11, 0);
        ssSetInputPortIsContinuousQuantity(rts, 12, 0);
        ssSetInputPortIsContinuousQuantity(rts, 13, 0);
        ssSetInputPortIsContinuousQuantity(rts, 14, 0);
        ssSetInputPortIsContinuousQuantity(rts, 15, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }

        /* port 1 */
        {
          ssSetInputPortRequiredContiguous(rts, 1, 1);
          ssSetInputPortSignal(rts, 1,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 1, 1);
          ssSetInputPortWidth(rts, 1, 1);
        }

        /* port 2 */
        {
          ssSetInputPortRequiredContiguous(rts, 2, 1);
          ssSetInputPortSignal(rts, 2,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 2, 1);
          ssSetInputPortWidth(rts, 2, 1);
        }

        /* port 3 */
        {
          ssSetInputPortRequiredContiguous(rts, 3, 1);
          ssSetInputPortSignal(rts, 3,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 3, 1);
          ssSetInputPortWidth(rts, 3, 1);
        }

        /* port 4 */
        {
          ssSetInputPortRequiredContiguous(rts, 4, 1);
          ssSetInputPortSignal(rts, 4,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 4, 1);
          ssSetInputPortWidth(rts, 4, 1);
        }

        /* port 5 */
        {
          ssSetInputPortRequiredContiguous(rts, 5, 1);
          ssSetInputPortSignal(rts, 5,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 5, 1);
          ssSetInputPortWidth(rts, 5, 1);
        }

        /* port 6 */
        {
          ssSetInputPortRequiredContiguous(rts, 6, 1);
          ssSetInputPortSignal(rts, 6,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 6, 1);
          ssSetInputPortWidth(rts, 6, 1);
        }

        /* port 7 */
        {
          ssSetInputPortRequiredContiguous(rts, 7, 1);
          ssSetInputPortSignal(rts, 7,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 7, 1);
          ssSetInputPortWidth(rts, 7, 1);
        }

        /* port 8 */
        {
          ssSetInputPortRequiredContiguous(rts, 8, 1);
          ssSetInputPortSignal(rts, 8,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 8, 1);
          ssSetInputPortWidth(rts, 8, 1);
        }

        /* port 9 */
        {
          ssSetInputPortRequiredContiguous(rts, 9, 1);
          ssSetInputPortSignal(rts, 9,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 9, 1);
          ssSetInputPortWidth(rts, 9, 1);
        }

        /* port 10 */
        {
          ssSetInputPortRequiredContiguous(rts, 10, 1);
          ssSetInputPortSignal(rts, 10,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 10, 1);
          ssSetInputPortWidth(rts, 10, 1);
        }

        /* port 11 */
        {
          ssSetInputPortRequiredContiguous(rts, 11, 1);
          ssSetInputPortSignal(rts, 11,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 11, 1);
          ssSetInputPortWidth(rts, 11, 1);
        }

        /* port 12 */
        {
          ssSetInputPortRequiredContiguous(rts, 12, 1);
          ssSetInputPortSignal(rts, 12,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 12, 1);
          ssSetInputPortWidth(rts, 12, 1);
        }

        /* port 13 */
        {
          ssSetInputPortRequiredContiguous(rts, 13, 1);
          ssSetInputPortSignal(rts, 13,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 13, 1);
          ssSetInputPortWidth(rts, 13, 1);
        }

        /* port 14 */
        {
          ssSetInputPortRequiredContiguous(rts, 14, 1);
          ssSetInputPortSignal(rts, 14,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 14, 1);
          ssSetInputPortWidth(rts, 14, 1);
        }

        /* port 15 */
        {
          ssSetInputPortRequiredContiguous(rts, 15, 1);
          ssSetInputPortSignal(rts, 15,
                               &speedgoat_test_SN5659_R2020b_B.SineWave1_c);
          _ssSetInputPortNumDimensions(rts, 15, 1);
          ssSetInputPortWidth(rts, 15, 1);
        }
      }

      /* path info */
      ssSetModelName(rts, "Analog output1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO107 (1-2)/Analog output1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.params;
        ssSetSFcnParamsCount(rts, 7);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Analogoutput1_P7_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Analogoutput1_RWORK[0]);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Analogoutput1_IWORK);
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Analogoutput1_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn20.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 3);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Analogoutput1_RWORK
                   [0]);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Analogoutput1_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 2, 1);
        ssSetDWorkDataType(rts, 2,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 2, 0);
        ssSetDWork(rts, 2, &speedgoat_test_SN5659_R2020b_DW.Analogoutput1_PWORK);
      }

      /* registration */
      sg_IO107_da_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetInputPortConnected(rts, 1, 1);
      _ssSetInputPortConnected(rts, 2, 1);
      _ssSetInputPortConnected(rts, 3, 1);
      _ssSetInputPortConnected(rts, 4, 1);
      _ssSetInputPortConnected(rts, 5, 1);
      _ssSetInputPortConnected(rts, 6, 1);
      _ssSetInputPortConnected(rts, 7, 1);
      _ssSetInputPortConnected(rts, 8, 1);
      _ssSetInputPortConnected(rts, 9, 1);
      _ssSetInputPortConnected(rts, 10, 1);
      _ssSetInputPortConnected(rts, 11, 1);
      _ssSetInputPortConnected(rts, 12, 1);
      _ssSetInputPortConnected(rts, 13, 1);
      _ssSetInputPortConnected(rts, 14, 1);
      _ssSetInputPortConnected(rts, 15, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
      ssSetInputPortBufferDstPort(rts, 1, -1);
      ssSetInputPortBufferDstPort(rts, 2, -1);
      ssSetInputPortBufferDstPort(rts, 3, -1);
      ssSetInputPortBufferDstPort(rts, 4, -1);
      ssSetInputPortBufferDstPort(rts, 5, -1);
      ssSetInputPortBufferDstPort(rts, 6, -1);
      ssSetInputPortBufferDstPort(rts, 7, -1);
      ssSetInputPortBufferDstPort(rts, 8, -1);
      ssSetInputPortBufferDstPort(rts, 9, -1);
      ssSetInputPortBufferDstPort(rts, 10, -1);
      ssSetInputPortBufferDstPort(rts, 11, -1);
      ssSetInputPortBufferDstPort(rts, 12, -1);
      ssSetInputPortBufferDstPort(rts, 13, -1);
      ssSetInputPortBufferDstPort(rts, 14, -1);
      ssSetInputPortBufferDstPort(rts, 15, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S1>/Setup (sg_IO107_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[21];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn21.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn21.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn21.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [21]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[21]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [21]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [21]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [21]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [21]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[21]);
      }

      /* path info */
      ssSetModelName(rts, "Setup");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO107 (1-2)/Setup");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn21.params;
        ssSetSFcnParamsCount(rts, 11);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P1_Size_h);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P4_Size_l);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P9_Size_f);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup_P11_Size_i);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.Setup_RWORK[0]);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Setup_IWORK_j);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Setup_PWORK_d);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn21.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn21.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 3);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Setup_RWORK[0]);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Setup_IWORK_j);

        /* PWORK */
        ssSetDWorkWidth(rts, 2, 1);
        ssSetDWorkDataType(rts, 2,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 2, 0);
        ssSetDWork(rts, 2, &speedgoat_test_SN5659_R2020b_DW.Setup_PWORK_d);
      }

      /* registration */
      sg_IO107_setup_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S1>/Setup1 (sg_IO107_setup_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[22];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn22.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn22.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn22.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [22]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[22]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [22]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [22]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [22]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [22]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[22]);
      }

      /* path info */
      ssSetModelName(rts, "Setup1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO107 (1-2)/Setup1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn22.params;
        ssSetSFcnParamsCount(rts, 11);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Setup1_P11_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.Setup1_RWORK[0]);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Setup1_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Setup1_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn22.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn22.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 3);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Setup1_RWORK[0]);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Setup1_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 2, 1);
        ssSetDWorkDataType(rts, 2,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 2, 0);
        ssSetDWork(rts, 2, &speedgoat_test_SN5659_R2020b_DW.Setup1_PWORK);
      }

      /* registration */
      sg_IO107_setup_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S4>/LVDT read (sg_IO421_lvdt_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[23];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [23]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[23]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [23]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [23]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [23]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [23]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[23]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn23.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO421_LVDT_POS1));
        }
      }

      /* path info */
      ssSetModelName(rts, "LVDT read");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO421-1/LVDT read");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.LVDTread_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.LVDTread_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn23.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.LVDTread_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.LVDTread_PWORK);
      }

      /* registration */
      sg_IO421_lvdt_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S4>/LVDT read1 (sg_IO421_lvdt_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[24];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [24]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[24]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [24]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [24]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [24]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [24]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[24]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn24.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO421_LVDT_POS2));
        }
      }

      /* path info */
      ssSetModelName(rts, "LVDT read1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO421-1/LVDT read1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->LVDTread1_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.LVDTread1_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.LVDTread1_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn24.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.LVDTread1_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.LVDTread1_PWORK);
      }

      /* registration */
      sg_IO421_lvdt_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S4>/REF (sg_IO421_ref_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[25];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn25.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn25.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn25.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [25]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[25]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [25]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [25]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [25]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [25]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[25]);
      }

      /* path info */
      ssSetModelName(rts, "REF");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO421-1/REF");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn25.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->REF_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->REF_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->REF_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->REF_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->REF_P5_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.REF_RWORK[0]);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.REF_IWORK);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.REF_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn25.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn25.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 3);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 16);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.REF_RWORK[0]);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.REF_IWORK);

        /* PWORK */
        ssSetDWorkWidth(rts, 2, 1);
        ssSetDWorkDataType(rts, 2,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 2, 0);
        ssSetDWork(rts, 2, &speedgoat_test_SN5659_R2020b_DW.REF_PWORK);
      }

      /* registration */
      sg_IO421_ref_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.001);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 1;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2  (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[26];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [26]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[26]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [26]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [26]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [26]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [26]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[26]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn26.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev2_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn26.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev2_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S12>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[27];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [27]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[27]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [27]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [27]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [27]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [27]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[27]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn27.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn27.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 1/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn27.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S12>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[28];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [28]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[28]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [28]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [28]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [28]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [28]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[28]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn28.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn28.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode5));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 1/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn28.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S12>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[29];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [29]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[29]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [29]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [29]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [29]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [29]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[29]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn29.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn29.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 1/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn29.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S12>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[30];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [30]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[30]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [30]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [30]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [30]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [30]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[30]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn30.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn30.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 1/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn30.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 1 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[31];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [31]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[31]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [31]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [31]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [31]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [31]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[31]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn31.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev21));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev21_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev21_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev21_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev21_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev21_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev21_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn31.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev21_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S20>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[32];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [32]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[32]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [32]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [32]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [32]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [32]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[32]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn32.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn32.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_m));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 2/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_a);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_l);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_h);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_o);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn32.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_o);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S20>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[33];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [33]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[33]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [33]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [33]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [33]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [33]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[33]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn33.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn33.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 2/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *) &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK);
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn33.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S20>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[34];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [34]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[34]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [34]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [34]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [34]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [34]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[34]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn34.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn34.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 2/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_g);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_e);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_c);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_f);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_c[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn34.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_f);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_c[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S20>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[35];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [35]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[35]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [35]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [35]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [35]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [35]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[35]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn35.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn35.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 2/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_b);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_m);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_d);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn35.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_d);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 8 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[36];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [36]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[36]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [36]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [36]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [36]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [36]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[36]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn36.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev28));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 8");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 8");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev28_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev28_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev28_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev28_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev28_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev28_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn36.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev28_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S27>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[37];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [37]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[37]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [37]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [37]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [37]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [37]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[37]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn37.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn37.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 9/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_j);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_l[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn37.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_l[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S27>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[38];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [38]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[38]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [38]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [38]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [38]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [38]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[38]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn38.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn38.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode5_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 9/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P15_Size_g);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK_h);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK_i[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn38.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK_h);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK_i[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S27>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[39];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [39]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[39]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [39]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [39]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [39]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [39]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[39]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn39.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn39.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 9/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_l);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_b);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_j[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn39.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_b);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_j[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S27>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[40];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [40]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[40]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [40]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [40]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [40]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [40]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[40]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn40.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn40.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 9/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_h);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_h);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_f);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_e);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_l);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn40.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_l);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 9 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[41];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [41]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[41]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [41]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [41]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [41]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [41]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[41]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn41.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev29));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 9");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 9");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev29_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev29_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev29_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev29_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev29_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev29_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn41.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev29_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S13>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[42];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [42]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[42]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [42]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [42]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [42]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [42]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[42]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn42.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn42.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_g));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 10/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_e);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_kc);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_i);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_o[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn42.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_i);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_o[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S13>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[43];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [43]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[43]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [43]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [43]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [43]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [43]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[43]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn43.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn43.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 10/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_k);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_e);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_o);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_g);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_e);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_l[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn43.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_e);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_l[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S13>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[44];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [44]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[44]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [44]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [44]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [44]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [44]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[44]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn44.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn44.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 10/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_lh);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_cd);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_af);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_cx);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_i);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_gs);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_p);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_o);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_l5);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_b5);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_h[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn44.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_b5);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_h[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S13>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[45];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [45]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[45]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [45]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [45]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [45]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [45]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[45]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn45.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn45.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 10/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_b0);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_c3);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_d);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_n);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_f);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn45.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_f);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 10 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[46];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [46]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[46]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [46]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [46]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [46]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [46]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[46]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn46.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev210));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 10");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 10");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev210_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev210_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev210_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev210_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev210_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev210_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn46.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev210_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S14>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[47];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [47]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[47]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [47]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [47]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [47]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [47]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[47]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn47.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn47.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 11/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_eu);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_l);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_h);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_ea);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_g);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_g);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_h[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn47.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_g);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_h[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S14>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[48];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [48]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[48]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [48]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [48]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [48]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [48]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[48]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn48.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn48.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 11/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_p);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_n);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_kj);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_d);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_j2);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_h);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_k);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_p[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn48.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_k);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_p[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S14>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[49];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [49]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[49]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [49]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [49]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [49]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [49]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[49]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn49.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn49.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 11/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_g1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_op);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_gf);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_g);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_h);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn49.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_h);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S14>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[50];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [50]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[50]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [50]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [50]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [50]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [50]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[50]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn50.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn50.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 11/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_cm);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_ni);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_oc);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_my);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_o);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_n);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_j[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn50.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_n);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_j[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 11 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[51];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [51]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[51]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [51]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [51]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [51]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [51]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[51]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn51.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev211));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 11");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 11");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev211_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev211_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev211_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev211_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev211_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev211_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn51.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev211_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S15>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[52];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [52]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[52]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [52]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [52]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [52]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [52]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[52]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn52.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn52.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 12/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_lf);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_hx);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_dc);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_hh);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_kh);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_kd);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_pj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_m);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_d);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_l);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_e[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn52.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_l);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_e[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S15>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[53];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [53]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[53]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [53]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [53]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [53]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [53]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[53]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn53.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn53.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_j2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 12/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_kj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_od);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_k);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_l);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_a[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn53.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_l);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_a[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S15>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[54];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [54]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[54]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [54]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [54]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [54]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [54]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[54]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn54.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn54.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_m));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 12/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_kw);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_go);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_ma);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_ls);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_i);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_g);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_a);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn54.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_a);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S15>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[55];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [55]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[55]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [55]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [55]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [55]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [55]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[55]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn55.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn55.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 12/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_j0);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_o);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_n3);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_d0);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_g);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_e);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_k[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn55.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_k[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 12 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[56];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [56]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[56]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [56]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [56]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [56]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [56]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[56]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn56.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev212));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 12");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 12");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev212_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev212_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev212_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev212_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev212_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev212_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn56.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev212_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S16>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[57];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [57]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[57]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [57]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [57]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [57]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [57]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[57]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn57.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn57.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 13/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_po);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_ng);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_pv);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_hy);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_lk);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_ot);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_a);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_e);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_gr);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_i[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn57.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_gr);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_i[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S16>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[58];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [58]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[58]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [58]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [58]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [58]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [58]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[58]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn58.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn58.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode5_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 13/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P2_Size_b);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P9_Size_g);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P12_Size_or);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P16_Size_f);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK_k[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn58.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK_k[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S16>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[59];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [59]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[59]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [59]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [59]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [59]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [59]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[59]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn59.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn59.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 13/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_h);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_ns);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_kg);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_d);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_ki);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_l);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_p);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_p);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_e);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_e[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn59.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_e);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_e[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S16>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[60];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [60]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[60]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [60]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [60]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [60]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [60]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[60]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn60.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn60.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 13/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_oh);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_k);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_ip);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_ph);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_mw);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_e1);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_ci);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_mw[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn60.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_ci);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_mw[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 13 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[61];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [61]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[61]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [61]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [61]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [61]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [61]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[61]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn61.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev213));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 13");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 13");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev213_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev213_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev213_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev213_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev213_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev213_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn61.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev213_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S17>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[62];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [62]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[62]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [62]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [62]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [62]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [62]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[62]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn62.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn62.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_my));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 14/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_pu);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_m2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_ah);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_jz);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_dg);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_ez);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_ma);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_lj);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_k);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_p);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn62.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_p);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S17>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[63];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [63]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[63]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [63]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [63]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [63]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [63]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[63]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn63.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn63.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 14/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_kc);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_n);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_lc[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn63.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_n);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_lc[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S17>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[64];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [64]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[64]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [64]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [64]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [64]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [64]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[64]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn64.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn64.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 14/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_gw);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_bw);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_au);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_ci);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_ob);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_h1);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_ga);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_h);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_gc);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_p[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn64.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_p[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S17>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[65];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [65]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[65]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [65]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [65]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [65]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [65]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[65]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn65.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn65.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_c1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 14/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_ed);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_jy);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_am);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_aj);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_eb);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_g);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_fq);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_a);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_ex);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_f1);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_me[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn65.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_f1);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_me[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 14 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[66];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [66]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[66]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [66]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [66]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [66]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [66]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[66]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn66.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev214));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 14");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 14");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev214_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev214_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev214_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev214_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev214_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev214_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn66.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev214_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S18>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[67];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [67]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[67]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [67]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [67]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [67]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [67]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[67]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn67.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn67.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 15/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_h);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_om);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_c0);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_k2);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_kp);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_ao);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_o);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_he);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_m);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn67.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_m);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S18>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[68];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [68]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[68]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [68]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [68]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [68]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [68]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[68]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn68.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn68.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 15/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_g);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_i);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_fe);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_ht);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_i);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_a);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_c);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_f);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn68.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_f);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S18>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[69];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [69]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[69]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [69]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [69]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [69]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [69]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[69]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn69.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn69.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_cq));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 15/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_hr);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_nu);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_ix);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_oo);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_iy);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_f4);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_hi);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_a);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_ag);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_cp[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn69.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_ag);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_cp[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S18>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[70];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [70]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[70]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [70]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [70]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [70]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [70]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[70]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn70.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn70.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_oi));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 15/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_ev);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_a4);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_nl);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_mf);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_fu);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_m);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_i);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_f5[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn70.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_i);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_f5[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 15 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[71];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [71]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[71]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [71]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [71]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [71]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [71]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[71]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn71.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev215));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 15");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 15");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev215_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev215_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev215_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev215_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev215_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev215_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn71.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev215_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S19>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[72];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [72]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[72]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [72]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [72]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [72]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [72]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[72]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn72.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn72.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_al));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 16/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_ds);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_pi);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_gh);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_gy);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_ed);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_el);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_oz);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_eo);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_b3);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_g3);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_pr);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_hs[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn72.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_pr);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_hs[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S19>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[73];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [73]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[73]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [73]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [73]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [73]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [73]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[73]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn73.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn73.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 16/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_ka);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_aj);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_pl);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_ma);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_oj);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_gj);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_i);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn73.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_i);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S19>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[74];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [74]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[74]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [74]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [74]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [74]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [74]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[74]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn74.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn74.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_ou));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 16/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_pn);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_oo);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_du);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_bf);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_pf);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_pw);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_gy);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_pi);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_d);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_pe);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_ct);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_a[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn74.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_ct);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_a[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S19>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[75];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [75]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[75]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [75]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [75]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [75]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [75]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[75]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn75.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn75.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 16/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_ct);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_ku);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_oq);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_cx);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_i);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_gk);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_lj);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_fa);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_g[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn75.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_fa);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_g[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 2 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[76];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [76]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[76]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [76]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [76]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [76]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [76]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[76]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn76.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev22));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev22_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev22_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev22_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev22_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev22_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev22_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn76.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev22_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S21>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[77];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [77]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[77]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [77]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [77]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [77]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [77]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[77]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn77.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn77.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 3/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_l2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_js);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_f);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_ex);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_o3);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_ir);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_cv);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_f);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_h);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_o2[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn77.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_h);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_o2[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S21>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[78];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [78]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[78]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [78]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [78]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [78]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [78]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[78]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn78.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn78.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_ba));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 3/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_gy);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_au);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_jy);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_f);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_pu);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_m);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_cz);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_iz);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn78.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_iz);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S21>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[79];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [79]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[79]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [79]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [79]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [79]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [79]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[79]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn79.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn79.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 3/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_ly);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_ku);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_l5);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_cz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_in);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_gs);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_a5);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_cq[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn79.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_a5);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_cq[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S21>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[80];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [80]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[80]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [80]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [80]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [80]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [80]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[80]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn80.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn80.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 3/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_lm);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_fz);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_fq);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_dm);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_nv);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_ci3);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_o[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn80.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_ci3);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_o[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 3 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[81];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [81]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[81]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [81]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [81]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [81]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [81]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[81]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn81.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev23));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev23_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev23_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev23_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev23_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev23_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev23_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn81.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev23_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S22>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[82];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [82]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[82]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [82]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [82]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [82]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [82]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[82]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn82.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn82.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_pf));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 4/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_mq);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_hc);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_fk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_b);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_nt);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_a);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_hq);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_i);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_c);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_b);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_lf[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn82.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_b);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_lf[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S22>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[83];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [83]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[83]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [83]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [83]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [83]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [83]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[83]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn83.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn83.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 4/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_k1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_iy);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_f1);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_jb);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_kv);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_gw);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_eu);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_d3);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_m4);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_n);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_a);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_j[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn83.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_j[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S22>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[84];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [84]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[84]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [84]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [84]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [84]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [84]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[84]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn84.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn84.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 4/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_nx);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_ab);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_go);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_gm);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_ia);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_po);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_bf);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn84.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_bf);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S22>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[85];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [85]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[85]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [85]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [85]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [85]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [85]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[85]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn85.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn85.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_ff));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 4/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_nn);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_cd);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_pb);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_ja);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_fq);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_dt);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_mz);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_at);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_a);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_j);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_g);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_l[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn85.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_g);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_l[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 4 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[86];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [86]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[86]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [86]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [86]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [86]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [86]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[86]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn86.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev24));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 4");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev24_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev24_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev24_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev24_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev24_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev24_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn86.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev24_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S23>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[87];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [87]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[87]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [87]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [87]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [87]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [87]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[87]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn87.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn87.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_io));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 5/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_i1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_h2);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_gx);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_hj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_in);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_cm);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_k);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_c[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn87.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_k);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_c[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S23>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[88];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [88]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[88]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [88]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [88]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [88]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [88]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[88]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn88.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn88.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode5_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 5/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P2_Size_py);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P6_Size_ac);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P11_Size_ju);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P14_Size_p);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P15_Size_l);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode5_P16_Size_d);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK_d);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn88.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode5_RWORK_d);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode5_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S23>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[89];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [89]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[89]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [89]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [89]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [89]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [89]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[89]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn89.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn89.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_ny));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 5/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_pm);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_iu);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_l);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_gf);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_ka);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_ej);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_jl);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_ho);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_j);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_cb);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_pb[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn89.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_cb);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_pb[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S23>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[90];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [90]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[90]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [90]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [90]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [90]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [90]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[90]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn90.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn90.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 5/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_jb);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_j4);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_nv);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_jp);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_cj);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_lm);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_fd);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_kd);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_cu);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_d);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_p);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_ms[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn90.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_p);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_ms[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 5 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[91];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [91]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[91]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [91]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [91]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [91]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [91]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[91]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn91.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev25));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 5");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev25_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev25_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev25_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev25_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev25_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev25_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn91.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev25_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S24>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[92];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [92]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[92]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [92]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [92]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [92]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [92]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[92]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn92.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn92.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_gi));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 6/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_kc);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_ap);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_d0);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_au);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_jv);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_kb);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_a2);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_ml);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_dc);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_c1);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_ep[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn92.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_c1);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_ep[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S24>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[93];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [93]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[93]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [93]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [93]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [93]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [93]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[93]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn93.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn93.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 6/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_oq);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_ik);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_az);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_n);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_ke);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_k[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn93.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_ke);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_k[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S24>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[94];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [94]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[94]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [94]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [94]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [94]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [94]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[94]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn94.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn94.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_o4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 6/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_hc);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_n4);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_g4);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_j4);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_oo);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_ct);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_ly);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_pw);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_j);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_p3);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_h0);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_n[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn94.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_h0);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_n[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S24>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[95];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [95]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[95]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [95]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [95]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [95]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [95]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[95]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn95.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn95.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_f4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 6/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_jo);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_cs);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_iv);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_hq);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_op);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_ce);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_j);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_ok);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_lk);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_p);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_h);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_b);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_n[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn95.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_b);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_n[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 6 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[96];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [96]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[96]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [96]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [96]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [96]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [96]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[96]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn96.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev26));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 6");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 6");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev26_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev26_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev26_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev26_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev26_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev26_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn96.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev26_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S25>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[97];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [97]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[97]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [97]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [97]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [97]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [97]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[97]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn97.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn97.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_p1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 7/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_k0);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_az);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_h);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_f5);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_ih);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_pk);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_jo);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_cd);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_i3);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_d0);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_ea);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_e);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_ji);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_kw);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_f0[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn97.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_kw);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_f0[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S25>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[98];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [98]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[98]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [98]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [98]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [98]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [98]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[98]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn98.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn98.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 7/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_pp);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_o5);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_bk);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_du);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_dq);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_l2);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_p);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_p);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_m2[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn98.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_p);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_m2[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S25>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[99];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [99]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2[99]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [99]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [99]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [99]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [99]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo[99]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn99.inputPortUnits[0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn99.outputPortInfo[0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_lc));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 7/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_gj);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_gw);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_gj);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_gw);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_b);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_f);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_lr);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_bu);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_oq);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_jy);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_b0);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_ei[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn99.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_b0);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_ei[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S25>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[100];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [100]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [100]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [100]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [100]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [100]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [100]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [100]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn100.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 7/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_jq);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_fy);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_hm);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_df);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_l);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_me);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_ad);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_g3);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_g1);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_l);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_od);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_h);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_k);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_f1y);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_lq[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn100.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_f1y);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_lq[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Receive v2 7 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[101];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [101]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [101]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [101]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [101]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [101]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [101]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [101]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2020b_B.Receivev27));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 7");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Receive v2 7");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev27_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev27_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev27_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev27_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Receivev27_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.Receivev27_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn101.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Receivev27_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S26>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[102];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [102]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [102]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [102]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [102]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [102]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [102]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [102]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn102.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode1_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 8/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P5_Size_f53);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P7_Size_ff);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P8_Size_ft);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P9_Size_lj);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P10_Size_gx);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P14_Size_g2);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P15_Size_oo);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode1_P16_Size_b4);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_n);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_b0[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn102.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode1_RWORK_n);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode1_IWORK_b0[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S26>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[103];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [103]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [103]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [103]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [103]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [103]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [103]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [103]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn103.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode2_nz));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 8/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P2_Size_mr);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P4_Size_mn);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P5_Size_pd);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P15_Size_by);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode2_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_kk);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_d[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn103.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode2_RWORK_kk);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode2_IWORK_d[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S26>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[104];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [104]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [104]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [104]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [104]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [104]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [104]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [104]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn104.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode3_mj));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 8/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P1_Size_hrb);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P2_Size_l5);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P6_Size_c);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P7_Size_jq);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P8_Size_bfa);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P9_Size_hi);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P10_Size_j4);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P11_Size_i0);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P12_Size_fv);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P13_Size_gn);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P15_Size_l);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode3_P16_Size_o);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_g);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_o[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn104.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode3_RWORK_g);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode3_IWORK_o[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S26>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[105];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [105]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [105]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [105]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [105]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [105]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [105]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [105]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn105.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Decode4_m));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Decode Channel 8/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P1_Size_nz);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P2_Size_c3);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P3_Size_b3);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P4_Size_dc);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P6_Size_as);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P7_Size_c2);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P8_Size_fz);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P12_Size_nx);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P13_Size_kw);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P14_Size_pp);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P15_Size_ki);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Decode4_P16_Size_mt);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_e);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_e[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn105.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Decode4_RWORK_e);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Decode4_IWORK_e[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S28>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[106];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [106]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [106]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [106]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [106]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [106]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [106]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [106]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn106.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 1/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn106.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S28>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[107];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [107]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [107]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [107]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [107]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [107]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [107]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [107]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn107.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode5));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 1/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn107.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S28>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[108];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [108]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [108]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [108]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [108]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [108]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [108]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [108]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn108.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, &speedgoat_test_SN5659_R2020b_B.Sinewave);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 1/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn108.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S28>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[109];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [109]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [109]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [109]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [109]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [109]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [109]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [109]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn109.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 1/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn109.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2  (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[110];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [110]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [110]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [110]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [110]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [110]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [110]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [110]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn110.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode5;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode2;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv2_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn110.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv2_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S29>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[111];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [111]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [111]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [111]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [111]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [111]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [111]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [111]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn111.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_c);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 10/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn111.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_d);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S29>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[112];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [112]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [112]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [112]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [112]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [112]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [112]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [112]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn112.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_h);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 10/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn112.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_n);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_e);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S29>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[113];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [113]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [113]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [113]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [113]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [113]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [113]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [113]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn113.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_o);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 10/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn113.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_g);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S29>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[114];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [114]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [114]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [114]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [114]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [114]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [114]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [114]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn114.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_g);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 10/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn114.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 9 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[115];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [115]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [115]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [115]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [115]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [115]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [115]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [115]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn115.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_b;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_p;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_i;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 9");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 9");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv29_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv29_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv29_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv29_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn115.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv29_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S30>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[116];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [116]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [116]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [116]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [116]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [116]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [116]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [116]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn116.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 11/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn116.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_h5);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_bc);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_g);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S30>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[117];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [117]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [117]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [117]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [117]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [117]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [117]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [117]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn117.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_e);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 11/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn117.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_d);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_e);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S30>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[118];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [118]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [118]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [118]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [118]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [118]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [118]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [118]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn118.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 11/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn118.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_cj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_c);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S30>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[119];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [119]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [119]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [119]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [119]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [119]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [119]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [119]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn119.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_i);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 11/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn119.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 10 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[120];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [120]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [120]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [120]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [120]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [120]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [120]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [120]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn120.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_f;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_f;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_b;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_i;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 10");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 10");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv210_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv210_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv210_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv210_PWORK
                 [0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn120.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv210_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S31>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[121];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [121]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [121]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [121]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [121]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [121]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [121]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [121]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn121.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_b);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 12/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn121.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_b);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_b);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_nr);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S31>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[122];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [122]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [122]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [122]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [122]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [122]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [122]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [122]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn122.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_j);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 12/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn122.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_bm);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_g);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S31>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[123];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [123]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [123]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [123]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [123]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [123]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [123]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [123]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn123.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_k);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 12/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn123.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_p);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_lh);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_fe);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_j);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S31>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[124];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [124]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [124]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [124]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [124]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [124]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [124]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [124]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn124.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 12/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn124.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_e);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_hd);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_m);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 11 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[125];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [125]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [125]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [125]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [125]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [125]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [125]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [125]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn125.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_k;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_i;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_o;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_c;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 11");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 11");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv211_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv211_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv211_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv211_PWORK
                 [0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn125.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv211_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S32>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[126];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [126]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [126]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [126]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [126]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [126]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [126]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [126]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn126.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_pz);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 13/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn126.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_o);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_cr);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_a);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_ci);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S32>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[127];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [127]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [127]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [127]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [127]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [127]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [127]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [127]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn127.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode5_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 13/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn127.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S32>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[128];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [128]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [128]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [128]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [128]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [128]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [128]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [128]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn128.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 13/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn128.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_p5);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_aw);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_k);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S32>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[129];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [129]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [129]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [129]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [129]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [129]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [129]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [129]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn129.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 13/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn129.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_i);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_da);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_m);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_bk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_j);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 12 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[130];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [130]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [130]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [130]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [130]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [130]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [130]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [130]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn130.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_l;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode5_d;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_p;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode2_j;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 12");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 12");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv212_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv212_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv212_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv212_PWORK
                 [0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn130.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv212_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S33>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[131];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [131]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [131]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [131]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [131]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [131]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [131]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [131]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn131.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 14/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn131.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_n5);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_d2);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_kw);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_ke);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_o);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S33>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[132];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [132]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [132]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [132]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [132]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [132]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [132]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [132]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn132.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_o);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_fi));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 14/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn132.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_f);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_n1);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_h);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S33>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[133];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [133]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [133]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [133]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [133]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [133]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [133]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [133]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn133.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_g);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 14/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn133.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_g);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_e);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S33>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[134];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [134]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [134]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [134]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [134]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [134]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [134]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [134]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn134.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_gm);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_g));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 14/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn134.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_b1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_jo);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_mv);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_a);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 13 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[135];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [135]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [135]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [135]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [135]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [135]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [135]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [135]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn135.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_p;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_fi;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_f;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_g;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 13");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 13");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv213_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv213_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv213_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv213_PWORK
                 [0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn135.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv213_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S34>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[136];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [136]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [136]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [136]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [136]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [136]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [136]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [136]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn136.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_m);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_pb));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 15/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn136.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_fg);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_kv);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_j);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S34>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[137];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [137]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [137]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [137]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [137]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [137]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [137]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [137]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn137.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 15/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn137.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_id);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_b);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_c);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_no);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_b);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_m3);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_hn);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S34>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[138];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [138]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [138]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [138]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [138]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [138]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [138]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [138]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn138.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_kh);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 15/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn138.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_ab);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_m);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_iu);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_ck);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_cy);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_gk);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_h);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S34>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[139];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [139]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [139]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [139]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [139]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [139]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [139]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [139]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn139.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_ga);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 15/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn139.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_kh);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_d4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_c);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 14 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[140];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [140]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [140]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [140]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [140]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [140]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [140]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [140]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn140.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_pb;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_h;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_l;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_l;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 14");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 14");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv214_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv214_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv214_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv214_PWORK
                 [0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn140.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv214_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S35>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[141];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [141]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [141]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [141]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [141]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [141]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [141]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [141]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn141.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_br);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_pbz));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 16/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn141.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_he);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_kq);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_dc);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_f);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_k);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S35>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[142];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [142]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [142]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [142]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [142]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [142]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [142]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [142]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn142.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_jr);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_hc));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 16/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn142.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_ch);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_dy);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_lk);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_f);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_a);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_m);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S35>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[143];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [143]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [143]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [143]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [143]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [143]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [143]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [143]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn143.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_a);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_ou));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 16/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn143.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_ng);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_om);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_cj);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_lf);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_me);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_n1);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_m);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S35>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[144];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [144]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [144]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [144]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [144]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [144]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [144]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [144]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn144.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 16/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn144.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_i);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_ma);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_d);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_gs);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_e);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 15 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[145];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [145]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [145]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [145]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [145]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [145]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [145]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [145]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn145.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_pbz;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_hc;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_ou;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_p;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 15");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 15");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv215_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv215_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv215_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv215_PWORK
                 [0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn145.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv215_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S36>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[146];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [146]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [146]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [146]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [146]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [146]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [146]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [146]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn146.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_e);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 2/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn146.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_ew);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_ai);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_kf);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_jp);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S36>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[147];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [147]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [147]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [147]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [147]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [147]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [147]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [147]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn147.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_hu);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_fb));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 2/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn147.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_k2);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_e0);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_l4);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_ev);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_po);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_nz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_l);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_c);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S36>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[148];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [148]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [148]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [148]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [148]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [148]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [148]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [148]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn148.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_o5);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 2/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn148.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_py);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_l);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_cd);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_ek);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_mz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_fe);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_lo);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_c3);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S36>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[149];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [149]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [149]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [149]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [149]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [149]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [149]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [149]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn149.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_l);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 2/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn149.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_jp);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_cg);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_d4);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_k);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_k1);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_lj);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_hf);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 1 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[150];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [150]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [150]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [150]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [150]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [150]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [150]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [150]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn150.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_h;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_fb;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_d;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_n;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv21_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv21_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv21_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv21_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn150.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv21_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S37>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[151];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [151]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [151]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [151]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [151]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [151]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [151]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [151]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn151.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_f0));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 3/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn151.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_jx);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_ke);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_h);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_c1);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_js);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_f2);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_mg);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_pu);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_ot);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_kz);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_bs);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S37>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[152];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [152]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [152]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [152]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [152]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [152]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [152]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [152]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn152.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_dd);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_iu));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 3/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn152.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_id);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_lf);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_e3);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_m1);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_a);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S37>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[153];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [153]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [153]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [153]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [153]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [153]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [153]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [153]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn153.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_oh);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_ik));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 3/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn153.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_jw);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_i5);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_f);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_j1);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_fl);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_mh);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_of);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S37>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[154];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [154]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [154]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [154]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [154]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [154]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [154]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [154]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn154.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_a);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_ix));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 3/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn154.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_ff);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_fk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_cz);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 2 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[155];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [155]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [155]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [155]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [155]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [155]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [155]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [155]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn155.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_f0;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_iu;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_ik;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_ix;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv22_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv22_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv22_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv22_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn155.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv22_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S38>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[156];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [156]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [156]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [156]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [156]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [156]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [156]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [156]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn156.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_g);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 4/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn156.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_ld);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_d4);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_mc);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_n);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_hk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_ot);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_l1);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_cm);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_p);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S38>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[157];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [157]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [157]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [157]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [157]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [157]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [157]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [157]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn157.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 4/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn157.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_ky);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_j4);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_cp);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_eb);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_jm);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S38>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[158];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [158]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [158]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [158]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [158]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [158]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [158]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [158]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn158.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_g));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 4/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn158.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_gs);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_ow);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_g2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_h3);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_ik);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_gl);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_di);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_l);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S38>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[159];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [159]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [159]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [159]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [159]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [159]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [159]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [159]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn159.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_gh);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 4/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn159.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_ch);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_ob);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_jn);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_bf);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_os);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_ov);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_cr);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_i);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 3 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[160];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [160]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [160]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [160]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [160]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [160]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [160]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [160]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn160.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_c;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_o;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_g;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_j;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv23_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv23_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv23_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv23_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn160.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv23_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S39>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[161];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [161]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [161]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [161]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [161]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [161]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [161]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [161]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn161.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_i);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_e));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 5/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn161.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_k1);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_k);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_p);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_ap);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_g);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_ii);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_kr);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_g0);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_b1);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S39>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[162];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [162]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [162]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [162]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [162]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [162]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [162]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [162]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn162.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_hb);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode5_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 5/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn162.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P1_Size_lo);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P2_Size_e);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P15_Size_a);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S39>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[163];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [163]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [163]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [163]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [163]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [163]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [163]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [163]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn163.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_bv));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 5/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn163.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_i2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_fu);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_g2);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_pf);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_i2);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_ap);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_ik);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_pv);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_b4);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_ck);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_k1);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_d);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S39>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[164];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [164]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [164]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [164]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [164]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [164]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [164]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [164]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn164.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_nb);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 5/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn164.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_cm);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_aj);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_lm);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_j);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_om);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_iz);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 4 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[165];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [165]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [165]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [165]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [165]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [165]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [165]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [165]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn165.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_e;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode5_a;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_bv;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode2_l;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 4");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv24_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv24_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv24_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv24_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn165.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv24_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S40>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[166];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [166]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [166]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [166]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [166]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [166]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [166]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [166]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn166.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_i2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 6/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn166.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_ko);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_cp);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_fd);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_b4);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_kz);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_mu);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_mo);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_iv);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_e4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_d);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S40>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[167];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [167]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [167]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [167]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [167]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [167]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [167]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [167]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn167.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_pt));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 6/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn167.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_cl);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_o3);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_nh);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_ba);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_o);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_n5);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_pn);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_iz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_a);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_eo);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S40>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[168];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [168]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [168]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [168]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [168]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [168]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [168]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [168]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn168.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_fe);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 6/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn168.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_o2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_hh);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_ll);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_aa);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_cz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_fn);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S40>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[169];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [169]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [169]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [169]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [169]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [169]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [169]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [169]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn169.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_cp));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 6/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn169.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_ne);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_bt);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_n1);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_hl);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_kf);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_d);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_k4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_b5);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 5 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[170];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [170]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [170]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [170]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [170]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [170]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [170]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [170]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn170.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_d;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_pt;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_k;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_cp;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 5");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv25_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv25_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv25_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv25_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn170.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv25_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S41>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[171];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [171]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [171]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [171]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [171]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [171]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [171]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [171]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn171.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 7/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn171.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_p2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_mq);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_bs);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_e1);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_ie);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_lo);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_hn);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S41>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[172];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [172]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [172]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [172]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [172]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [172]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [172]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [172]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn172.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_i);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_ik));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 7/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn172.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_g5);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_fc);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_fm);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_ol);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_pu);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_jo);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_my);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_hk);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_d0);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_l0);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_my);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S41>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[173];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [173]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [173]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [173]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [173]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [173]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [173]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [173]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn173.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_ff);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_dc));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 7/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn173.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_kv);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_nd);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_n);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_e5);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_e);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_o4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_p);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S41>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[174];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [174]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [174]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [174]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [174]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [174]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [174]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [174]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn174.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_fw);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_cn));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 7/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn174.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_j2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_aw);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_em);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_ki);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_j);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_dq);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_b);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_de);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_ct);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 6 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[175];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [175]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [175]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [175]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [175]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [175]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [175]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [175]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn175.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_i;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_ik;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_dc;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_cn;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 6");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 6");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv26_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv26_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv26_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv26_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn175.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv26_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S42>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[176];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [176]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [176]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [176]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [176]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [176]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [176]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [176]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn176.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_n4);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_ff));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 8/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn176.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_fv);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_bm);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_fz);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_cq);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_bs);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_d0);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S42>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[177];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [177]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [177]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [177]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [177]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [177]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [177]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [177]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn177.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_k);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_o4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 8/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn177.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_bq);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_op);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_by);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_e3);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_gi);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_kl);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_aa);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_jn);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_bj);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_ce);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_l5);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_fi);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_lu);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_h2);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S42>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[178];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [178]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [178]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [178]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [178]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [178]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [178]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [178]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn178.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_m);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_dp));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 8/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn178.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_fp);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_hj);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_e3);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_hc);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_fq);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_fs);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_gx);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S42>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[179];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [179]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [179]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [179]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [179]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [179]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [179]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [179]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn179.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_j);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode4_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 8/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn179.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P1_Size_mw);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P4_Size_av);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P6_Size_dj);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P7_Size_kf);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P8_Size_aa);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P10_Size_hz);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P13_Size_ff);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode4_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 7 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[180];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [180]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [180]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [180]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [180]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [180]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [180]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [180]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn180.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_ff;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode2_o4;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_dp;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode4_a;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 7");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 7");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv27_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv27_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv27_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv27_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn180.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv27_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S43>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[181];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [181]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [181]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [181]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [181]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [181]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [181]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [181]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn181.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Randomnumber_j);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode1_kq));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 9/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn181.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P1_Size_fb);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P2_Size_d2);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P3_Size_p2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P5_Size_kq);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P7_Size_py);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P9_Size_g4);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P10_Size_d2);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P11_Size_cy);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P12_Size_mr);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P14_Size_bc);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode1_P15_Size_ox);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S43>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[182];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [182]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [182]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [182]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [182]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [182]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [182]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [182]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn182.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_dw);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode5_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 9/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn182.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P5_Size_b);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode5_P15_Size_o);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S43>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[183];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [183]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [183]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [183]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [183]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [183]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [183]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [183]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn183.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.Sinewave_ao);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode3_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 9/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn183.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P2_Size_cb);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P3_Size_ne);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P5_Size_px);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P6_Size_h);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P7_Size_lt);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P8_Size_ng);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P9_Size_aa);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P10_Size_e0);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P11_Size_nw);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P12_Size_je);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P13_Size_m3);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P14_Size_o1);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode3_P15_Size_kn);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S43>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[184];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [184]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [184]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [184]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [184]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [184]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [184]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [184]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn184.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion1_e);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.Encode2_o3));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2020b/IO682/Encode Channel 9/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn184.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P3_Size_ed);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P4_Size_eu);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P5_Size_az);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P7_Size_il);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P8_Size_b5);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P9_Size_jc);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P10_Size_ka);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P11_Size_jj);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P12_Size_lg);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P13_Size_i3);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Encode2_P15_Size_k);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S7>/Send v2 8 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[185];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [185]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [185]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [185]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [185]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [185]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [185]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [185]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn185.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.Encode1_kq;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2020b_B.Encode5_n;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2020b_B.Encode3_h;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2020b_B.Encode2_o3;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 8");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO682/Send v2 8");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv28_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv28_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Sendv28_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Sendv28_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn185.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Sendv28_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 2;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Read  (sg_serial_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[186];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [186]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [186]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [186]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [186]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [186]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [186]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [186]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 65);
          ssSetOutputPortSignal(rts, 0, ((uint32_T *)
            speedgoat_test_SN5659_R2020b_B.Read));
        }
      }

      /* path info */
      ssSetModelName(rts, "Read ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Read ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.params;
        ssSetSFcnParamsCount(rts, 9);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read_P9_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Read_IWORK_a[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Read_PWORK_g);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn186.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Read_IWORK_a[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Read_PWORK_g);
      }

      /* registration */
      sg_serial_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Decode (slasciidecode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[187];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [187]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [187]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [187]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [187]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [187]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [187]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [187]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn187.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.FIFOread);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 65);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO503_SerialIN_CH1));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Decode");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Decode");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode_P3_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode_IWORK[0]);
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn187.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 4);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode_PWORK[0]);
      }

      /* registration */
      slasciidecode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 65);
      ssSetInputPortDataType(rts, 0, SS_UINT8);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Read 1 (sg_serial_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[188];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [188]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [188]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [188]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [188]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [188]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [188]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [188]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 65);
          ssSetOutputPortSignal(rts, 0, ((uint32_T *)
            speedgoat_test_SN5659_R2020b_B.Read1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Read 1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Read 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.params;
        ssSetSFcnParamsCount(rts, 9);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read1_P9_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Read1_IWORK[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Read1_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn188.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Read1_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Read1_PWORK);
      }

      /* registration */
      sg_serial_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Decode1 (slasciidecode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[189];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [189]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [189]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [189]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [189]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [189]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [189]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [189]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn189.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.FIFOread1);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 65);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO503_SerialIN_CH2));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Decode1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Decode1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode1_P3_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode1_IWORK[0]);
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode1_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn189.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 4);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode1_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode1_PWORK[0]);
      }

      /* registration */
      slasciidecode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 65);
      ssSetInputPortDataType(rts, 0, SS_UINT8);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Read 2 (sg_serial_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[190];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [190]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [190]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [190]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [190]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [190]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [190]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [190]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 65);
          ssSetOutputPortSignal(rts, 0, ((uint32_T *)
            speedgoat_test_SN5659_R2020b_B.Read2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Read 2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Read 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.params;
        ssSetSFcnParamsCount(rts, 9);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read2_P9_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Read2_IWORK[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Read2_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn190.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Read2_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Read2_PWORK);
      }

      /* registration */
      sg_serial_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Decode2 (slasciidecode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[191];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [191]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [191]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [191]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [191]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [191]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [191]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [191]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn191.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.FIFOread2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 65);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO503_SerialIN_CH3));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Decode2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Decode2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode2_P3_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode2_IWORK[0]);
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn191.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 4);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode2_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode2_PWORK[0]);
      }

      /* registration */
      slasciidecode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 65);
      ssSetInputPortDataType(rts, 0, SS_UINT8);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Read 3 (sg_serial_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[192];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [192]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [192]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [192]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [192]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [192]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [192]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [192]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 65);
          ssSetOutputPortSignal(rts, 0, ((uint32_T *)
            speedgoat_test_SN5659_R2020b_B.Read3));
        }
      }

      /* path info */
      ssSetModelName(rts, "Read 3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Read 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.params;
        ssSetSFcnParamsCount(rts, 9);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Read3_P9_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Read3_IWORK[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Read3_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn192.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Read3_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Read3_PWORK);
      }

      /* registration */
      sg_serial_read_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Decode3 (slasciidecode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[193];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [193]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [193]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [193]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [193]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [193]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [193]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [193]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn193.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0, speedgoat_test_SN5659_R2020b_B.FIFOread3);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 65);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2020b_B.IO503_SerialIN_CH4));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Decode3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Decode3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIDecode3_P3_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode3_IWORK[0]);
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode3_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn193.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 4);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode3_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.ASCIIDecode3_PWORK[0]);
      }

      /* registration */
      slasciidecode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 65);
      ssSetInputPortDataType(rts, 0, SS_UINT8);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Encode (slasciiencode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[194];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [194]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [194]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [194]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [194]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [194]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [194]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [194]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn194.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.SineWave1_k;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 64);
          ssSetOutputPortSignal(rts, 0, ((uint8_T *)
            speedgoat_test_SN5659_R2020b_B.ASCIIEncode));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Encode");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Encode");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.params;
        ssSetSFcnParamsCount(rts, 4);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode_P4_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn194.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode_PWORK);
      }

      /* registration */
      slasciiencode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Write  (sg_serial_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[195];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [195]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [195]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [195]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [195]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [195]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [195]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [195]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn195.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.ASCIIEncode);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 64);
        }
      }

      /* path info */
      ssSetModelName(rts, "Write ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Write ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P3_Size_k);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Write_IWORK_j[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Write_PWORK_d);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn195.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Write_IWORK_j[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Write_PWORK_d);
      }

      /* registration */
      sg_serial_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Encode1 (slasciiencode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[196];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [196]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [196]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [196]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [196]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [196]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [196]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [196]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn196.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.SineWave2_m;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 64);
          ssSetOutputPortSignal(rts, 0, ((uint8_T *)
            speedgoat_test_SN5659_R2020b_B.ASCIIEncode1));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Encode1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Encode1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.params;
        ssSetSFcnParamsCount(rts, 4);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode1_P4_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode1_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn196.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode1_PWORK);
      }

      /* registration */
      slasciiencode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Write 1 (sg_serial_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[197];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [197]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [197]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [197]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [197]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [197]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [197]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [197]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn197.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.ASCIIEncode1);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 64);
        }
      }

      /* path info */
      ssSetModelName(rts, "Write 1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Write 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write1_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Write1_IWORK[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Write1_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn197.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Write1_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Write1_PWORK);
      }

      /* registration */
      sg_serial_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Encode2 (slasciiencode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[198];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [198]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [198]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [198]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [198]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [198]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [198]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [198]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn198.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.SineWave3_k;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 64);
          ssSetOutputPortSignal(rts, 0, ((uint8_T *)
            speedgoat_test_SN5659_R2020b_B.ASCIIEncode2));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Encode2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Encode2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.params;
        ssSetSFcnParamsCount(rts, 4);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode2_P4_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode2_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn198.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode2_PWORK);
      }

      /* registration */
      slasciiencode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Write 2 (sg_serial_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[199];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [199]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [199]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [199]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [199]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [199]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [199]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [199]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn199.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.ASCIIEncode2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 64);
        }
      }

      /* path info */
      ssSetModelName(rts, "Write 2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Write 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write2_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Write2_IWORK[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Write2_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn199.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Write2_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Write2_PWORK);
      }

      /* registration */
      sg_serial_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/ASCII Encode3 (slasciiencode) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[200];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [200]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [200]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [200]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [200]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [200]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [200]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [200]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn200.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2020b_B.SineWave4_j;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 64);
          ssSetOutputPortSignal(rts, 0, ((uint8_T *)
            speedgoat_test_SN5659_R2020b_B.ASCIIEncode3));
        }
      }

      /* path info */
      ssSetModelName(rts, "ASCII Encode3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/ASCII Encode3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.params;
        ssSetSFcnParamsCount(rts, 4);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->ASCIIEncode3_P4_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode3_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn200.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.ASCIIEncode3_PWORK);
      }

      /* registration */
      slasciiencode(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S5>/Write 3 (sg_serial_write_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[201];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [201]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [201]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [201]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [201]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [201]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [201]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [201]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn201.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2020b_B.ASCIIEncode3);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 64);
        }
      }

      /* path info */
      ssSetModelName(rts, "Write 3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO503/Write 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Write3_P8_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Write3_IWORK[0]);
      ssSetPWork(rts, (void **) &speedgoat_test_SN5659_R2020b_DW.Write3_PWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn201.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Write3_IWORK[0]);

        /* PWORK */
        ssSetDWorkWidth(rts, 1, 1);
        ssSetDWorkDataType(rts, 1,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2020b_DW.Write3_PWORK);
      }

      /* registration */
      sg_serial_write_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2020b/<S8>/Relays  (sg_IOPIL_relay_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[202];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.blkInfo2
                         [202]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.inputOutputPortInfo2
        [202]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2020b_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods2
                           [202]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods3
                           [202]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.methods4
                           [202]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.statesInfo2
                         [202]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.periodicStatesInfo
          [202]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 8);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2020b_M->
          NonInlinedSFcns.Sfcn202.inputPortInfo[0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        ssSetInputPortUnit(rts, 1, 0);
        ssSetInputPortUnit(rts, 2, 0);
        ssSetInputPortUnit(rts, 3, 0);
        ssSetInputPortUnit(rts, 4, 0);
        ssSetInputPortUnit(rts, 5, 0);
        ssSetInputPortUnit(rts, 6, 0);
        ssSetInputPortUnit(rts, 7, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);
        ssSetInputPortIsContinuousQuantity(rts, 1, 0);
        ssSetInputPortIsContinuousQuantity(rts, 2, 0);
        ssSetInputPortIsContinuousQuantity(rts, 3, 0);
        ssSetInputPortIsContinuousQuantity(rts, 4, 0);
        ssSetInputPortIsContinuousQuantity(rts, 5, 0);
        ssSetInputPortIsContinuousQuantity(rts, 6, 0);
        ssSetInputPortIsContinuousQuantity(rts, 7, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }

        /* port 1 */
        {
          ssSetInputPortRequiredContiguous(rts, 1, 1);
          ssSetInputPortSignal(rts, 1,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 1, 1);
          ssSetInputPortWidth(rts, 1, 1);
        }

        /* port 2 */
        {
          ssSetInputPortRequiredContiguous(rts, 2, 1);
          ssSetInputPortSignal(rts, 2,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 2, 1);
          ssSetInputPortWidth(rts, 2, 1);
        }

        /* port 3 */
        {
          ssSetInputPortRequiredContiguous(rts, 3, 1);
          ssSetInputPortSignal(rts, 3,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 3, 1);
          ssSetInputPortWidth(rts, 3, 1);
        }

        /* port 4 */
        {
          ssSetInputPortRequiredContiguous(rts, 4, 1);
          ssSetInputPortSignal(rts, 4,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 4, 1);
          ssSetInputPortWidth(rts, 4, 1);
        }

        /* port 5 */
        {
          ssSetInputPortRequiredContiguous(rts, 5, 1);
          ssSetInputPortSignal(rts, 5,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 5, 1);
          ssSetInputPortWidth(rts, 5, 1);
        }

        /* port 6 */
        {
          ssSetInputPortRequiredContiguous(rts, 6, 1);
          ssSetInputPortSignal(rts, 6,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 6, 1);
          ssSetInputPortWidth(rts, 6, 1);
        }

        /* port 7 */
        {
          ssSetInputPortRequiredContiguous(rts, 7, 1);
          ssSetInputPortSignal(rts, 7,
                               &speedgoat_test_SN5659_R2020b_B.DataTypeConversion_ib);
          _ssSetInputPortNumDimensions(rts, 7, 1);
          ssSetInputPortWidth(rts, 7, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 8);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        ssSetOutputPortUnit(rts, 1, 0);
        ssSetOutputPortUnit(rts, 2, 0);
        ssSetOutputPortUnit(rts, 3, 0);
        ssSetOutputPortUnit(rts, 4, 0);
        ssSetOutputPortUnit(rts, 5, 0);
        ssSetOutputPortUnit(rts, 6, 0);
        ssSetOutputPortUnit(rts, 7, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 1, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 2, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 3, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 4, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 5, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 6, 0);
        ssSetOutputPortIsContinuousQuantity(rts, 7, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH1));
        }

        /* port 1 */
        {
          _ssSetOutputPortNumDimensions(rts, 1, 1);
          ssSetOutputPortWidth(rts, 1, 1);
          ssSetOutputPortSignal(rts, 1, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH2));
        }

        /* port 2 */
        {
          _ssSetOutputPortNumDimensions(rts, 2, 1);
          ssSetOutputPortWidth(rts, 2, 1);
          ssSetOutputPortSignal(rts, 2, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH3));
        }

        /* port 3 */
        {
          _ssSetOutputPortNumDimensions(rts, 3, 1);
          ssSetOutputPortWidth(rts, 3, 1);
          ssSetOutputPortSignal(rts, 3, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH4));
        }

        /* port 4 */
        {
          _ssSetOutputPortNumDimensions(rts, 4, 1);
          ssSetOutputPortWidth(rts, 4, 1);
          ssSetOutputPortSignal(rts, 4, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH5));
        }

        /* port 5 */
        {
          _ssSetOutputPortNumDimensions(rts, 5, 1);
          ssSetOutputPortWidth(rts, 5, 1);
          ssSetOutputPortSignal(rts, 5, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH6));
        }

        /* port 6 */
        {
          _ssSetOutputPortNumDimensions(rts, 6, 1);
          ssSetOutputPortWidth(rts, 6, 1);
          ssSetOutputPortSignal(rts, 6, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH7));
        }

        /* port 7 */
        {
          _ssSetOutputPortNumDimensions(rts, 7, 1);
          ssSetOutputPortWidth(rts, 7, 1);
          ssSetOutputPortSignal(rts, 7, ((boolean_T *)
            &speedgoat_test_SN5659_R2020b_B.IO941_CH8));
        }
      }

      /* path info */
      ssSetModelName(rts, "Relays ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2020b/IO941-SPDT-64/Relays ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2020b_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.params;
        ssSetSFcnParamsCount(rts, 17);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P16_Size);
        ssSetSFcnParam(rts, 16, (mxArray*)
                       speedgoat_test_SN5659_R2020_cal->Relays_P17_Size);
      }

      /* work vectors */
      ssSetIWork(rts, (int_T *) &speedgoat_test_SN5659_R2020b_DW.Relays_IWORK);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2020b_M->NonInlinedSFcns.Sfcn202.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* IWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2020b_DW.Relays_IWORK);
      }

      /* registration */
      sg_IOPIL_relay_s(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.01);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 3;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetInputPortConnected(rts, 1, 1);
      _ssSetInputPortConnected(rts, 2, 1);
      _ssSetInputPortConnected(rts, 3, 1);
      _ssSetInputPortConnected(rts, 4, 1);
      _ssSetInputPortConnected(rts, 5, 1);
      _ssSetInputPortConnected(rts, 6, 1);
      _ssSetInputPortConnected(rts, 7, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 1, 1);
      _ssSetOutputPortConnected(rts, 2, 1);
      _ssSetOutputPortConnected(rts, 3, 1);
      _ssSetOutputPortConnected(rts, 4, 1);
      _ssSetOutputPortConnected(rts, 5, 1);
      _ssSetOutputPortConnected(rts, 6, 1);
      _ssSetOutputPortConnected(rts, 7, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);
      _ssSetOutputPortBeingMerged(rts, 1, 0);
      _ssSetOutputPortBeingMerged(rts, 2, 0);
      _ssSetOutputPortBeingMerged(rts, 3, 0);
      _ssSetOutputPortBeingMerged(rts, 4, 0);
      _ssSetOutputPortBeingMerged(rts, 5, 0);
      _ssSetOutputPortBeingMerged(rts, 6, 0);
      _ssSetOutputPortBeingMerged(rts, 7, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
      ssSetInputPortBufferDstPort(rts, 1, -1);
      ssSetInputPortBufferDstPort(rts, 2, -1);
      ssSetInputPortBufferDstPort(rts, 3, -1);
      ssSetInputPortBufferDstPort(rts, 4, -1);
      ssSetInputPortBufferDstPort(rts, 5, -1);
      ssSetInputPortBufferDstPort(rts, 6, -1);
      ssSetInputPortBufferDstPort(rts, 7, -1);
    }
  }

  /* Start for S-Function (sg_IO132_IO133_setup_s_v2): '<S2>/Setup v2 ' */
  /* Level2 S-Function Block: '<S2>/Setup v2 ' (sg_IO132_IO133_setup_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[2];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO132_IO133_ad_s_v2): '<S2>/Analog input v2 ' */
  /* Level2 S-Function Block: '<S2>/Analog input v2 ' (sg_IO132_IO133_ad_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[3];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO132_IO133_da_s_v2): '<S2>/Analog output v2 ' */
  /* Level2 S-Function Block: '<S2>/Analog output v2 ' (sg_IO132_IO133_da_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[4];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO132_IO133_di_s_v2): '<S2>/Digital input v2 ' */
  /* Level2 S-Function Block: '<S2>/Digital input v2 ' (sg_IO132_IO133_di_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[5];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO132_IO133_do_s_v2): '<S2>/Digital output v2 ' */
  /* Level2 S-Function Block: '<S2>/Digital output v2 ' (sg_IO132_IO133_do_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[6];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO204_setup_s): '<S3>/Setup' */
  /* Level2 S-Function Block: '<S3>/Setup' (sg_IO204_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[7];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO204_read_s): '<S3>/Read' */
  /* Level2 S-Function Block: '<S3>/Read' (sg_IO204_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[8];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO204_write_s): '<S3>/Write' */
  /* Level2 S-Function Block: '<S3>/Write' (sg_IO204_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[9];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_setup_s): '<S5>/Setup ' */
  /* Level2 S-Function Block: '<S5>/Setup ' (sg_serial_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[10];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO612_setup_s): '<S6>/CAN Setup' */
  /* Level2 S-Function Block: '<S6>/CAN Setup' (sg_IO612_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[11];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO61X_write_s): '<S6>/CAN Write' */
  /* Level2 S-Function Block: '<S6>/CAN Write' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[12];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO61X_write_s): '<S6>/CAN Write2' */
  /* Level2 S-Function Block: '<S6>/CAN Write2' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[13];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO61X_write_s): '<S6>/CAN Write3' */
  /* Level2 S-Function Block: '<S6>/CAN Write3' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[14];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO61X_write_s): '<S6>/CAN Write1' */
  /* Level2 S-Function Block: '<S6>/CAN Write1' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[15];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO61X_write_s): '<S6>/CAN Write4' */
  /* Level2 S-Function Block: '<S6>/CAN Write4' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[16];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO61X_write_s): '<S6>/CAN Write5' */
  /* Level2 S-Function Block: '<S6>/CAN Write5' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[17];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_setup_s_v3): '<S7>/Setup v2 ' */
  /* Level2 S-Function Block: '<S7>/Setup v2 ' (sg_io682_setup_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[18];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO107_da_s): '<S1>/Analog output' */
  /* Level2 S-Function Block: '<S1>/Analog output' (sg_IO107_da_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[19];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO107_da_s): '<S1>/Analog output1' */
  /* Level2 S-Function Block: '<S1>/Analog output1' (sg_IO107_da_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[20];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO107_setup_s): '<S1>/Setup' */
  /* Level2 S-Function Block: '<S1>/Setup' (sg_IO107_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[21];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO107_setup_s): '<S1>/Setup1' */
  /* Level2 S-Function Block: '<S1>/Setup1' (sg_IO107_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[22];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO421_lvdt_read_s): '<S4>/LVDT read' */
  /* Level2 S-Function Block: '<S4>/LVDT read' (sg_IO421_lvdt_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[23];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO421_lvdt_read_s): '<S4>/LVDT read1' */
  /* Level2 S-Function Block: '<S4>/LVDT read1' (sg_IO421_lvdt_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[24];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IO421_ref_s): '<S4>/REF' */
  /* Level2 S-Function Block: '<S4>/REF' (sg_IO421_ref_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[25];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 ' */
  /* Level2 S-Function Block: '<S7>/Receive v2 ' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[26];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 1' */
  /* Level2 S-Function Block: '<S12>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[27];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 5' */
  /* Level2 S-Function Block: '<S12>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[28];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 3' */
  /* Level2 S-Function Block: '<S12>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[29];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 4' */
  /* Level2 S-Function Block: '<S12>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[30];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 1' */
  /* Level2 S-Function Block: '<S7>/Receive v2 1' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[31];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 1' */
  /* Level2 S-Function Block: '<S20>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[32];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 2' */
  /* Level2 S-Function Block: '<S20>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[33];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 3' */
  /* Level2 S-Function Block: '<S20>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[34];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 4' */
  /* Level2 S-Function Block: '<S20>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[35];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 8' */
  /* Level2 S-Function Block: '<S7>/Receive v2 8' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[36];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 1' */
  /* Level2 S-Function Block: '<S27>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[37];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 5' */
  /* Level2 S-Function Block: '<S27>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[38];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 3' */
  /* Level2 S-Function Block: '<S27>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[39];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 4' */
  /* Level2 S-Function Block: '<S27>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[40];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 9' */
  /* Level2 S-Function Block: '<S7>/Receive v2 9' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[41];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 1' */
  /* Level2 S-Function Block: '<S13>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[42];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 2' */
  /* Level2 S-Function Block: '<S13>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[43];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 3' */
  /* Level2 S-Function Block: '<S13>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[44];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 4' */
  /* Level2 S-Function Block: '<S13>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[45];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 10' */
  /* Level2 S-Function Block: '<S7>/Receive v2 10' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[46];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 1' */
  /* Level2 S-Function Block: '<S14>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[47];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 2' */
  /* Level2 S-Function Block: '<S14>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[48];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 3' */
  /* Level2 S-Function Block: '<S14>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[49];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 4' */
  /* Level2 S-Function Block: '<S14>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[50];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 11' */
  /* Level2 S-Function Block: '<S7>/Receive v2 11' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[51];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 1' */
  /* Level2 S-Function Block: '<S15>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[52];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 2' */
  /* Level2 S-Function Block: '<S15>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[53];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 3' */
  /* Level2 S-Function Block: '<S15>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[54];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 4' */
  /* Level2 S-Function Block: '<S15>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[55];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 12' */
  /* Level2 S-Function Block: '<S7>/Receive v2 12' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[56];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 1' */
  /* Level2 S-Function Block: '<S16>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[57];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 5' */
  /* Level2 S-Function Block: '<S16>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[58];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 3' */
  /* Level2 S-Function Block: '<S16>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[59];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 4' */
  /* Level2 S-Function Block: '<S16>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[60];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 13' */
  /* Level2 S-Function Block: '<S7>/Receive v2 13' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[61];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 1' */
  /* Level2 S-Function Block: '<S17>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[62];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 2' */
  /* Level2 S-Function Block: '<S17>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[63];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 3' */
  /* Level2 S-Function Block: '<S17>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[64];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 4' */
  /* Level2 S-Function Block: '<S17>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[65];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 14' */
  /* Level2 S-Function Block: '<S7>/Receive v2 14' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[66];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 1' */
  /* Level2 S-Function Block: '<S18>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[67];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 2' */
  /* Level2 S-Function Block: '<S18>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[68];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 3' */
  /* Level2 S-Function Block: '<S18>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[69];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 4' */
  /* Level2 S-Function Block: '<S18>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[70];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 15' */
  /* Level2 S-Function Block: '<S7>/Receive v2 15' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[71];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 1' */
  /* Level2 S-Function Block: '<S19>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[72];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 2' */
  /* Level2 S-Function Block: '<S19>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[73];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 3' */
  /* Level2 S-Function Block: '<S19>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[74];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 4' */
  /* Level2 S-Function Block: '<S19>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[75];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 2' */
  /* Level2 S-Function Block: '<S7>/Receive v2 2' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[76];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 1' */
  /* Level2 S-Function Block: '<S21>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[77];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 2' */
  /* Level2 S-Function Block: '<S21>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[78];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 3' */
  /* Level2 S-Function Block: '<S21>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[79];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 4' */
  /* Level2 S-Function Block: '<S21>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[80];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 3' */
  /* Level2 S-Function Block: '<S7>/Receive v2 3' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[81];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 1' */
  /* Level2 S-Function Block: '<S22>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[82];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 2' */
  /* Level2 S-Function Block: '<S22>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[83];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 3' */
  /* Level2 S-Function Block: '<S22>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[84];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 4' */
  /* Level2 S-Function Block: '<S22>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[85];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 4' */
  /* Level2 S-Function Block: '<S7>/Receive v2 4' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[86];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 1' */
  /* Level2 S-Function Block: '<S23>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[87];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 5' */
  /* Level2 S-Function Block: '<S23>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[88];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 3' */
  /* Level2 S-Function Block: '<S23>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[89];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 4' */
  /* Level2 S-Function Block: '<S23>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[90];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 5' */
  /* Level2 S-Function Block: '<S7>/Receive v2 5' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[91];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 1' */
  /* Level2 S-Function Block: '<S24>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[92];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 2' */
  /* Level2 S-Function Block: '<S24>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[93];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 3' */
  /* Level2 S-Function Block: '<S24>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[94];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 4' */
  /* Level2 S-Function Block: '<S24>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[95];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 6' */
  /* Level2 S-Function Block: '<S7>/Receive v2 6' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[96];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 1' */
  /* Level2 S-Function Block: '<S25>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[97];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 2' */
  /* Level2 S-Function Block: '<S25>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[98];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 3' */
  /* Level2 S-Function Block: '<S25>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[99];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 4' */
  /* Level2 S-Function Block: '<S25>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[100];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 7' */
  /* Level2 S-Function Block: '<S7>/Receive v2 7' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[101];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 1' */
  /* Level2 S-Function Block: '<S26>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[102];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 2' */
  /* Level2 S-Function Block: '<S26>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[103];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 3' */
  /* Level2 S-Function Block: '<S26>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[104];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 4' */
  /* Level2 S-Function Block: '<S26>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[105];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 1' */
  /* Level2 S-Function Block: '<S28>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[106];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 5' */
  /* Level2 S-Function Block: '<S28>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[107];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 3' */
  /* Level2 S-Function Block: '<S28>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[108];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 2' */
  /* Level2 S-Function Block: '<S28>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[109];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 ' */
  /* Level2 S-Function Block: '<S7>/Send v2 ' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[110];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 1' */
  /* Level2 S-Function Block: '<S29>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[111];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 2' */
  /* Level2 S-Function Block: '<S29>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[112];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 3' */
  /* Level2 S-Function Block: '<S29>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[113];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 4' */
  /* Level2 S-Function Block: '<S29>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[114];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 9' */
  /* Level2 S-Function Block: '<S7>/Send v2 9' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[115];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 1' */
  /* Level2 S-Function Block: '<S30>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[116];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 2' */
  /* Level2 S-Function Block: '<S30>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[117];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 3' */
  /* Level2 S-Function Block: '<S30>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[118];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 4' */
  /* Level2 S-Function Block: '<S30>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[119];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 10' */
  /* Level2 S-Function Block: '<S7>/Send v2 10' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[120];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 1' */
  /* Level2 S-Function Block: '<S31>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[121];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 2' */
  /* Level2 S-Function Block: '<S31>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[122];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 3' */
  /* Level2 S-Function Block: '<S31>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[123];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 4' */
  /* Level2 S-Function Block: '<S31>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[124];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 11' */
  /* Level2 S-Function Block: '<S7>/Send v2 11' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[125];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 1' */
  /* Level2 S-Function Block: '<S32>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[126];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 5' */
  /* Level2 S-Function Block: '<S32>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[127];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 3' */
  /* Level2 S-Function Block: '<S32>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[128];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 2' */
  /* Level2 S-Function Block: '<S32>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[129];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 12' */
  /* Level2 S-Function Block: '<S7>/Send v2 12' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[130];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 1' */
  /* Level2 S-Function Block: '<S33>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[131];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 2' */
  /* Level2 S-Function Block: '<S33>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[132];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 3' */
  /* Level2 S-Function Block: '<S33>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[133];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 4' */
  /* Level2 S-Function Block: '<S33>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[134];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 13' */
  /* Level2 S-Function Block: '<S7>/Send v2 13' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[135];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 1' */
  /* Level2 S-Function Block: '<S34>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[136];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 2' */
  /* Level2 S-Function Block: '<S34>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[137];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 3' */
  /* Level2 S-Function Block: '<S34>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[138];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 4' */
  /* Level2 S-Function Block: '<S34>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[139];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 14' */
  /* Level2 S-Function Block: '<S7>/Send v2 14' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[140];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 1' */
  /* Level2 S-Function Block: '<S35>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[141];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 2' */
  /* Level2 S-Function Block: '<S35>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[142];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 3' */
  /* Level2 S-Function Block: '<S35>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[143];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 4' */
  /* Level2 S-Function Block: '<S35>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[144];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 15' */
  /* Level2 S-Function Block: '<S7>/Send v2 15' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[145];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 1' */
  /* Level2 S-Function Block: '<S36>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[146];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 2' */
  /* Level2 S-Function Block: '<S36>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[147];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 3' */
  /* Level2 S-Function Block: '<S36>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[148];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 4' */
  /* Level2 S-Function Block: '<S36>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[149];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 1' */
  /* Level2 S-Function Block: '<S7>/Send v2 1' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[150];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 1' */
  /* Level2 S-Function Block: '<S37>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[151];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 2' */
  /* Level2 S-Function Block: '<S37>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[152];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 3' */
  /* Level2 S-Function Block: '<S37>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[153];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 4' */
  /* Level2 S-Function Block: '<S37>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[154];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 2' */
  /* Level2 S-Function Block: '<S7>/Send v2 2' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[155];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 1' */
  /* Level2 S-Function Block: '<S38>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[156];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 2' */
  /* Level2 S-Function Block: '<S38>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[157];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 3' */
  /* Level2 S-Function Block: '<S38>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[158];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 4' */
  /* Level2 S-Function Block: '<S38>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[159];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 3' */
  /* Level2 S-Function Block: '<S7>/Send v2 3' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[160];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 1' */
  /* Level2 S-Function Block: '<S39>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[161];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 5' */
  /* Level2 S-Function Block: '<S39>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[162];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 3' */
  /* Level2 S-Function Block: '<S39>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[163];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 2' */
  /* Level2 S-Function Block: '<S39>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[164];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 4' */
  /* Level2 S-Function Block: '<S7>/Send v2 4' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[165];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 1' */
  /* Level2 S-Function Block: '<S40>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[166];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 2' */
  /* Level2 S-Function Block: '<S40>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[167];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 3' */
  /* Level2 S-Function Block: '<S40>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[168];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 4' */
  /* Level2 S-Function Block: '<S40>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[169];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 5' */
  /* Level2 S-Function Block: '<S7>/Send v2 5' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[170];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 1' */
  /* Level2 S-Function Block: '<S41>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[171];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 2' */
  /* Level2 S-Function Block: '<S41>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[172];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 3' */
  /* Level2 S-Function Block: '<S41>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[173];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 4' */
  /* Level2 S-Function Block: '<S41>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[174];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 6' */
  /* Level2 S-Function Block: '<S7>/Send v2 6' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[175];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 1' */
  /* Level2 S-Function Block: '<S42>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[176];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 2' */
  /* Level2 S-Function Block: '<S42>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[177];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 3' */
  /* Level2 S-Function Block: '<S42>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[178];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 4' */
  /* Level2 S-Function Block: '<S42>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[179];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 7' */
  /* Level2 S-Function Block: '<S7>/Send v2 7' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[180];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 1' */
  /* Level2 S-Function Block: '<S43>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[181];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 5' */
  /* Level2 S-Function Block: '<S43>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[182];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 3' */
  /* Level2 S-Function Block: '<S43>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[183];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 2' */
  /* Level2 S-Function Block: '<S43>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[184];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 8' */
  /* Level2 S-Function Block: '<S7>/Send v2 8' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[185];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_read_s): '<S5>/Read ' */
  /* Level2 S-Function Block: '<S5>/Read ' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[186];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slfifowrite): '<S5>/FIFO write' */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite_IWORK[0] = 64;/* fifo size */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite_IWORK[1] = 2;/* fifo type */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite_IWORK[2] = 65;/* inport width */

  /* allocate memory for FIFO */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[0] = malloc(4 * (64 + 3));
  if (speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[0] == NULL) {
    rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, "Error allocating memory");
    return;
  }

  /* Input pointer */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[1] =
    &speedgoat_test_SN5659_R2020b_B.Read[0];

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[2] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite;
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[3] = NULL;

  {
    /* Initialize the fifo */
    int *fifo = (int *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite_PWORK[0];
    memset(fifo, 0, 4 * (64 + 3));
    serialfifoptr *oPtr = &speedgoat_test_SN5659_R2020b_B.FIFOwrite;
    fifo[0] = 64;
    oPtr->ptrlow = (uint32_T)( (uint64_T)fifo & 0xffffffff );
    oPtr->ptrhigh = (uint32_T)( ((uint64_T)fifo >> 32) & 0xffffffff );
    oPtr->token = (int)(('F' << 3) | ('i' << 2) | ('F' << 1) | 'o');
  }

  /* Start for S-Function (slfiforead): '<S5>/FIFO read' */
  speedgoat_test_SN5659_R2020b_DW.FIFOread_IWORK[0] = 64;/* Max to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread_IWORK[1] = 1;/* Min to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread_IWORK[2] = 1;/* Use delimiter? */
  speedgoat_test_SN5659_R2020b_DW.FIFOread_IWORK[3] = 13;/* delimiter */
  speedgoat_test_SN5659_R2020b_DW.FIFOread_IWORK[4] = 6;/* FIFO type */

  /* Input pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread_PWORK[0] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite;
  speedgoat_test_SN5659_R2020b_DW.FIFOread_PWORK[1] = NULL;
  speedgoat_test_SN5659_R2020b_DW.FIFOread_PWORK[2] = NULL;

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread_PWORK[3] =
    &speedgoat_test_SN5659_R2020b_B.FIFOread[0];
  speedgoat_test_SN5659_R2020b_DW.FIFOread_PWORK[4] = NULL;

  /* Start for S-Function (slasciidecode): '<S5>/ASCII Decode' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[187];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_read_s): '<S5>/Read 1' */
  /* Level2 S-Function Block: '<S5>/Read 1' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[188];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slfifowrite): '<S5>/FIFO write1' */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_IWORK[0] = 64;/* fifo size */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_IWORK[1] = 2;/* fifo type */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_IWORK[2] = 65;/* inport width */

  /* allocate memory for FIFO */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[0] = malloc(4 * (64 + 3));
  if (speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[0] == NULL) {
    rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, "Error allocating memory");
    return;
  }

  /* Input pointer */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[1] =
    &speedgoat_test_SN5659_R2020b_B.Read1[0];

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[2] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite1;
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[3] = NULL;

  {
    /* Initialize the fifo */
    int *fifo = (int *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite1_PWORK[0];
    memset(fifo, 0, 4 * (64 + 3));
    serialfifoptr *oPtr = &speedgoat_test_SN5659_R2020b_B.FIFOwrite1;
    fifo[0] = 64;
    oPtr->ptrlow = (uint32_T)( (uint64_T)fifo & 0xffffffff );
    oPtr->ptrhigh = (uint32_T)( ((uint64_T)fifo >> 32) & 0xffffffff );
    oPtr->token = (int)(('F' << 3) | ('i' << 2) | ('F' << 1) | 'o');
  }

  /* Start for S-Function (slfiforead): '<S5>/FIFO read1' */
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_IWORK[0] = 64;/* Max to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_IWORK[1] = 1;/* Min to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_IWORK[2] = 1;/* Use delimiter? */
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_IWORK[3] = 13;/* delimiter */
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_IWORK[4] = 6;/* FIFO type */

  /* Input pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_PWORK[0] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite1;
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_PWORK[1] = NULL;
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_PWORK[2] = NULL;

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_PWORK[3] =
    &speedgoat_test_SN5659_R2020b_B.FIFOread1[0];
  speedgoat_test_SN5659_R2020b_DW.FIFOread1_PWORK[4] = NULL;

  /* Start for S-Function (slasciidecode): '<S5>/ASCII Decode1' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode1' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[189];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_read_s): '<S5>/Read 2' */
  /* Level2 S-Function Block: '<S5>/Read 2' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[190];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slfifowrite): '<S5>/FIFO write2' */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_IWORK[0] = 64;/* fifo size */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_IWORK[1] = 2;/* fifo type */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_IWORK[2] = 65;/* inport width */

  /* allocate memory for FIFO */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[0] = malloc(4 * (64 + 3));
  if (speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[0] == NULL) {
    rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, "Error allocating memory");
    return;
  }

  /* Input pointer */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[1] =
    &speedgoat_test_SN5659_R2020b_B.Read2[0];

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[2] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite2;
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[3] = NULL;

  {
    /* Initialize the fifo */
    int *fifo = (int *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite2_PWORK[0];
    memset(fifo, 0, 4 * (64 + 3));
    serialfifoptr *oPtr = &speedgoat_test_SN5659_R2020b_B.FIFOwrite2;
    fifo[0] = 64;
    oPtr->ptrlow = (uint32_T)( (uint64_T)fifo & 0xffffffff );
    oPtr->ptrhigh = (uint32_T)( ((uint64_T)fifo >> 32) & 0xffffffff );
    oPtr->token = (int)(('F' << 3) | ('i' << 2) | ('F' << 1) | 'o');
  }

  /* Start for S-Function (slfiforead): '<S5>/FIFO read2' */
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_IWORK[0] = 64;/* Max to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_IWORK[1] = 1;/* Min to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_IWORK[2] = 1;/* Use delimiter? */
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_IWORK[3] = 13;/* delimiter */
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_IWORK[4] = 6;/* FIFO type */

  /* Input pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_PWORK[0] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite2;
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_PWORK[1] = NULL;
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_PWORK[2] = NULL;

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_PWORK[3] =
    &speedgoat_test_SN5659_R2020b_B.FIFOread2[0];
  speedgoat_test_SN5659_R2020b_DW.FIFOread2_PWORK[4] = NULL;

  /* Start for S-Function (slasciidecode): '<S5>/ASCII Decode2' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode2' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[191];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_read_s): '<S5>/Read 3' */
  /* Level2 S-Function Block: '<S5>/Read 3' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[192];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slfifowrite): '<S5>/FIFO write3' */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_IWORK[0] = 64;/* fifo size */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_IWORK[1] = 2;/* fifo type */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_IWORK[2] = 65;/* inport width */

  /* allocate memory for FIFO */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[0] = malloc(4 * (64 + 3));
  if (speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[0] == NULL) {
    rtmSetErrorStatus(speedgoat_test_SN5659_R2020b_M, "Error allocating memory");
    return;
  }

  /* Input pointer */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[1] =
    &speedgoat_test_SN5659_R2020b_B.Read3[0];

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[2] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite3;
  speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[3] = NULL;

  {
    /* Initialize the fifo */
    int *fifo = (int *)speedgoat_test_SN5659_R2020b_DW.FIFOwrite3_PWORK[0];
    memset(fifo, 0, 4 * (64 + 3));
    serialfifoptr *oPtr = &speedgoat_test_SN5659_R2020b_B.FIFOwrite3;
    fifo[0] = 64;
    oPtr->ptrlow = (uint32_T)( (uint64_T)fifo & 0xffffffff );
    oPtr->ptrhigh = (uint32_T)( ((uint64_T)fifo >> 32) & 0xffffffff );
    oPtr->token = (int)(('F' << 3) | ('i' << 2) | ('F' << 1) | 'o');
  }

  /* Start for S-Function (slfiforead): '<S5>/FIFO read3' */
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_IWORK[0] = 64;/* Max to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_IWORK[1] = 1;/* Min to read */
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_IWORK[2] = 1;/* Use delimiter? */
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_IWORK[3] = 13;/* delimiter */
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_IWORK[4] = 6;/* FIFO type */

  /* Input pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_PWORK[0] =
    &speedgoat_test_SN5659_R2020b_B.FIFOwrite3;
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_PWORK[1] = NULL;
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_PWORK[2] = NULL;

  /* Output pointer(s) */
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_PWORK[3] =
    &speedgoat_test_SN5659_R2020b_B.FIFOread3[0];
  speedgoat_test_SN5659_R2020b_DW.FIFOread3_PWORK[4] = NULL;

  /* Start for S-Function (slasciidecode): '<S5>/ASCII Decode3' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode3' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[193];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slasciiencode): '<S5>/ASCII Encode' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[194];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_write_s): '<S5>/Write ' */
  /* Level2 S-Function Block: '<S5>/Write ' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[195];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slasciiencode): '<S5>/ASCII Encode1' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode1' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[196];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_write_s): '<S5>/Write 1' */
  /* Level2 S-Function Block: '<S5>/Write 1' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[197];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slasciiencode): '<S5>/ASCII Encode2' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode2' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[198];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_write_s): '<S5>/Write 2' */
  /* Level2 S-Function Block: '<S5>/Write 2' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[199];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (slasciiencode): '<S5>/ASCII Encode3' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode3' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[200];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_serial_write_s): '<S5>/Write 3' */
  /* Level2 S-Function Block: '<S5>/Write 3' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[201];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_IOPIL_relay_s): '<S8>/Relays ' */
  /* Level2 S-Function Block: '<S8>/Relays ' (sg_IOPIL_relay_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[202];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  {
    real_T tmp;
    int32_T r;
    int32_T t;
    uint32_T tseed;

    /* InitializeConditions for DiscretePulseGenerator: '<S2>/Pulse Generator' */
    speedgoat_test_SN5659_R2020b_DW.clockTickCounter = 0;

    /* InitializeConditions for DiscretePulseGenerator: '<S2>/Pulse Generator1' */
    speedgoat_test_SN5659_R2020b_DW.clockTickCounter_c = 0;

    /* InitializeConditions for DiscretePulseGenerator: '<S3>/Pulse Generator' */
    speedgoat_test_SN5659_R2020b_DW.clockTickCounter_b = 0;

    /* InitializeConditions for RandomNumber: '<S28>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean;

    /* End of InitializeConditions for RandomNumber: '<S28>/Random number' */

    /* InitializeConditions for UnitDelay: '<S44>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_c =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_b;

    /* InitializeConditions for RandomNumber: '<S29>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_n);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_m = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_a = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_m) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_a +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_f;

    /* End of InitializeConditions for RandomNumber: '<S29>/Random number' */

    /* InitializeConditions for UnitDelay: '<S48>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition;

    /* InitializeConditions for RandomNumber: '<S30>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_h);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_h = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_n = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_h) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_l +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_k;

    /* End of InitializeConditions for RandomNumber: '<S30>/Random number' */

    /* InitializeConditions for UnitDelay: '<S52>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_o =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_n;

    /* InitializeConditions for RandomNumber: '<S31>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_f);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_k = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_f = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_k) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_j +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_fn;

    /* End of InitializeConditions for RandomNumber: '<S31>/Random number' */

    /* InitializeConditions for UnitDelay: '<S56>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_o0 =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_c;

    /* InitializeConditions for RandomNumber: '<S32>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_c);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_g = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_nj = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_g) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_k +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_a;

    /* End of InitializeConditions for RandomNumber: '<S32>/Random number' */

    /* InitializeConditions for UnitDelay: '<S60>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_m =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_k;

    /* InitializeConditions for RandomNumber: '<S33>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_p);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_f = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_ni = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_f) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_g +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_h;

    /* End of InitializeConditions for RandomNumber: '<S33>/Random number' */

    /* InitializeConditions for UnitDelay: '<S64>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_oy =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_e;

    /* InitializeConditions for RandomNumber: '<S34>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_fj);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_f4 = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_ft = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_f4) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_l4 +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_b;

    /* End of InitializeConditions for RandomNumber: '<S34>/Random number' */

    /* InitializeConditions for UnitDelay: '<S68>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_e =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_l;

    /* InitializeConditions for RandomNumber: '<S35>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_cd);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_i = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_i = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_i) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_n +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_fh;

    /* End of InitializeConditions for RandomNumber: '<S35>/Random number' */

    /* InitializeConditions for UnitDelay: '<S72>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_k =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_nl;

    /* InitializeConditions for RandomNumber: '<S36>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_nh);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_d = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_j = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_d) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_m +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_f3;

    /* End of InitializeConditions for RandomNumber: '<S36>/Random number' */

    /* InitializeConditions for UnitDelay: '<S76>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_e0 =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_j;

    /* InitializeConditions for RandomNumber: '<S37>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_fq);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_b = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_m = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_b) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_f +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_d;

    /* End of InitializeConditions for RandomNumber: '<S37>/Random number' */

    /* InitializeConditions for UnitDelay: '<S80>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_g =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_h;

    /* InitializeConditions for RandomNumber: '<S38>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_i);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_hi = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_h = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_hi) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_b +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_p;

    /* End of InitializeConditions for RandomNumber: '<S38>/Random number' */

    /* InitializeConditions for UnitDelay: '<S84>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_p =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_d;

    /* InitializeConditions for RandomNumber: '<S39>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_o);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_bw = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_ir = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_bw) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_mo +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_c;

    /* End of InitializeConditions for RandomNumber: '<S39>/Random number' */

    /* InitializeConditions for UnitDelay: '<S88>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_b =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_nb;

    /* InitializeConditions for RandomNumber: '<S40>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_cg);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_j = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_hu = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_j) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_o +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_l;

    /* End of InitializeConditions for RandomNumber: '<S40>/Random number' */

    /* InitializeConditions for UnitDelay: '<S92>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_f =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_h3;

    /* InitializeConditions for RandomNumber: '<S41>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_e);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_n = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_p = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_n) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_fs +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_pl;

    /* End of InitializeConditions for RandomNumber: '<S41>/Random number' */

    /* InitializeConditions for UnitDelay: '<S96>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_h =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_dr;

    /* InitializeConditions for RandomNumber: '<S42>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_l);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_l = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_jn = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_l) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_e +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_pz;

    /* End of InitializeConditions for RandomNumber: '<S42>/Random number' */

    /* InitializeConditions for UnitDelay: '<S100>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_m4 =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_a;

    /* InitializeConditions for RandomNumber: '<S43>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2020_cal->Randomnumber_Seed_j);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2020b_DW.RandSeed_fs = tseed;
    speedgoat_test_SN5659_R2020b_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2020b_DW.RandSeed_fs) *
      speedgoat_test_SN5659_R2020_cal->Randomnumber_StdDev_oa +
      speedgoat_test_SN5659_R2020_cal->Randomnumber_Mean_fb;

    /* End of InitializeConditions for RandomNumber: '<S43>/Random number' */

    /* InitializeConditions for UnitDelay: '<S104>/Output' */
    speedgoat_test_SN5659_R2020b_DW.Output_DSTATE_fw =
      speedgoat_test_SN5659_R2020_cal->Output_InitialCondition_aw;

    /* InitializeConditions for DiscretePulseGenerator: '<S8>/Pulse Generator' */
    speedgoat_test_SN5659_R2020b_DW.clockTickCounter_i = 0;

    /* Start for S-Function (sg_IO61X_read_s): '<S10>/CAN Read' */
    /* Level2 S-Function Block: '<S10>/CAN Read' (sg_IO61X_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[0];
      sfcnStart(rts);
      if (ssGetErrorStatus(rts) != (NULL))
        return;
    }

    /* Start for S-Function (scanunpack): '<S10>/CAN Unpack' */

    /*-----------S-Function Block: <S10>/CAN Unpack -----------------*/

    /* Start for S-Function (scanunpack): '<S10>/CAN Unpack1' */

    /*-----------S-Function Block: <S10>/CAN Unpack1 -----------------*/

    /* Start for S-Function (scanunpack): '<S10>/CAN Unpack2' */

    /*-----------S-Function Block: <S10>/CAN Unpack2 -----------------*/

    /* SystemInitialize for S-Function (scanunpack): '<S10>/CAN Unpack' incorporates:
     *  Outport: '<S10>/ID100_Signal1'
     */
    speedgoat_test_SN5659_R2020b_B.CANUnpack_c =
      speedgoat_test_SN5659_R2020_cal->ID100_Signal1_Y0;

    /* SystemInitialize for S-Function (scanunpack): '<S10>/CAN Unpack1' incorporates:
     *  Outport: '<S10>/ID101_Signal1'
     */
    speedgoat_test_SN5659_R2020b_B.CANUnpack1_o =
      speedgoat_test_SN5659_R2020_cal->ID101_Signal1_Y0;

    /* SystemInitialize for S-Function (scanunpack): '<S10>/CAN Unpack2' incorporates:
     *  Outport: '<S10>/ID102_Signal1'
     */
    speedgoat_test_SN5659_R2020b_B.CANUnpack2_j =
      speedgoat_test_SN5659_R2020_cal->ID102_Signal1_Y0;

    /* End of SystemInitialize for SubSystem: '<S6>/CAN Read Loop - Port 3' */
    /* Start for S-Function (sg_IO61X_read_s): '<S11>/CAN Read1' */
    /* Level2 S-Function Block: '<S11>/CAN Read1' (sg_IO61X_read_s) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[1];
      sfcnStart(rts);
      if (ssGetErrorStatus(rts) != (NULL))
        return;
    }

    /* Start for S-Function (scanunpack): '<S11>/CAN Unpack' */

    /*-----------S-Function Block: <S11>/CAN Unpack -----------------*/

    /* Start for S-Function (scanunpack): '<S11>/CAN Unpack1' */

    /*-----------S-Function Block: <S11>/CAN Unpack1 -----------------*/

    /* Start for S-Function (scanunpack): '<S11>/CAN Unpack2' */

    /*-----------S-Function Block: <S11>/CAN Unpack2 -----------------*/

    /* SystemInitialize for S-Function (scanunpack): '<S11>/CAN Unpack' incorporates:
     *  Outport: '<S11>/ID100_Signal1'
     */
    speedgoat_test_SN5659_R2020b_B.CANUnpack =
      speedgoat_test_SN5659_R2020_cal->ID100_Signal1_Y0_j;

    /* SystemInitialize for S-Function (scanunpack): '<S11>/CAN Unpack1' incorporates:
     *  Outport: '<S11>/ID101_Signal1'
     */
    speedgoat_test_SN5659_R2020b_B.CANUnpack1 =
      speedgoat_test_SN5659_R2020_cal->ID101_Signal1_Y0_o;

    /* SystemInitialize for S-Function (scanunpack): '<S11>/CAN Unpack2' incorporates:
     *  Outport: '<S11>/ID102_Signal1'
     */
    speedgoat_test_SN5659_R2020b_B.CANUnpack2 =
      speedgoat_test_SN5659_R2020_cal->ID102_Signal1_Y0_i;

    /* End of SystemInitialize for SubSystem: '<S6>/CAN Read Loop - Port 4' */
  }

  /* Enable for Sin: '<S6>/Sine Wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable = 1;

  /* Enable for Sin: '<S6>/Sine Wave1' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_p = 1;

  /* Enable for Sin: '<S6>/Sine Wave2' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_i = 1;

  /* Enable for Sin: '<S6>/Sine Wave3' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_h = 1;

  /* Enable for Sin: '<S6>/Sine Wave4' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_b = 1;

  /* Enable for Sin: '<S6>/Sine Wave5' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_py = 1;

  /* Enable for Sin: '<S1>/Sine Wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_bc = 1;

  /* Enable for Sin: '<S1>/Sine Wave1' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_o = 1;

  /* Enable for Sin: '<S28>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_i2 = 1;

  /* Enable for Sin: '<S29>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_n = 1;

  /* Enable for Sin: '<S30>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_bt = 1;

  /* Enable for Sin: '<S31>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_f = 1;

  /* Enable for Sin: '<S32>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_m = 1;

  /* Enable for Sin: '<S33>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_j = 1;

  /* Enable for Sin: '<S34>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_a = 1;

  /* Enable for Sin: '<S35>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_p0 = 1;

  /* Enable for Sin: '<S36>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_ml = 1;

  /* Enable for Sin: '<S37>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_bx = 1;

  /* Enable for Sin: '<S38>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_g = 1;

  /* Enable for Sin: '<S39>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_pe = 1;

  /* Enable for Sin: '<S40>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_ik = 1;

  /* Enable for Sin: '<S41>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_jy = 1;

  /* Enable for Sin: '<S42>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_gv = 1;

  /* Enable for Sin: '<S43>/Sine wave' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_o1 = 1;

  /* Enable for Sin: '<S5>/Sine Wave1' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_k = 1;

  /* Enable for Sin: '<S5>/Sine Wave2' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_p2 = 1;

  /* Enable for Sin: '<S5>/Sine Wave3' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_av = 1;

  /* Enable for Sin: '<S5>/Sine Wave4' */
  speedgoat_test_SN5659_R2020b_DW.systemEnable_gp = 1;
}

/* Model terminate function */
void speedgoat_test_SN5659_R2020b_terminate(void)
{
  /* Terminate for S-Function (sg_IO132_IO133_setup_s_v2): '<S2>/Setup v2 ' */
  /* Level2 S-Function Block: '<S2>/Setup v2 ' (sg_IO132_IO133_setup_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[2];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO132_IO133_ad_s_v2): '<S2>/Analog input v2 ' */
  /* Level2 S-Function Block: '<S2>/Analog input v2 ' (sg_IO132_IO133_ad_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[3];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO132_IO133_da_s_v2): '<S2>/Analog output v2 ' */
  /* Level2 S-Function Block: '<S2>/Analog output v2 ' (sg_IO132_IO133_da_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[4];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO132_IO133_di_s_v2): '<S2>/Digital input v2 ' */
  /* Level2 S-Function Block: '<S2>/Digital input v2 ' (sg_IO132_IO133_di_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[5];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO132_IO133_do_s_v2): '<S2>/Digital output v2 ' */
  /* Level2 S-Function Block: '<S2>/Digital output v2 ' (sg_IO132_IO133_do_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[6];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO204_setup_s): '<S3>/Setup' */
  /* Level2 S-Function Block: '<S3>/Setup' (sg_IO204_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[7];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO204_read_s): '<S3>/Read' */
  /* Level2 S-Function Block: '<S3>/Read' (sg_IO204_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[8];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO204_write_s): '<S3>/Write' */
  /* Level2 S-Function Block: '<S3>/Write' (sg_IO204_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[9];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_setup_s): '<S5>/Setup ' */
  /* Level2 S-Function Block: '<S5>/Setup ' (sg_serial_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[10];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO612_setup_s): '<S6>/CAN Setup' */
  /* Level2 S-Function Block: '<S6>/CAN Setup' (sg_IO612_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[11];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO61X_write_s): '<S6>/CAN Write' */
  /* Level2 S-Function Block: '<S6>/CAN Write' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[12];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO61X_write_s): '<S6>/CAN Write2' */
  /* Level2 S-Function Block: '<S6>/CAN Write2' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[13];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO61X_write_s): '<S6>/CAN Write3' */
  /* Level2 S-Function Block: '<S6>/CAN Write3' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[14];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO61X_write_s): '<S6>/CAN Write1' */
  /* Level2 S-Function Block: '<S6>/CAN Write1' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[15];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO61X_write_s): '<S6>/CAN Write4' */
  /* Level2 S-Function Block: '<S6>/CAN Write4' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[16];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO61X_write_s): '<S6>/CAN Write5' */
  /* Level2 S-Function Block: '<S6>/CAN Write5' (sg_IO61X_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[17];
    sfcnTerminate(rts);
  }

  /* Terminate for Iterator SubSystem: '<S6>/CAN Read Loop - Port 3' */

  /* Terminate for S-Function (sg_IO61X_read_s): '<S10>/CAN Read' */
  /* Level2 S-Function Block: '<S10>/CAN Read' (sg_IO61X_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[0];
    sfcnTerminate(rts);
  }

  /* End of Terminate for SubSystem: '<S6>/CAN Read Loop - Port 3' */

  /* Terminate for Iterator SubSystem: '<S6>/CAN Read Loop - Port 4' */

  /* Terminate for S-Function (sg_IO61X_read_s): '<S11>/CAN Read1' */
  /* Level2 S-Function Block: '<S11>/CAN Read1' (sg_IO61X_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[1];
    sfcnTerminate(rts);
  }

  /* End of Terminate for SubSystem: '<S6>/CAN Read Loop - Port 4' */

  /* Terminate for S-Function (sg_io682_setup_s_v3): '<S7>/Setup v2 ' */
  /* Level2 S-Function Block: '<S7>/Setup v2 ' (sg_io682_setup_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[18];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO107_da_s): '<S1>/Analog output' */
  /* Level2 S-Function Block: '<S1>/Analog output' (sg_IO107_da_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[19];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO107_da_s): '<S1>/Analog output1' */
  /* Level2 S-Function Block: '<S1>/Analog output1' (sg_IO107_da_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[20];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO107_setup_s): '<S1>/Setup' */
  /* Level2 S-Function Block: '<S1>/Setup' (sg_IO107_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[21];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO107_setup_s): '<S1>/Setup1' */
  /* Level2 S-Function Block: '<S1>/Setup1' (sg_IO107_setup_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[22];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO421_lvdt_read_s): '<S4>/LVDT read' */
  /* Level2 S-Function Block: '<S4>/LVDT read' (sg_IO421_lvdt_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[23];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO421_lvdt_read_s): '<S4>/LVDT read1' */
  /* Level2 S-Function Block: '<S4>/LVDT read1' (sg_IO421_lvdt_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[24];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IO421_ref_s): '<S4>/REF' */
  /* Level2 S-Function Block: '<S4>/REF' (sg_IO421_ref_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[25];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 ' */
  /* Level2 S-Function Block: '<S7>/Receive v2 ' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[26];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 1' */
  /* Level2 S-Function Block: '<S12>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[27];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 5' */
  /* Level2 S-Function Block: '<S12>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[28];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 3' */
  /* Level2 S-Function Block: '<S12>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[29];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 4' */
  /* Level2 S-Function Block: '<S12>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[30];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 1' */
  /* Level2 S-Function Block: '<S7>/Receive v2 1' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[31];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 1' */
  /* Level2 S-Function Block: '<S20>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[32];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 2' */
  /* Level2 S-Function Block: '<S20>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[33];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 3' */
  /* Level2 S-Function Block: '<S20>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[34];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S20>/Decode 4' */
  /* Level2 S-Function Block: '<S20>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[35];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 8' */
  /* Level2 S-Function Block: '<S7>/Receive v2 8' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[36];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 1' */
  /* Level2 S-Function Block: '<S27>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[37];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 5' */
  /* Level2 S-Function Block: '<S27>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[38];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 3' */
  /* Level2 S-Function Block: '<S27>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[39];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S27>/Decode 4' */
  /* Level2 S-Function Block: '<S27>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[40];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 9' */
  /* Level2 S-Function Block: '<S7>/Receive v2 9' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[41];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 1' */
  /* Level2 S-Function Block: '<S13>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[42];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 2' */
  /* Level2 S-Function Block: '<S13>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[43];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 3' */
  /* Level2 S-Function Block: '<S13>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[44];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 4' */
  /* Level2 S-Function Block: '<S13>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[45];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 10' */
  /* Level2 S-Function Block: '<S7>/Receive v2 10' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[46];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 1' */
  /* Level2 S-Function Block: '<S14>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[47];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 2' */
  /* Level2 S-Function Block: '<S14>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[48];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 3' */
  /* Level2 S-Function Block: '<S14>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[49];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 4' */
  /* Level2 S-Function Block: '<S14>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[50];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 11' */
  /* Level2 S-Function Block: '<S7>/Receive v2 11' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[51];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 1' */
  /* Level2 S-Function Block: '<S15>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[52];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 2' */
  /* Level2 S-Function Block: '<S15>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[53];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 3' */
  /* Level2 S-Function Block: '<S15>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[54];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 4' */
  /* Level2 S-Function Block: '<S15>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[55];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 12' */
  /* Level2 S-Function Block: '<S7>/Receive v2 12' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[56];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 1' */
  /* Level2 S-Function Block: '<S16>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[57];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 5' */
  /* Level2 S-Function Block: '<S16>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[58];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 3' */
  /* Level2 S-Function Block: '<S16>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[59];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 4' */
  /* Level2 S-Function Block: '<S16>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[60];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 13' */
  /* Level2 S-Function Block: '<S7>/Receive v2 13' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[61];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 1' */
  /* Level2 S-Function Block: '<S17>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[62];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 2' */
  /* Level2 S-Function Block: '<S17>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[63];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 3' */
  /* Level2 S-Function Block: '<S17>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[64];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 4' */
  /* Level2 S-Function Block: '<S17>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[65];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 14' */
  /* Level2 S-Function Block: '<S7>/Receive v2 14' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[66];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 1' */
  /* Level2 S-Function Block: '<S18>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[67];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 2' */
  /* Level2 S-Function Block: '<S18>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[68];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 3' */
  /* Level2 S-Function Block: '<S18>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[69];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 4' */
  /* Level2 S-Function Block: '<S18>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[70];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 15' */
  /* Level2 S-Function Block: '<S7>/Receive v2 15' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[71];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 1' */
  /* Level2 S-Function Block: '<S19>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[72];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 2' */
  /* Level2 S-Function Block: '<S19>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[73];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 3' */
  /* Level2 S-Function Block: '<S19>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[74];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S19>/Decode 4' */
  /* Level2 S-Function Block: '<S19>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[75];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 2' */
  /* Level2 S-Function Block: '<S7>/Receive v2 2' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[76];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 1' */
  /* Level2 S-Function Block: '<S21>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[77];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 2' */
  /* Level2 S-Function Block: '<S21>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[78];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 3' */
  /* Level2 S-Function Block: '<S21>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[79];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S21>/Decode 4' */
  /* Level2 S-Function Block: '<S21>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[80];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 3' */
  /* Level2 S-Function Block: '<S7>/Receive v2 3' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[81];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 1' */
  /* Level2 S-Function Block: '<S22>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[82];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 2' */
  /* Level2 S-Function Block: '<S22>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[83];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 3' */
  /* Level2 S-Function Block: '<S22>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[84];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S22>/Decode 4' */
  /* Level2 S-Function Block: '<S22>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[85];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 4' */
  /* Level2 S-Function Block: '<S7>/Receive v2 4' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[86];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 1' */
  /* Level2 S-Function Block: '<S23>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[87];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 5' */
  /* Level2 S-Function Block: '<S23>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[88];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 3' */
  /* Level2 S-Function Block: '<S23>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[89];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S23>/Decode 4' */
  /* Level2 S-Function Block: '<S23>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[90];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 5' */
  /* Level2 S-Function Block: '<S7>/Receive v2 5' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[91];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 1' */
  /* Level2 S-Function Block: '<S24>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[92];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 2' */
  /* Level2 S-Function Block: '<S24>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[93];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 3' */
  /* Level2 S-Function Block: '<S24>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[94];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S24>/Decode 4' */
  /* Level2 S-Function Block: '<S24>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[95];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 6' */
  /* Level2 S-Function Block: '<S7>/Receive v2 6' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[96];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 1' */
  /* Level2 S-Function Block: '<S25>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[97];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 2' */
  /* Level2 S-Function Block: '<S25>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[98];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 3' */
  /* Level2 S-Function Block: '<S25>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[99];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S25>/Decode 4' */
  /* Level2 S-Function Block: '<S25>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[100];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S7>/Receive v2 7' */
  /* Level2 S-Function Block: '<S7>/Receive v2 7' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[101];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 1' */
  /* Level2 S-Function Block: '<S26>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[102];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 2' */
  /* Level2 S-Function Block: '<S26>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[103];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 3' */
  /* Level2 S-Function Block: '<S26>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[104];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S26>/Decode 4' */
  /* Level2 S-Function Block: '<S26>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[105];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 1' */
  /* Level2 S-Function Block: '<S28>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[106];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 5' */
  /* Level2 S-Function Block: '<S28>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[107];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 3' */
  /* Level2 S-Function Block: '<S28>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[108];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 2' */
  /* Level2 S-Function Block: '<S28>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[109];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 ' */
  /* Level2 S-Function Block: '<S7>/Send v2 ' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[110];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 1' */
  /* Level2 S-Function Block: '<S29>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[111];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 2' */
  /* Level2 S-Function Block: '<S29>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[112];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 3' */
  /* Level2 S-Function Block: '<S29>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[113];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 4' */
  /* Level2 S-Function Block: '<S29>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[114];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 9' */
  /* Level2 S-Function Block: '<S7>/Send v2 9' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[115];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 1' */
  /* Level2 S-Function Block: '<S30>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[116];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 2' */
  /* Level2 S-Function Block: '<S30>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[117];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 3' */
  /* Level2 S-Function Block: '<S30>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[118];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 4' */
  /* Level2 S-Function Block: '<S30>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[119];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 10' */
  /* Level2 S-Function Block: '<S7>/Send v2 10' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[120];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 1' */
  /* Level2 S-Function Block: '<S31>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[121];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 2' */
  /* Level2 S-Function Block: '<S31>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[122];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 3' */
  /* Level2 S-Function Block: '<S31>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[123];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 4' */
  /* Level2 S-Function Block: '<S31>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[124];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 11' */
  /* Level2 S-Function Block: '<S7>/Send v2 11' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[125];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 1' */
  /* Level2 S-Function Block: '<S32>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[126];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 5' */
  /* Level2 S-Function Block: '<S32>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[127];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 3' */
  /* Level2 S-Function Block: '<S32>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[128];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 2' */
  /* Level2 S-Function Block: '<S32>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[129];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 12' */
  /* Level2 S-Function Block: '<S7>/Send v2 12' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[130];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 1' */
  /* Level2 S-Function Block: '<S33>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[131];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 2' */
  /* Level2 S-Function Block: '<S33>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[132];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 3' */
  /* Level2 S-Function Block: '<S33>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[133];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 4' */
  /* Level2 S-Function Block: '<S33>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[134];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 13' */
  /* Level2 S-Function Block: '<S7>/Send v2 13' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[135];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 1' */
  /* Level2 S-Function Block: '<S34>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[136];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 2' */
  /* Level2 S-Function Block: '<S34>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[137];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 3' */
  /* Level2 S-Function Block: '<S34>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[138];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 4' */
  /* Level2 S-Function Block: '<S34>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[139];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 14' */
  /* Level2 S-Function Block: '<S7>/Send v2 14' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[140];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 1' */
  /* Level2 S-Function Block: '<S35>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[141];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 2' */
  /* Level2 S-Function Block: '<S35>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[142];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 3' */
  /* Level2 S-Function Block: '<S35>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[143];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S35>/Encode 4' */
  /* Level2 S-Function Block: '<S35>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[144];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 15' */
  /* Level2 S-Function Block: '<S7>/Send v2 15' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[145];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 1' */
  /* Level2 S-Function Block: '<S36>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[146];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 2' */
  /* Level2 S-Function Block: '<S36>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[147];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 3' */
  /* Level2 S-Function Block: '<S36>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[148];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S36>/Encode 4' */
  /* Level2 S-Function Block: '<S36>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[149];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 1' */
  /* Level2 S-Function Block: '<S7>/Send v2 1' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[150];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 1' */
  /* Level2 S-Function Block: '<S37>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[151];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 2' */
  /* Level2 S-Function Block: '<S37>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[152];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 3' */
  /* Level2 S-Function Block: '<S37>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[153];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S37>/Encode 4' */
  /* Level2 S-Function Block: '<S37>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[154];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 2' */
  /* Level2 S-Function Block: '<S7>/Send v2 2' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[155];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 1' */
  /* Level2 S-Function Block: '<S38>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[156];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 2' */
  /* Level2 S-Function Block: '<S38>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[157];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 3' */
  /* Level2 S-Function Block: '<S38>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[158];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S38>/Encode 4' */
  /* Level2 S-Function Block: '<S38>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[159];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 3' */
  /* Level2 S-Function Block: '<S7>/Send v2 3' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[160];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 1' */
  /* Level2 S-Function Block: '<S39>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[161];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 5' */
  /* Level2 S-Function Block: '<S39>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[162];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 3' */
  /* Level2 S-Function Block: '<S39>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[163];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S39>/Encode 2' */
  /* Level2 S-Function Block: '<S39>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[164];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 4' */
  /* Level2 S-Function Block: '<S7>/Send v2 4' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[165];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 1' */
  /* Level2 S-Function Block: '<S40>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[166];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 2' */
  /* Level2 S-Function Block: '<S40>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[167];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 3' */
  /* Level2 S-Function Block: '<S40>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[168];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S40>/Encode 4' */
  /* Level2 S-Function Block: '<S40>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[169];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 5' */
  /* Level2 S-Function Block: '<S7>/Send v2 5' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[170];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 1' */
  /* Level2 S-Function Block: '<S41>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[171];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 2' */
  /* Level2 S-Function Block: '<S41>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[172];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 3' */
  /* Level2 S-Function Block: '<S41>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[173];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S41>/Encode 4' */
  /* Level2 S-Function Block: '<S41>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[174];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 6' */
  /* Level2 S-Function Block: '<S7>/Send v2 6' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[175];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 1' */
  /* Level2 S-Function Block: '<S42>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[176];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 2' */
  /* Level2 S-Function Block: '<S42>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[177];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 3' */
  /* Level2 S-Function Block: '<S42>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[178];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S42>/Encode 4' */
  /* Level2 S-Function Block: '<S42>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[179];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 7' */
  /* Level2 S-Function Block: '<S7>/Send v2 7' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[180];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 1' */
  /* Level2 S-Function Block: '<S43>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[181];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 5' */
  /* Level2 S-Function Block: '<S43>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[182];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 3' */
  /* Level2 S-Function Block: '<S43>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[183];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S43>/Encode 2' */
  /* Level2 S-Function Block: '<S43>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[184];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S7>/Send v2 8' */
  /* Level2 S-Function Block: '<S7>/Send v2 8' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[185];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_read_s): '<S5>/Read ' */
  /* Level2 S-Function Block: '<S5>/Read ' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[186];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciidecode): '<S5>/ASCII Decode' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[187];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_read_s): '<S5>/Read 1' */
  /* Level2 S-Function Block: '<S5>/Read 1' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[188];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciidecode): '<S5>/ASCII Decode1' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode1' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[189];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_read_s): '<S5>/Read 2' */
  /* Level2 S-Function Block: '<S5>/Read 2' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[190];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciidecode): '<S5>/ASCII Decode2' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode2' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[191];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_read_s): '<S5>/Read 3' */
  /* Level2 S-Function Block: '<S5>/Read 3' (sg_serial_read_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[192];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciidecode): '<S5>/ASCII Decode3' */
  /* Level2 S-Function Block: '<S5>/ASCII Decode3' (slasciidecode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[193];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciiencode): '<S5>/ASCII Encode' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[194];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_write_s): '<S5>/Write ' */
  /* Level2 S-Function Block: '<S5>/Write ' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[195];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciiencode): '<S5>/ASCII Encode1' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode1' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[196];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_write_s): '<S5>/Write 1' */
  /* Level2 S-Function Block: '<S5>/Write 1' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[197];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciiencode): '<S5>/ASCII Encode2' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode2' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[198];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_write_s): '<S5>/Write 2' */
  /* Level2 S-Function Block: '<S5>/Write 2' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[199];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (slasciiencode): '<S5>/ASCII Encode3' */
  /* Level2 S-Function Block: '<S5>/ASCII Encode3' (slasciiencode) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[200];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_serial_write_s): '<S5>/Write 3' */
  /* Level2 S-Function Block: '<S5>/Write 3' (sg_serial_write_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[201];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_IOPIL_relay_s): '<S8>/Relays ' */
  /* Level2 S-Function Block: '<S8>/Relays ' (sg_IOPIL_relay_s) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2020b_M->childSfunctions[202];
    sfcnTerminate(rts);
  }
}
