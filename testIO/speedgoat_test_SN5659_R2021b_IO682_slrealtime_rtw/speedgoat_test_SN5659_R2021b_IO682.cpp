/*
 * speedgoat_test_SN5659_R2021b_IO682.cpp
 *
 * Code generation for model "speedgoat_test_SN5659_R2021b_IO682".
 *
 * Model version              : 3.0
 * Simulink Coder version : 9.6 (R2021b) 14-May-2021
 * C++ source code generated on : Fri Apr  8 14:58:42 2022
 *
 * Target selection: slrealtime.tlc
 * Note: GRT includes extra infrastructure and instrumentation for prototyping
 * Embedded hardware selection: Intel->x86-64 (Linux 64)
 * Code generation objectives: Unspecified
 * Validation result: Not run
 */

#include "speedgoat_test_SN5659_R2021b_IO682.h"
#include "speedgoat_test_SN5659_R2021b_IO682_private.h"

/* Block signals (default storage) */
B_speedgoat_test_SN5659_R2021b_IO682_T speedgoat_test_SN5659_R2021b_IO682_B;

/* Block states (default storage) */
DW_speedgoat_test_SN5659_R2021b_IO682_T speedgoat_test_SN5659_R2021b_IO682_DW;

/* Real-time model */
RT_MODEL_speedgoat_test_SN5659_R2021b_IO682_T
  speedgoat_test_SN5659_R2021b_IO682_M_ =
  RT_MODEL_speedgoat_test_SN5659_R2021b_IO682_T();
RT_MODEL_speedgoat_test_SN5659_R2021b_IO682_T *const
  speedgoat_test_SN5659_R2021b_IO682_M = &speedgoat_test_SN5659_R2021b_IO682_M_;
real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T hi;
  uint32_T lo;

  /* Uniform random number generator (random number between 0 and 1)

     #define IA      16807                      magic multiplier = 7^5
     #define IM      2147483647                 modulus = 2^31-1
     #define IQ      127773                     IM div IA
     #define IR      2836                       IM modulo IA
     #define S       4.656612875245797e-10      reciprocal of 2^31-1
     test = IA * (seed % IQ) - IR * (seed/IQ)
     seed = test < 0 ? (test + IM) : test
     return (seed*S)
   */
  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T si;
  real_T sr;
  real_T y;

  /* Normal (Gaussian) random number generator */
  do {
    sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = sr * sr + si * si;
  } while (si > 1.0);

  y = std::sqrt(-2.0 * std::log(si) / si) * sr;
  return y;
}

/* Model step function */
void speedgoat_test_SN5659_R2021b_IO682_step(void)
{
  real_T HoldCosine;
  real_T HoldSine;

  /* S-Function (sg_io682_setup_s_v3): '<S1>/Setup v2 ' */

  /* Level2 S-Function Block: '<S1>/Setup v2 ' (sg_io682_setup_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[0];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 ' */

  /* Level2 S-Function Block: '<S1>/Receive v2 ' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[1];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 1' */

  /* Level2 S-Function Block: '<S3>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[2];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 5' */

  /* Level2 S-Function Block: '<S3>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[3];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 3' */

  /* Level2 S-Function Block: '<S3>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[4];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 4' */

  /* Level2 S-Function Block: '<S3>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[5];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 1' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH1[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH1[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode5;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH1[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH1[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 1' */

  /* Level2 S-Function Block: '<S1>/Receive v2 1' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[6];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 1' */

  /* Level2 S-Function Block: '<S11>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[7];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 2' */

  /* Level2 S-Function Block: '<S11>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[8];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 3' */

  /* Level2 S-Function Block: '<S11>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[9];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 4' */

  /* Level2 S-Function Block: '<S11>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[10];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 2' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH2[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_m;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH2[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH2[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_l;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH2[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_d;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 8' */

  /* Level2 S-Function Block: '<S1>/Receive v2 8' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[11];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 1' */

  /* Level2 S-Function Block: '<S18>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[12];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 5' */

  /* Level2 S-Function Block: '<S18>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[13];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 3' */

  /* Level2 S-Function Block: '<S18>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[14];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 4' */

  /* Level2 S-Function Block: '<S18>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[15];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 9' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH9[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_d;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH9[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode5_p;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH9[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_c;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH9[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_o;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 9' */

  /* Level2 S-Function Block: '<S1>/Receive v2 9' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[16];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 1' */

  /* Level2 S-Function Block: '<S4>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[17];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 2' */

  /* Level2 S-Function Block: '<S4>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[18];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 3' */

  /* Level2 S-Function Block: '<S4>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[19];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 4' */

  /* Level2 S-Function Block: '<S4>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[20];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 10' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH10[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_g;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH10[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_n;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH10[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_j;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH10[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_h;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 10' */

  /* Level2 S-Function Block: '<S1>/Receive v2 10' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[21];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 1' */

  /* Level2 S-Function Block: '<S5>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[22];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 2' */

  /* Level2 S-Function Block: '<S5>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[23];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 3' */

  /* Level2 S-Function Block: '<S5>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[24];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 4' */

  /* Level2 S-Function Block: '<S5>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[25];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 11' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH11[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_f;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH11[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_j;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH11[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_k;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH11[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_c;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 11' */

  /* Level2 S-Function Block: '<S1>/Receive v2 11' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[26];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 1' */

  /* Level2 S-Function Block: '<S6>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[27];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 2' */

  /* Level2 S-Function Block: '<S6>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[28];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 3' */

  /* Level2 S-Function Block: '<S6>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[29];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 4' */

  /* Level2 S-Function Block: '<S6>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[30];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 12' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH12[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_a;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH12[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_j2;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH12[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_m;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH12[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_a;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 12' */

  /* Level2 S-Function Block: '<S1>/Receive v2 12' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[31];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 1' */

  /* Level2 S-Function Block: '<S7>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[32];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 5' */

  /* Level2 S-Function Block: '<S7>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[33];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 3' */

  /* Level2 S-Function Block: '<S7>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[34];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 4' */

  /* Level2 S-Function Block: '<S7>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[35];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 13' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH13[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_i;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH13[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode5_i;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH13[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_o;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH13[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_b;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 13' */

  /* Level2 S-Function Block: '<S1>/Receive v2 13' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[36];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 1' */

  /* Level2 S-Function Block: '<S8>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[37];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 2' */

  /* Level2 S-Function Block: '<S8>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[38];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 3' */

  /* Level2 S-Function Block: '<S8>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[39];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 4' */

  /* Level2 S-Function Block: '<S8>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[40];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 14' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH14[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_my;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH14[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_i;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH14[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_n;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH14[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_c1;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 14' */

  /* Level2 S-Function Block: '<S1>/Receive v2 14' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[41];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 1' */

  /* Level2 S-Function Block: '<S9>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[42];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 2' */

  /* Level2 S-Function Block: '<S9>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[43];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 3' */

  /* Level2 S-Function Block: '<S9>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[44];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 4' */

  /* Level2 S-Function Block: '<S9>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[45];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 15' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH15[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_n;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH15[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_b;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH15[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_cq;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH15[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_oi;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 15' */

  /* Level2 S-Function Block: '<S1>/Receive v2 15' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[46];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 1' */

  /* Level2 S-Function Block: '<S10>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[47];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 2' */

  /* Level2 S-Function Block: '<S10>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[48];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 3' */

  /* Level2 S-Function Block: '<S10>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[49];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 4' */

  /* Level2 S-Function Block: '<S10>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[50];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 16' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH16[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_al;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH16[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_l;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH16[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_ou;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH16[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_p;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 2' */

  /* Level2 S-Function Block: '<S1>/Receive v2 2' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[51];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 1' */

  /* Level2 S-Function Block: '<S12>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[52];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 2' */

  /* Level2 S-Function Block: '<S12>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[53];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 3' */

  /* Level2 S-Function Block: '<S12>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[54];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 4' */

  /* Level2 S-Function Block: '<S12>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[55];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 3' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH3[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_p;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH3[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_ba;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH3[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_a;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH3[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_f;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 3' */

  /* Level2 S-Function Block: '<S1>/Receive v2 3' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[56];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 1' */

  /* Level2 S-Function Block: '<S13>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[57];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 2' */

  /* Level2 S-Function Block: '<S13>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[58];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 3' */

  /* Level2 S-Function Block: '<S13>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[59];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 4' */

  /* Level2 S-Function Block: '<S13>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[60];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 4' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH4[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_pf;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH4[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_k;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH4[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_b;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH4[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_ff;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 4' */

  /* Level2 S-Function Block: '<S1>/Receive v2 4' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[61];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 1' */

  /* Level2 S-Function Block: '<S14>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[62];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 5' */

  /* Level2 S-Function Block: '<S14>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[63];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 3' */

  /* Level2 S-Function Block: '<S14>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[64];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 4' */

  /* Level2 S-Function Block: '<S14>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[65];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 5' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH5[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_io;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH5[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode5_b;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH5[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_ny;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH5[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_j;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 5' */

  /* Level2 S-Function Block: '<S1>/Receive v2 5' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[66];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 1' */

  /* Level2 S-Function Block: '<S15>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[67];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 2' */

  /* Level2 S-Function Block: '<S15>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[68];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 3' */

  /* Level2 S-Function Block: '<S15>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[69];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 4' */

  /* Level2 S-Function Block: '<S15>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[70];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 6' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH6[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_gi;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH6[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_f;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH6[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_o4;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH6[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_f4;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 6' */

  /* Level2 S-Function Block: '<S1>/Receive v2 6' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[71];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 1' */

  /* Level2 S-Function Block: '<S16>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[72];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 2' */

  /* Level2 S-Function Block: '<S16>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[73];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 3' */

  /* Level2 S-Function Block: '<S16>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[74];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 4' */

  /* Level2 S-Function Block: '<S16>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[75];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 7' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH7[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_p1;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH7[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_h;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH7[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_lc;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH7[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_l;

  /* S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 7' */

  /* Level2 S-Function Block: '<S1>/Receive v2 7' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[76];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 1' */

  /* Level2 S-Function Block: '<S17>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[77];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 2' */

  /* Level2 S-Function Block: '<S17>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[78];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 3' */

  /* Level2 S-Function Block: '<S17>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[79];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 4' */

  /* Level2 S-Function Block: '<S17>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[80];
    sfcnOutputs(rts,0);
  }

  /* SignalConversion generated from: '<S1>/Decode Channel 8' */
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH8[0] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode1_b;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH8[1] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode2_nz;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH8[2] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode3_mj;
  speedgoat_test_SN5659_R2021b_IO682_B.IO682_SerialIN_CH8[3] =
    speedgoat_test_SN5659_R2021b_IO682_B.Decode4_m;

  /* RandomNumber: '<S19>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput;

  /* S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 1' */

  /* Level2 S-Function Block: '<S19>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[81];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S35>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_o =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_c;

  /* DataTypeConversion: '<S19>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_o;

  /* S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 5' */

  /* Level2 S-Function Block: '<S19>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[82];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S19>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable = 0;
  }

  /* Sin: '<S19>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias;

  /* S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 3' */

  /* Level2 S-Function Block: '<S19>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[83];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S36>/Divide' incorporates:
   *  Constant: '<S19>/Constant'
   *  Constant: '<S36>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide =
    speedgoat_test_SN5659_R2021_cal->Constant_Value /
    speedgoat_test_SN5659_R2021_cal->Scale_Value;

  /* Product: '<S36>/Multiply' incorporates:
   *  Constant: '<S36>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_V;

  /* DataTypeConversion: '<S36>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S36>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_k5 = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S36>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_k5 &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask;

  /* ArithShift: '<S36>/Shift to SSM slot' incorporates:
   *  Constant: '<S36>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot =
    speedgoat_test_SN5659_R2021_cal->SSM_Value << 29;

  /* ArithShift: '<S36>/Shift to SDI slot' incorporates:
   *  Constant: '<S36>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot =
    speedgoat_test_SN5659_R2021_cal->SDI_Value << 8;

  /* S-Function (sfix_bitop): '<S36>/Bitwise Operator' incorporates:
   *  Constant: '<S36>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot |
    speedgoat_test_SN5659_R2021_cal->Label_Value;

  /* DataTypeConversion: '<S36>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1 =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator;

  /* S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 2' */

  /* Level2 S-Function Block: '<S19>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[84];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 ' */

  /* Level2 S-Function Block: '<S1>/Send v2 ' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[85];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S37>/FixPt Sum1' incorporates:
   *  Constant: '<S37>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_i = static_cast<uint8_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_o) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_h);

  /* Switch: '<S38>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_i >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_i) {
    /* Switch: '<S38>/FixPt Switch' incorporates:
     *  Constant: '<S38>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_ha =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_av;
  } else {
    /* Switch: '<S38>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_ha =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_i;
  }

  /* End of Switch: '<S38>/FixPt Switch' */

  /* RandomNumber: '<S20>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_c =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_a;

  /* S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 1' */

  /* Level2 S-Function Block: '<S20>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[86];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S39>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE;

  /* DataTypeConversion: '<S20>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_h =
    speedgoat_test_SN5659_R2021b_IO682_B.Output;

  /* S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 2' */

  /* Level2 S-Function Block: '<S20>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[87];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S20>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_n != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_c = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_p *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_p = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_p *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_n = 0;
  }

  /* Sin: '<S20>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_o =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_c *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_c +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_p *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_p) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_l +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_p *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_c -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_c *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_p) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_j) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_o +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_k;

  /* S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 3' */

  /* Level2 S-Function Block: '<S20>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[88];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S40>/Divide' incorporates:
   *  Constant: '<S20>/Constant'
   *  Constant: '<S40>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_k =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_j /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_l;

  /* Product: '<S40>/Multiply' incorporates:
   *  Constant: '<S40>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_h =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_k *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_o;

  /* DataTypeConversion: '<S40>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_h);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S40>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_c = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S40>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_a =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_c &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_h;

  /* ArithShift: '<S40>/Shift to SSM slot' incorporates:
   *  Constant: '<S40>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_h =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_o << 29;

  /* ArithShift: '<S40>/Shift to SDI slot' incorporates:
   *  Constant: '<S40>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_l =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_d << 8;

  /* S-Function (sfix_bitop): '<S40>/Bitwise Operator' incorporates:
   *  Constant: '<S40>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_m =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_a |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_h |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_l |
    speedgoat_test_SN5659_R2021_cal->Label_Value_d;

  /* DataTypeConversion: '<S40>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_g =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_m;

  /* S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 4' */

  /* Level2 S-Function Block: '<S20>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[89];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 9' */

  /* Level2 S-Function Block: '<S1>/Send v2 9' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[90];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S41>/FixPt Sum1' incorporates:
   *  Constant: '<S41>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1 = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value);

  /* Switch: '<S42>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1 >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit) {
    /* Switch: '<S42>/FixPt Switch' incorporates:
     *  Constant: '<S42>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_c;
  } else {
    /* Switch: '<S42>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1;
  }

  /* End of Switch: '<S42>/FixPt Switch' */

  /* RandomNumber: '<S21>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_p =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_n;

  /* S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 1' */

  /* Level2 S-Function Block: '<S21>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[91];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S43>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_b =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_o;

  /* DataTypeConversion: '<S21>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_e =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_b;

  /* S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 2' */

  /* Level2 S-Function Block: '<S21>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[92];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S21>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_b != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_m = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_g *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_m = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_g *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_b = 0;
  }

  /* Sin: '<S21>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_f =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_m *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_j +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_m *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_h) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_j +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_m *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_j -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_m *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_h) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_n) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_i +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_c;

  /* S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 3' */

  /* Level2 S-Function Block: '<S21>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[93];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S44>/Divide' incorporates:
   *  Constant: '<S21>/Constant'
   *  Constant: '<S44>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_h =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_i /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_a;

  /* Product: '<S44>/Multiply' incorporates:
   *  Constant: '<S44>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_a =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_h *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_p;

  /* DataTypeConversion: '<S44>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_a);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S44>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_ec = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S44>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_n =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_ec &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_k;

  /* ArithShift: '<S44>/Shift to SSM slot' incorporates:
   *  Constant: '<S44>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_m =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_l << 29;

  /* ArithShift: '<S44>/Shift to SDI slot' incorporates:
   *  Constant: '<S44>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_a =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_m << 8;

  /* S-Function (sfix_bitop): '<S44>/Bitwise Operator' incorporates:
   *  Constant: '<S44>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_a =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_n |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_m |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_a |
    speedgoat_test_SN5659_R2021_cal->Label_Value_e;

  /* DataTypeConversion: '<S44>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_i =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_a;

  /* S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 4' */

  /* Level2 S-Function Block: '<S21>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[94];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 10' */

  /* Level2 S-Function Block: '<S1>/Send v2 10' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[95];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S45>/FixPt Sum1' incorporates:
   *  Constant: '<S45>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_n = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_b) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_a);

  /* Switch: '<S46>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_n >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_d) {
    /* Switch: '<S46>/FixPt Switch' incorporates:
     *  Constant: '<S46>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_h =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_dm;
  } else {
    /* Switch: '<S46>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_h =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_n;
  }

  /* End of Switch: '<S46>/FixPt Switch' */

  /* RandomNumber: '<S22>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_b =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_f;

  /* S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 1' */

  /* Level2 S-Function Block: '<S22>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[96];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S47>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_p =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_o0;

  /* DataTypeConversion: '<S22>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_j =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_p;

  /* S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 2' */

  /* Level2 S-Function Block: '<S22>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[97];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S22>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_f != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_ct = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_a *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_a = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_a *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_f = 0;
  }

  /* Sin: '<S22>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_k =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_ct *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_p +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_a *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_c) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_j4 +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_a *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_p -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_ct *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_c) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_d) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_d +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_e;

  /* S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 3' */

  /* Level2 S-Function Block: '<S22>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[98];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S48>/Divide' incorporates:
   *  Constant: '<S22>/Constant'
   *  Constant: '<S48>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_p =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_e /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_b;

  /* Product: '<S48>/Multiply' incorporates:
   *  Constant: '<S48>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_j =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_p *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_g;

  /* DataTypeConversion: '<S48>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_j);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S48>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_jj = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S48>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_i =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_jj &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_d;

  /* ArithShift: '<S48>/Shift to SSM slot' incorporates:
   *  Constant: '<S48>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_b =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_n << 29;

  /* ArithShift: '<S48>/Shift to SDI slot' incorporates:
   *  Constant: '<S48>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_k =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_l << 8;

  /* S-Function (sfix_bitop): '<S48>/Bitwise Operator' incorporates:
   *  Constant: '<S48>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_p =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_i |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_b |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_k |
    speedgoat_test_SN5659_R2021_cal->Label_Value_j;

  /* DataTypeConversion: '<S48>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_p =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_p;

  /* S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 4' */

  /* Level2 S-Function Block: '<S22>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[99];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 11' */

  /* Level2 S-Function Block: '<S1>/Send v2 11' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[100];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S49>/FixPt Sum1' incorporates:
   *  Constant: '<S49>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_a = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_p) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_o);

  /* Switch: '<S50>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_a >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_k) {
    /* Switch: '<S50>/FixPt Switch' incorporates:
     *  Constant: '<S50>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_b =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_n;
  } else {
    /* Switch: '<S50>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_b =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_a;
  }

  /* End of Switch: '<S50>/FixPt Switch' */

  /* RandomNumber: '<S23>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_pz =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_nj;

  /* S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 1' */

  /* Level2 S-Function Block: '<S23>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[101];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S51>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_j =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_m;

  /* DataTypeConversion: '<S23>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_p =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_j;

  /* S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 5' */

  /* Level2 S-Function Block: '<S23>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[102];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S23>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_m != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_p = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_m *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_af = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_m *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_m = 0;
  }

  /* Sin: '<S23>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_p =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_p *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_h +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_af *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_e) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_o +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_af *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_h -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_p *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_e) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_h +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_m;

  /* S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 3' */

  /* Level2 S-Function Block: '<S23>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[103];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S52>/Divide' incorporates:
   *  Constant: '<S23>/Constant'
   *  Constant: '<S52>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_i =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_d /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_f;

  /* Product: '<S52>/Multiply' incorporates:
   *  Constant: '<S52>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_he =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_i *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_i;

  /* DataTypeConversion: '<S52>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_he);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S52>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_b = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S52>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_c =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_b &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_e;

  /* ArithShift: '<S52>/Shift to SSM slot' incorporates:
   *  Constant: '<S52>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_k =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_m << 29;

  /* ArithShift: '<S52>/Shift to SDI slot' incorporates:
   *  Constant: '<S52>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_b =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_a << 8;

  /* S-Function (sfix_bitop): '<S52>/Bitwise Operator' incorporates:
   *  Constant: '<S52>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_k =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_c |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_k |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_b |
    speedgoat_test_SN5659_R2021_cal->Label_Value_ex;

  /* DataTypeConversion: '<S52>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_n =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_k;

  /* S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 2' */

  /* Level2 S-Function Block: '<S23>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[104];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 12' */

  /* Level2 S-Function Block: '<S1>/Send v2 12' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[105];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S53>/FixPt Sum1' incorporates:
   *  Constant: '<S53>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_g = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_j) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_oz);

  /* Switch: '<S54>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_g >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_c) {
    /* Switch: '<S54>/FixPt Switch' incorporates:
     *  Constant: '<S54>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_a;
  } else {
    /* Switch: '<S54>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_g;
  }

  /* End of Switch: '<S54>/FixPt Switch' */

  /* RandomNumber: '<S24>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_n =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ni;

  /* S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 1' */

  /* Level2 S-Function Block: '<S24>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[106];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S55>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_m =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_oy;

  /* DataTypeConversion: '<S24>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_o =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_m;

  /* S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 2' */

  /* Level2 S-Function Block: '<S24>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[107];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S24>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_j != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_d = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_ah *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_h = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_ah *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_j = 0;
  }

  /* Sin: '<S24>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_g =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_d *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_f +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_h *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_f) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_jn +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_h *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_f -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_d *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_f) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_i) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_n +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_j;

  /* S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 3' */

  /* Level2 S-Function Block: '<S24>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[108];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S56>/Divide' incorporates:
   *  Constant: '<S24>/Constant'
   *  Constant: '<S56>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_j =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_g /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_d;

  /* Product: '<S56>/Multiply' incorporates:
   *  Constant: '<S56>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_i =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_j *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitslef_pp;

  /* DataTypeConversion: '<S56>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_i);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S56>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_er = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S56>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_m =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_er &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_p;

  /* ArithShift: '<S56>/Shift to SSM slot' incorporates:
   *  Constant: '<S56>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_mi =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_j << 29;

  /* ArithShift: '<S56>/Shift to SDI slot' incorporates:
   *  Constant: '<S56>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_km =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_h << 8;

  /* S-Function (sfix_bitop): '<S56>/Bitwise Operator' incorporates:
   *  Constant: '<S56>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_c =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_m |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_mi |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_km |
    speedgoat_test_SN5659_R2021_cal->Label_Value_f;

  /* DataTypeConversion: '<S56>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_gm =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_c;

  /* S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 4' */

  /* Level2 S-Function Block: '<S24>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[109];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 13' */

  /* Level2 S-Function Block: '<S1>/Send v2 13' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[110];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S57>/FixPt Sum1' incorporates:
   *  Constant: '<S57>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_e = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_m) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_j);

  /* Switch: '<S58>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_e >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_n) {
    /* Switch: '<S58>/FixPt Switch' incorporates:
     *  Constant: '<S58>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_bx =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_k;
  } else {
    /* Switch: '<S58>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_bx =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_e;
  }

  /* End of Switch: '<S58>/FixPt Switch' */

  /* RandomNumber: '<S25>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_m =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ft;

  /* S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 1' */

  /* Level2 S-Function Block: '<S25>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[111];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S59>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_e =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_e;

  /* DataTypeConversion: '<S25>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_d =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_e;

  /* S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 2' */

  /* Level2 S-Function Block: '<S25>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[112];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S25>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_a != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_du = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_c *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_l = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_c *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_a = 0;
  }

  /* Sin: '<S25>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_kh =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_du *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_a +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_l *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_fk) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_jg +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_l *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_a -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_du *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_fk) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o1) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_hh +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_g;

  /* S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 3' */

  /* Level2 S-Function Block: '<S25>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[113];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S60>/Divide' incorporates:
   *  Constant: '<S25>/Constant'
   *  Constant: '<S60>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_g =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_l /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_c;

  /* Product: '<S60>/Multiply' incorporates:
   *  Constant: '<S60>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_n =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_g *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitslef_oj;

  /* DataTypeConversion: '<S60>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_n);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S60>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_fb = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S60>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_h =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_fb &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_pd;

  /* ArithShift: '<S60>/Shift to SSM slot' incorporates:
   *  Constant: '<S60>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_f =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_ji << 29;

  /* ArithShift: '<S60>/Shift to SDI slot' incorporates:
   *  Constant: '<S60>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_c =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_i << 8;

  /* S-Function (sfix_bitop): '<S60>/Bitwise Operator' incorporates:
   *  Constant: '<S60>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_f =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_h |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_f |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_c |
    speedgoat_test_SN5659_R2021_cal->Label_Value_b;

  /* DataTypeConversion: '<S60>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_ga =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_f;

  /* S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 4' */

  /* Level2 S-Function Block: '<S25>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[114];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 14' */

  /* Level2 S-Function Block: '<S1>/Send v2 14' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[115];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S61>/FixPt Sum1' incorporates:
   *  Constant: '<S61>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_o = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_e) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_l);

  /* Switch: '<S62>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_o >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_cp) {
    /* Switch: '<S62>/FixPt Switch' incorporates:
     *  Constant: '<S62>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_lo =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_aq;
  } else {
    /* Switch: '<S62>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_lo =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_o;
  }

  /* End of Switch: '<S62>/FixPt Switch' */

  /* RandomNumber: '<S26>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_br =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_i;

  /* S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 1' */

  /* Level2 S-Function Block: '<S26>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[116];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S63>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_k =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_k;

  /* DataTypeConversion: '<S26>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_jr =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_k;

  /* S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 2' */

  /* Level2 S-Function Block: '<S26>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[117];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S26>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_p != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_f = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_mo *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ld = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_mo *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_p = 0;
  }

  /* Sin: '<S26>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_a =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_f *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_m +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ld *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_m) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_f +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ld *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_m -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_f *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_m) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_h) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_c +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_kg;

  /* S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 3' */

  /* Level2 S-Function Block: '<S26>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[118];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S64>/Divide' incorporates:
   *  Constant: '<S26>/Constant'
   *  Constant: '<S64>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_k3 =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_o /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_i;

  /* Product: '<S64>/Multiply' incorporates:
   *  Constant: '<S64>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_hd =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_k3 *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_h;

  /* DataTypeConversion: '<S64>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_hd);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S64>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_f5 = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S64>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_h0 =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_f5 &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_a;

  /* ArithShift: '<S64>/Shift to SSM slot' incorporates:
   *  Constant: '<S64>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_m3 =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_i << 29;

  /* ArithShift: '<S64>/Shift to SDI slot' incorporates:
   *  Constant: '<S64>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_m =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_m3 << 8;

  /* S-Function (sfix_bitop): '<S64>/Bitwise Operator' incorporates:
   *  Constant: '<S64>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_e =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_h0 |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_m3 |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_m |
    speedgoat_test_SN5659_R2021_cal->Label_Value_k;

  /* DataTypeConversion: '<S64>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_d =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_e;

  /* S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 4' */

  /* Level2 S-Function Block: '<S26>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[119];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 15' */

  /* Level2 S-Function Block: '<S1>/Send v2 15' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[120];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S65>/FixPt Sum1' incorporates:
   *  Constant: '<S65>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_d = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_k) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_i);

  /* Switch: '<S66>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_d >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_g) {
    /* Switch: '<S66>/FixPt Switch' incorporates:
     *  Constant: '<S66>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l2 =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_p;
  } else {
    /* Switch: '<S66>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l2 =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_d;
  }

  /* End of Switch: '<S66>/FixPt Switch' */

  /* RandomNumber: '<S27>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_e =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_j;

  /* S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 1' */

  /* Level2 S-Function Block: '<S27>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[121];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S67>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_g =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_e0;

  /* DataTypeConversion: '<S27>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_hu =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_g;

  /* S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 2' */

  /* Level2 S-Function Block: '<S27>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[122];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S27>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_ml != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_e = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_l *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_lh = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_l *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_ml = 0;
  }

  /* Sin: '<S27>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_o5 =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_e *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_k +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_lh *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_g) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_b +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_lh *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_k -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_e *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_g) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_e) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_nm +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_jq;

  /* S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 3' */

  /* Level2 S-Function Block: '<S27>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[123];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S68>/Divide' incorporates:
   *  Constant: '<S27>/Constant'
   *  Constant: '<S68>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_g4 =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_b /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_k;

  /* Product: '<S68>/Multiply' incorporates:
   *  Constant: '<S68>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_il =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_g4 *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_j;

  /* DataTypeConversion: '<S68>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_il);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S68>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_bh = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S68>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_d =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_bh &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_l;

  /* ArithShift: '<S68>/Shift to SSM slot' incorporates:
   *  Constant: '<S68>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_g =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_na << 29;

  /* ArithShift: '<S68>/Shift to SDI slot' incorporates:
   *  Constant: '<S68>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_g =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_l4 << 8;

  /* S-Function (sfix_bitop): '<S68>/Bitwise Operator' incorporates:
   *  Constant: '<S68>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_j =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_d |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_g |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_g |
    speedgoat_test_SN5659_R2021_cal->Label_Value_n;

  /* DataTypeConversion: '<S68>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_l =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_j;

  /* S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 4' */

  /* Level2 S-Function Block: '<S27>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[124];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 1' */

  /* Level2 S-Function Block: '<S1>/Send v2 1' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[125];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S69>/FixPt Sum1' incorporates:
   *  Constant: '<S69>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_fe = static_cast<uint8_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_g) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_k0);

  /* Switch: '<S70>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_fe >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_be) {
    /* Switch: '<S70>/FixPt Switch' incorporates:
     *  Constant: '<S70>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_jo =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_ee;
  } else {
    /* Switch: '<S70>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_jo =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_fe;
  }

  /* End of Switch: '<S70>/FixPt Switch' */

  /* RandomNumber: '<S28>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_f =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_m;

  /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 1' */

  /* Level2 S-Function Block: '<S28>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[126];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S71>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_b2 =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_g;

  /* DataTypeConversion: '<S28>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_dd =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_b2;

  /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 2' */

  /* Level2 S-Function Block: '<S28>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[127];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S28>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_bx != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pg = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_b *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_g = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_b *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_bx = 0;
  }

  /* Sin: '<S28>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_oh =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pg *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_ma +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_g *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_gt) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_bz +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_g *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_ma -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pg *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_gt) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_h4) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_a +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_mn;

  /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 3' */

  /* Level2 S-Function Block: '<S28>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[128];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S72>/Divide' incorporates:
   *  Constant: '<S28>/Constant'
   *  Constant: '<S72>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_n =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_ek /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_e;

  /* Product: '<S72>/Multiply' incorporates:
   *  Constant: '<S72>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_e =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_n *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_n;

  /* DataTypeConversion: '<S72>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_e);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S72>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_l = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S72>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_k =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_l &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_e3;

  /* ArithShift: '<S72>/Shift to SSM slot' incorporates:
   *  Constant: '<S72>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_kz =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_os << 29;

  /* ArithShift: '<S72>/Shift to SDI slot' incorporates:
   *  Constant: '<S72>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_n =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_p << 8;

  /* S-Function (sfix_bitop): '<S72>/Bitwise Operator' incorporates:
   *  Constant: '<S72>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_a4 =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_k |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_kz |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_n |
    speedgoat_test_SN5659_R2021_cal->Label_Value_fv;

  /* DataTypeConversion: '<S72>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_a =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_a4;

  /* S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 4' */

  /* Level2 S-Function Block: '<S28>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[129];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 2' */

  /* Level2 S-Function Block: '<S1>/Send v2 2' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[130];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S73>/FixPt Sum1' incorporates:
   *  Constant: '<S73>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_h = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_b2) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_oq);

  /* Switch: '<S74>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_h >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_e) {
    /* Switch: '<S74>/FixPt Switch' incorporates:
     *  Constant: '<S74>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_d =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_j5;
  } else {
    /* Switch: '<S74>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_d =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_h;
  }

  /* End of Switch: '<S74>/FixPt Switch' */

  /* RandomNumber: '<S29>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_g =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_h;

  /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 1' */

  /* Level2 S-Function Block: '<S29>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[131];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S75>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_d =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_p;

  /* DataTypeConversion: '<S29>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_f =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_d;

  /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 2' */

  /* Level2 S-Function Block: '<S29>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[132];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S29>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_g != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_l = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_lw *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ge = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_lw *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_g = 0;
  }

  /* Sin: '<S29>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_n =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_l *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_jo +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ge *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_px) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_e +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ge *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_jo -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_l *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_px) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_a) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_m +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_o;

  /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 3' */

  /* Level2 S-Function Block: '<S29>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[133];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S76>/Divide' incorporates:
   *  Constant: '<S29>/Constant'
   *  Constant: '<S76>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_o =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_gg /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_o;

  /* Product: '<S76>/Multiply' incorporates:
   *  Constant: '<S76>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_b =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_o *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitslef_jt;

  /* DataTypeConversion: '<S76>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_b);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S76>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_fr = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S76>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_p =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_fr &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_f;

  /* ArithShift: '<S76>/Shift to SSM slot' incorporates:
   *  Constant: '<S76>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_e =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_nl << 29;

  /* ArithShift: '<S76>/Shift to SDI slot' incorporates:
   *  Constant: '<S76>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_ck =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_g << 8;

  /* S-Function (sfix_bitop): '<S76>/Bitwise Operator' incorporates:
   *  Constant: '<S76>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_pk =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_p |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_e |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_ck |
    speedgoat_test_SN5659_R2021_cal->Label_Value_l;

  /* DataTypeConversion: '<S76>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_gh =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_pk;

  /* S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 4' */

  /* Level2 S-Function Block: '<S29>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[134];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 3' */

  /* Level2 S-Function Block: '<S1>/Send v2 3' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[135];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S77>/FixPt Sum1' incorporates:
   *  Constant: '<S77>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_f = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_d) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_k);

  /* Switch: '<S78>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_f >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_p) {
    /* Switch: '<S78>/FixPt Switch' incorporates:
     *  Constant: '<S78>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_j =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_ly;
  } else {
    /* Switch: '<S78>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_j =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_f;
  }

  /* End of Switch: '<S78>/FixPt Switch' */

  /* RandomNumber: '<S30>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_i =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ir;

  /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 1' */

  /* Level2 S-Function Block: '<S30>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[136];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S79>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_jl =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_b;

  /* DataTypeConversion: '<S30>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_hb =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_jl;

  /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 5' */

  /* Level2 S-Function Block: '<S30>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[137];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S30>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_pe != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_i = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_am *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_o = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_am *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_pe = 0;
  }

  /* Sin: '<S30>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_d =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_i *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_d +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_o *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_d) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_p +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_o *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_d -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_i *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_d) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_p) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_h5 +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_a;

  /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 3' */

  /* Level2 S-Function Block: '<S30>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[138];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S80>/Divide' incorporates:
   *  Constant: '<S30>/Constant'
   *  Constant: '<S80>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_m =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_h /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_g;

  /* Product: '<S80>/Multiply' incorporates:
   *  Constant: '<S80>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_m =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_m *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_d;

  /* DataTypeConversion: '<S80>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_m);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S80>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_dn = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S80>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_cs =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_dn &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_c;

  /* ArithShift: '<S80>/Shift to SSM slot' incorporates:
   *  Constant: '<S80>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_n =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_f << 29;

  /* ArithShift: '<S80>/Shift to SDI slot' incorporates:
   *  Constant: '<S80>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_d =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_ai << 8;

  /* S-Function (sfix_bitop): '<S80>/Bitwise Operator' incorporates:
   *  Constant: '<S80>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_b =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_cs |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_n |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_d |
    speedgoat_test_SN5659_R2021_cal->Label_Value_kp;

  /* DataTypeConversion: '<S80>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_nb =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_b;

  /* S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 2' */

  /* Level2 S-Function Block: '<S30>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[139];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 4' */

  /* Level2 S-Function Block: '<S1>/Send v2 4' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[140];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S81>/FixPt Sum1' incorporates:
   *  Constant: '<S81>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_h2 = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_jl) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_m);

  /* Switch: '<S82>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_h2 >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_ck) {
    /* Switch: '<S82>/FixPt Switch' incorporates:
     *  Constant: '<S82>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_k =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_ng;
  } else {
    /* Switch: '<S82>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_k =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_h2;
  }

  /* End of Switch: '<S82>/FixPt Switch' */

  /* RandomNumber: '<S31>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_i2 =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_hu;

  /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 1' */

  /* Level2 S-Function Block: '<S31>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[141];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S83>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_i =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_f;

  /* DataTypeConversion: '<S31>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_n =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_i;

  /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 2' */

  /* Level2 S-Function Block: '<S31>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[142];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S31>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_i != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_a = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_cn *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_oy = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_cn *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_i = 0;
  }

  /* Sin: '<S31>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_fe =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_a *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_e +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_oy *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_l) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_i +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_oy *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_e -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_a *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_l) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_c) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_m2 +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_ac;

  /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 3' */

  /* Level2 S-Function Block: '<S31>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[143];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S84>/Divide' incorporates:
   *  Constant: '<S31>/Constant'
   *  Constant: '<S84>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_pl =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_f /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_h;

  /* Product: '<S84>/Multiply' incorporates:
   *  Constant: '<S84>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_k =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_pl *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_b;

  /* DataTypeConversion: '<S84>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_k);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S84>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_m = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S84>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_my =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_m &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_er;

  /* ArithShift: '<S84>/Shift to SSM slot' incorporates:
   *  Constant: '<S84>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_et =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_a << 29;

  /* ArithShift: '<S84>/Shift to SDI slot' incorporates:
   *  Constant: '<S84>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_mf =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_ig << 8;

  /* S-Function (sfix_bitop): '<S84>/Bitwise Operator' incorporates:
   *  Constant: '<S84>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_eh =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_my |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_et |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_mf |
    speedgoat_test_SN5659_R2021_cal->Label_Value_p;

  /* DataTypeConversion: '<S84>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_f =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_eh;

  /* S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 4' */

  /* Level2 S-Function Block: '<S31>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[144];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 5' */

  /* Level2 S-Function Block: '<S1>/Send v2 5' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[145];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S85>/FixPt Sum1' incorporates:
   *  Constant: '<S85>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_m = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_i) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_n);

  /* Switch: '<S86>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_m >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_l) {
    /* Switch: '<S86>/FixPt Switch' incorporates:
     *  Constant: '<S86>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_hh =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_oy;
  } else {
    /* Switch: '<S86>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_hh =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_m;
  }

  /* End of Switch: '<S86>/FixPt Switch' */

  /* RandomNumber: '<S32>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_d =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_p;

  /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 1' */

  /* Level2 S-Function Block: '<S32>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[146];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S87>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_bg =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_h;

  /* DataTypeConversion: '<S32>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_i =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_bg;

  /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 2' */

  /* Level2 S-Function Block: '<S32>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[147];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S32>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_jy != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pf = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_a2 *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_j = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_a2 *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_jy = 0;
  }

  /* Sin: '<S32>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_ff =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pf *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_n +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_j *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_o) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_h +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_j *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_n -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pf *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_o) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_cy) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_ch +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_d;

  /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 3' */

  /* Level2 S-Function Block: '<S32>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[148];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S88>/Divide' incorporates:
   *  Constant: '<S32>/Constant'
   *  Constant: '<S88>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_c =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_bz /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_e3;

  /* Product: '<S88>/Multiply' incorporates:
   *  Constant: '<S88>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_hz =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_c *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitslef_jj;

  /* DataTypeConversion: '<S88>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_hz);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S88>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_cp = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S88>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_b =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_cp &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_f3;

  /* ArithShift: '<S88>/Shift to SSM slot' incorporates:
   *  Constant: '<S88>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_o =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_g << 29;

  /* ArithShift: '<S88>/Shift to SDI slot' incorporates:
   *  Constant: '<S88>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_bb =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_k << 8;

  /* S-Function (sfix_bitop): '<S88>/Bitwise Operator' incorporates:
   *  Constant: '<S88>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_n =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_b |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_o |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_bb |
    speedgoat_test_SN5659_R2021_cal->Label_Value_jf;

  /* DataTypeConversion: '<S88>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_fw =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_n;

  /* S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 4' */

  /* Level2 S-Function Block: '<S32>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[149];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 6' */

  /* Level2 S-Function Block: '<S1>/Send v2 6' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[150];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S89>/FixPt Sum1' incorporates:
   *  Constant: '<S89>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_he = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_bg) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_ie);

  /* Switch: '<S90>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_he >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_du) {
    /* Switch: '<S90>/FixPt Switch' incorporates:
     *  Constant: '<S90>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_a =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_pl;
  } else {
    /* Switch: '<S90>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_a =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_he;
  }

  /* End of Switch: '<S90>/FixPt Switch' */

  /* RandomNumber: '<S33>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_n4 =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_jn;

  /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 1' */

  /* Level2 S-Function Block: '<S33>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[151];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S91>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_mw =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_m4;

  /* DataTypeConversion: '<S33>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_k =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_mw;

  /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 2' */

  /* Level2 S-Function Block: '<S33>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[152];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S33>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_gv != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_iv = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_j *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_c = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_j *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_gv = 0;
  }

  /* Sin: '<S33>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_m =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_iv *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_l +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_c *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_b) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_h2 +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_c *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_l -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_iv *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_b) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_jl) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_hw +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_p;

  /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 3' */

  /* Level2 S-Function Block: '<S33>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[153];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S92>/Divide' incorporates:
   *  Constant: '<S33>/Constant'
   *  Constant: '<S92>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_oc =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_b5 /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_kb;

  /* Product: '<S92>/Multiply' incorporates:
   *  Constant: '<S92>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_kl =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_oc *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitsleft_f;

  /* DataTypeConversion: '<S92>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_kl);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S92>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_is = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S92>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_aj =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_is &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_kz;

  /* ArithShift: '<S92>/Shift to SSM slot' incorporates:
   *  Constant: '<S92>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_ea =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_p << 29;

  /* ArithShift: '<S92>/Shift to SDI slot' incorporates:
   *  Constant: '<S92>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_f =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_im << 8;

  /* S-Function (sfix_bitop): '<S92>/Bitwise Operator' incorporates:
   *  Constant: '<S92>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_b5 =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_aj |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_ea |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_f |
    speedgoat_test_SN5659_R2021_cal->Label_Value_pn;

  /* DataTypeConversion: '<S92>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_j =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_b5;

  /* S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 4' */

  /* Level2 S-Function Block: '<S33>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[154];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 7' */

  /* Level2 S-Function Block: '<S1>/Send v2 7' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[155];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S93>/FixPt Sum1' incorporates:
   *  Constant: '<S93>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_p = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_mw) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_b);

  /* Switch: '<S94>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_p >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_b) {
    /* Switch: '<S94>/FixPt Switch' incorporates:
     *  Constant: '<S94>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l0 =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_pv;
  } else {
    /* Switch: '<S94>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l0 =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_p;
  }

  /* End of Switch: '<S94>/FixPt Switch' */

  /* RandomNumber: '<S34>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_j =
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_b;

  /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 1' */

  /* Level2 S-Function Block: '<S34>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[156];
    sfcnOutputs(rts,0);
  }

  /* UnitDelay: '<S95>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_B.Output_pd =
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_fw;

  /* DataTypeConversion: '<S34>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_dw =
    speedgoat_test_SN5659_R2021b_IO682_B.Output_pd;

  /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 5' */

  /* Level2 S-Function Block: '<S34>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[157];
    sfcnOutputs(rts,0);
  }

  /* Sin: '<S34>/Sine wave' */
  if (speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_o != 0) {
    speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_fv = std::sin
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_k *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_b = std::cos
      (speedgoat_test_SN5659_R2021_cal->Sinewave_Freq_k *
       speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0]);
    speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_o = 0;
  }

  /* Sin: '<S34>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_ao =
    ((speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_fv *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_lt +
      speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_b *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_bm) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_n +
     (speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_b *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PCos_lt -
      speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_fv *
      speedgoat_test_SN5659_R2021_cal->Sinewave_PSin_bm) *
     speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o2) *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Amp_f +
    speedgoat_test_SN5659_R2021_cal->Sinewave_Bias_je;

  /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 3' */

  /* Level2 S-Function Block: '<S34>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[158];
    sfcnOutputs(rts,0);
  }

  /* Product: '<S96>/Divide' incorporates:
   *  Constant: '<S34>/Constant'
   *  Constant: '<S96>/Scale'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Divide_os =
    speedgoat_test_SN5659_R2021_cal->Constant_Value_le /
    speedgoat_test_SN5659_R2021_cal->Scale_Value_n;

  /* Product: '<S96>/Multiply' incorporates:
   *  Constant: '<S96>/'shift' the double value 27 bits left'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.Multiply_c =
    speedgoat_test_SN5659_R2021b_IO682_B.Divide_os *
    speedgoat_test_SN5659_R2021_cal->shiftthedoublevalue27bitslef_hk;

  /* DataTypeConversion: '<S96>/Data Type Conversion' */
  HoldSine = std::floor(speedgoat_test_SN5659_R2021b_IO682_B.Multiply_c);
  if (rtIsNaN(HoldSine) || rtIsInf(HoldSine)) {
    HoldSine = 0.0;
  } else {
    HoldSine = std::fmod(HoldSine, 4.294967296E+9);
  }

  /* DataTypeConversion: '<S96>/Data Type Conversion' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_ku = HoldSine < 0.0 ?
    static_cast<uint32_T>(-static_cast<int32_T>(static_cast<uint32_T>(-HoldSine)))
    : static_cast<uint32_T>(HoldSine);

  /* S-Function (sfix_bitop): '<S96>/Mask ' */
  speedgoat_test_SN5659_R2021b_IO682_B.Mask_cy =
    speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_ku &
    speedgoat_test_SN5659_R2021_cal->Mask_BitMask_cx;

  /* ArithShift: '<S96>/Shift to SSM slot' incorporates:
   *  Constant: '<S96>/SSM'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_hy =
    speedgoat_test_SN5659_R2021_cal->SSM_Value_jt << 29;

  /* ArithShift: '<S96>/Shift to SDI slot' incorporates:
   *  Constant: '<S96>/SDI'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_fi =
    speedgoat_test_SN5659_R2021_cal->SDI_Value_mq << 8;

  /* S-Function (sfix_bitop): '<S96>/Bitwise Operator' incorporates:
   *  Constant: '<S96>/Label'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_fl =
    speedgoat_test_SN5659_R2021b_IO682_B.Mask_cy |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSSMslot_hy |
    speedgoat_test_SN5659_R2021b_IO682_B.ShifttoSDIslot_fi |
    speedgoat_test_SN5659_R2021_cal->Label_Value_kg;

  /* DataTypeConversion: '<S96>/Data Type Conversion1' */
  speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_e =
    speedgoat_test_SN5659_R2021b_IO682_B.BitwiseOperator_fl;

  /* S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 2' */

  /* Level2 S-Function Block: '<S34>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[159];
    sfcnOutputs(rts,0);
  }

  /* S-Function (sg_io682_send_s_v3): '<S1>/Send v2 8' */

  /* Level2 S-Function Block: '<S1>/Send v2 8' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[160];
    sfcnOutputs(rts,0);
  }

  /* Sum: '<S97>/FixPt Sum1' incorporates:
   *  Constant: '<S97>/FixPt Constant'
   */
  speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_b = static_cast<uint16_T>(
    static_cast<uint32_T>(speedgoat_test_SN5659_R2021b_IO682_B.Output_pd) +
    speedgoat_test_SN5659_R2021_cal->FixPtConstant_Value_jp);

  /* Switch: '<S98>/FixPt Switch' */
  if (speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_b >
      speedgoat_test_SN5659_R2021_cal->CounterLimited_uplimit_a) {
    /* Switch: '<S98>/FixPt Switch' incorporates:
     *  Constant: '<S98>/Constant'
     */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_m =
      speedgoat_test_SN5659_R2021_cal->Constant_Value_b2;
  } else {
    /* Switch: '<S98>/FixPt Switch' */
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_m =
      speedgoat_test_SN5659_R2021b_IO682_B.FixPtSum1_b;
  }

  /* End of Switch: '<S98>/FixPt Switch' */

  /* Update for RandomNumber: '<S19>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf(
    &speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed) *
    speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean;

  /* Update for UnitDelay: '<S35>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_c =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_ha;

  /* Update for Sin: '<S19>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin;

  /* Update for RandomNumber: '<S20>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_a =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_m)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_a +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_f;

  /* Update for UnitDelay: '<S39>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch;

  /* Update for Sin: '<S20>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_c;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_p;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_c = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_l + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_j;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_p = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_l - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_j;

  /* Update for RandomNumber: '<S21>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_n =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_h)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_l +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_k;

  /* Update for UnitDelay: '<S43>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_o =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_h;

  /* Update for Sin: '<S21>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_m;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_m;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_m = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_j + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_n;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_m = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_j - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_n;

  /* Update for RandomNumber: '<S22>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_f =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_k)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_j +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_fn;

  /* Update for UnitDelay: '<S47>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_o0 =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_b;

  /* Update for Sin: '<S22>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_ct;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_a;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_ct = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_j4 + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_d;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_a = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_j4 - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_d;

  /* Update for RandomNumber: '<S23>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_nj =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_g)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_k +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_a;

  /* Update for UnitDelay: '<S51>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_m =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l;

  /* Update for Sin: '<S23>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_p;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_af;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_p = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_o + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_af = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_o - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o;

  /* Update for RandomNumber: '<S24>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ni =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_f)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_g +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_h;

  /* Update for UnitDelay: '<S55>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_oy =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_bx;

  /* Update for Sin: '<S24>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_d;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_h;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_d = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_jn + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_i;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_h = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_jn - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_i;

  /* Update for RandomNumber: '<S25>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ft =
    rt_nrand_Upu32_Yd_f_pw_snf
    (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_f4) *
    speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_l4 +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_b;

  /* Update for UnitDelay: '<S59>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_e =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_lo;

  /* Update for Sin: '<S25>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_du;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_l;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_du = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_jg + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o1;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_l = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_jg - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o1;

  /* Update for RandomNumber: '<S26>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_i =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_i)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_n +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_fh;

  /* Update for UnitDelay: '<S63>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_k =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l2;

  /* Update for Sin: '<S26>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_f;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ld;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_f = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_f + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_h;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ld = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_f - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_h;

  /* Update for RandomNumber: '<S27>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_j =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_d)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_m +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_f3;

  /* Update for UnitDelay: '<S67>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_e0 =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_jo;

  /* Update for Sin: '<S27>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_e;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_lh;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_e = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_b + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_e;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_lh = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_b - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_e;

  /* Update for RandomNumber: '<S28>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_m =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_b)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_f +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_d;

  /* Update for UnitDelay: '<S71>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_g =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_d;

  /* Update for Sin: '<S28>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pg;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_g;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pg = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_bz + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_h4;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_g = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_bz - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_h4;

  /* Update for RandomNumber: '<S29>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_h =
    rt_nrand_Upu32_Yd_f_pw_snf
    (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_hi) *
    speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_b +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_p;

  /* Update for UnitDelay: '<S75>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_p =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_j;

  /* Update for Sin: '<S29>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_l;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ge;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_l = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_e + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_a;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_ge = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_e - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_a;

  /* Update for RandomNumber: '<S30>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ir =
    rt_nrand_Upu32_Yd_f_pw_snf
    (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_bw) *
    speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_mo +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_c;

  /* Update for UnitDelay: '<S79>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_b =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_k;

  /* Update for Sin: '<S30>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_i;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_o;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_i = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_p + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_p;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_o = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_p - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_p;

  /* Update for RandomNumber: '<S31>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_hu =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_j)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_o +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_l;

  /* Update for UnitDelay: '<S83>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_f =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_hh;

  /* Update for Sin: '<S31>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_a;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_oy;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_a = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_i + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_c;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_oy = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_i - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_c;

  /* Update for RandomNumber: '<S32>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_p =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_n)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_fs +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_pl;

  /* Update for UnitDelay: '<S87>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_h =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_a;

  /* Update for Sin: '<S32>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pf;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_j;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_pf = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_h + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_cy;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_j = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_h - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_cy;

  /* Update for RandomNumber: '<S33>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_jn =
    rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_l)
    * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_e +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_pz;

  /* Update for UnitDelay: '<S91>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_m4 =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_l0;

  /* Update for Sin: '<S33>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_iv;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_c;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_iv = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_h2 + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_jl;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_c = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_h2 - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_jl;

  /* Update for RandomNumber: '<S34>/Random number' */
  speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_b =
    rt_nrand_Upu32_Yd_f_pw_snf
    (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_fs) *
    speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_oa +
    speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_fb;

  /* Update for UnitDelay: '<S95>/Output' */
  speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_fw =
    speedgoat_test_SN5659_R2021b_IO682_B.FixPtSwitch_m;

  /* Update for Sin: '<S34>/Sine wave' */
  HoldSine = speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_fv;
  HoldCosine = speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_b;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastSin_fv = HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_n + HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o2;
  speedgoat_test_SN5659_R2021b_IO682_DW.lastCos_b = HoldCosine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_HCos_n - HoldSine *
    speedgoat_test_SN5659_R2021_cal->Sinewave_Hsin_o2;

  /* Update absolute time for base rate */
  /* The "clockTick0" counts the number of times the code of this task has
   * been executed. The absolute time is the multiplication of "clockTick0"
   * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
   * overflow during the application lifespan selected.
   * Timer of this task consists of two 32 bit unsigned integers.
   * The two integers represent the low bits Timing.clockTick0 and the high bits
   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.
   */
  if (!(++speedgoat_test_SN5659_R2021b_IO682_M->Timing.clockTick0)) {
    ++speedgoat_test_SN5659_R2021b_IO682_M->Timing.clockTickH0;
  }

  speedgoat_test_SN5659_R2021b_IO682_M->Timing.t[0] =
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.clockTick0 *
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.stepSize0 +
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.clockTickH0 *
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.stepSize0 * 4294967296.0;
}

/* Model initialize function */
void speedgoat_test_SN5659_R2021b_IO682_initialize(void)
{
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
  rtsiSetSolverName(&speedgoat_test_SN5659_R2021b_IO682_M->solverInfo,
                    "FixedStepDiscrete");
  speedgoat_test_SN5659_R2021b_IO682_M->solverInfoPtr =
    (&speedgoat_test_SN5659_R2021b_IO682_M->solverInfo);

  /* Initialize timing info */
  {
    int_T *mdlTsMap =
      speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleTimeTaskIDArray;
    mdlTsMap[0] = 0;

    /* polyspace +2 MISRA2012:D4.1 [Justified:Low] "speedgoat_test_SN5659_R2021b_IO682_M points to
       static memory which is guaranteed to be non-NULL" */
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleTimeTaskIDPtr =
      (&mdlTsMap[0]);
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleTimes =
      (&speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleTimesArray[0]);
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.offsetTimes =
      (&speedgoat_test_SN5659_R2021b_IO682_M->Timing.offsetTimesArray[0]);

    /* task periods */
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleTimes[0] = (0.005);

    /* task offsets */
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.offsetTimes[0] = (0.0);
  }

  rtmSetTPtr(speedgoat_test_SN5659_R2021b_IO682_M,
             &speedgoat_test_SN5659_R2021b_IO682_M->Timing.tArray[0]);

  {
    int_T *mdlSampleHits =
      speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleHitArray;
    mdlSampleHits[0] = 1;
    speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleHits = (&mdlSampleHits[0]);
  }

  rtmSetTFinal(speedgoat_test_SN5659_R2021b_IO682_M, -1);
  speedgoat_test_SN5659_R2021b_IO682_M->Timing.stepSize0 = 0.005;
  speedgoat_test_SN5659_R2021b_IO682_M->solverInfoPtr =
    (&speedgoat_test_SN5659_R2021b_IO682_M->solverInfo);
  speedgoat_test_SN5659_R2021b_IO682_M->Timing.stepSize = (0.005);
  rtsiSetFixedStepSize(&speedgoat_test_SN5659_R2021b_IO682_M->solverInfo, 0.005);
  rtsiSetSolverMode(&speedgoat_test_SN5659_R2021b_IO682_M->solverInfo,
                    SOLVER_MODE_SINGLETASKING);

  /* block I/O */
  (void) std::memset((static_cast<void *>(&speedgoat_test_SN5659_R2021b_IO682_B)),
                     0,
                     sizeof(B_speedgoat_test_SN5659_R2021b_IO682_T));

  /* states (dwork) */
  (void) std::memset(static_cast<void *>(&speedgoat_test_SN5659_R2021b_IO682_DW),
                     0,
                     sizeof(DW_speedgoat_test_SN5659_R2021b_IO682_T));

  /* child S-Function registration */
  {
    RTWSfcnInfo *sfcnInfo =
      &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.sfcnInfo;
    speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo = (sfcnInfo);
    rtssSetErrorStatusPtr(sfcnInfo, (&rtmGetErrorStatus
      (speedgoat_test_SN5659_R2021b_IO682_M)));
    speedgoat_test_SN5659_R2021b_IO682_M->Sizes.numSampTimes = (1);
    rtssSetNumRootSampTimesPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2021b_IO682_M->Sizes.numSampTimes);
    speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.taskTimePtrs[0] =
      &(rtmGetTPtr(speedgoat_test_SN5659_R2021b_IO682_M)[0]);
    rtssSetTPtrPtr(sfcnInfo,
                   speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.taskTimePtrs);
    rtssSetTStartPtr(sfcnInfo, &rtmGetTStart
                     (speedgoat_test_SN5659_R2021b_IO682_M));
    rtssSetTFinalPtr(sfcnInfo, &rtmGetTFinal
                     (speedgoat_test_SN5659_R2021b_IO682_M));
    rtssSetTimeOfLastOutputPtr(sfcnInfo, &rtmGetTimeOfLastOutput
      (speedgoat_test_SN5659_R2021b_IO682_M));
    rtssSetStepSizePtr(sfcnInfo,
                       &speedgoat_test_SN5659_R2021b_IO682_M->Timing.stepSize);
    rtssSetStopRequestedPtr(sfcnInfo, &rtmGetStopRequested
      (speedgoat_test_SN5659_R2021b_IO682_M));
    rtssSetDerivCacheNeedsResetPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2021b_IO682_M->derivCacheNeedsReset);
    rtssSetZCCacheNeedsResetPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2021b_IO682_M->zCCacheNeedsReset);
    rtssSetContTimeOutputInconsistentWithStateAtMajorStepPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2021b_IO682_M->CTOutputIncnstWithState);
    rtssSetSampleHitsPtr(sfcnInfo,
                         &speedgoat_test_SN5659_R2021b_IO682_M->Timing.sampleHits);
    rtssSetPerTaskSampleHitsPtr(sfcnInfo,
      &speedgoat_test_SN5659_R2021b_IO682_M->Timing.perTaskSampleHits);
    rtssSetSimModePtr(sfcnInfo, &speedgoat_test_SN5659_R2021b_IO682_M->simMode);
    rtssSetSolverInfoPtr(sfcnInfo,
                         &speedgoat_test_SN5659_R2021b_IO682_M->solverInfoPtr);
  }

  speedgoat_test_SN5659_R2021b_IO682_M->Sizes.numSFcns = (161);

  /* register each child */
  {
    (void) std::memset(static_cast<void *>
                       (&speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.childSFunctions
                        [0]), 0,
                       161*sizeof(SimStruct));
    speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions =
      (&speedgoat_test_SN5659_R2021b_IO682_M->
       NonInlinedSFcns.childSFunctionPtrs[0]);

    {
      int_T i;
      for (i = 0; i < 161; i++) {
        speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[i] =
          (&speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.childSFunctions
           [i]);
      }
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Setup v2  (sg_io682_setup_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[0];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn0.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn0.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn0.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [0]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [0]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [0]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [0]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [0]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [0]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [0]);
      }

      /* path info */
      ssSetModelName(rts, "Setup v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Setup v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn0.params;
        ssSetSFcnParamsCount(rts, 8);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Setupv2_P8_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Setupv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn0.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn0.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Setupv2_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_setup_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2  (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[1];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [1]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [1]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [1]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [1]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [1]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [1]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [1]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev2_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn1.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev2_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S3>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[2];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [2]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [2]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [2]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [2]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [2]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [2]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [2]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 1/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn2.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK
                   [0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S3>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[3];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [3]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [3]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [3]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [3]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [3]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [3]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [3]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode5));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 1/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn3.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK
                   [0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S3>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[4];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [4]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [4]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [4]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [4]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [4]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [4]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [4]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 1/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn4.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK
                   [0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S3>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[5];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [5]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [5]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [5]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [5]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [5]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [5]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [5]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 1/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn5.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK
                   [0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 1 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[6];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [6]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [6]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [6]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [6]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [6]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [6]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [6]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev21));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev21_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev21_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev21_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev21_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev21_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev21_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn6.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev21_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S11>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[7];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [7]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [7]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [7]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [7]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [7]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [7]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [7]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_m));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 2/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_a);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_l);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_h);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_o);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn7.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_o);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S11>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[8];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [8]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [8]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [8]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [8]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [8]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [8]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [8]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 2/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn8.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1, &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK
                   [0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S11>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[9];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [9]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [9]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [9]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [9]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [9]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [9]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [9]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 2/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_g);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_e);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_c);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_f);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_c[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn9.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_f);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_c[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S11>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[10];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [10]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [10]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [10]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [10]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [10]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [10]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [10]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev21);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 2/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_b);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_m);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_d);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn10.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_d);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 8 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[11];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [11]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [11]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [11]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [11]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [11]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [11]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [11]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev28));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 8");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 8");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev28_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev28_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev28_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev28_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev28_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev28_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn11.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev28_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S18>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[12];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [12]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [12]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [12]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [12]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [12]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [12]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [12]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 9/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_j);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_l[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn12.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_l[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S18>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[13];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [13]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [13]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [13]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [13]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [13]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [13]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [13]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode5_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 9/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P15_Size_g);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK_h);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK_i[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn13.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK_h);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK_i[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S18>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[14];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [14]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [14]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [14]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [14]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [14]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [14]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [14]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 9/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_l);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_b);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_j[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn14.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_b);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_j[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S18>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[15];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [15]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [15]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [15]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [15]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [15]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [15]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [15]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev28);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 9/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_h);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_h);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_f);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_e);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_l);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn15.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_l);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 9 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[16];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [16]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [16]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [16]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [16]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [16]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [16]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [16]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev29));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 9");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 9");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev29_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev29_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev29_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev29_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev29_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev29_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn16.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev29_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S4>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[17];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [17]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [17]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [17]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [17]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [17]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [17]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [17]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_g));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 10/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_e);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_kc);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_i);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_o[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn17.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_i);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_o[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S4>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[18];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [18]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [18]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [18]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [18]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [18]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [18]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [18]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 10/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_k);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_e);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_o);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_g);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_e);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_l[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn18.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_e);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_l[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S4>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[19];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [19]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [19]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [19]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [19]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [19]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [19]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [19]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 10/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_lh);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_cd);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_af);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_cx);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_i);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_gs);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_p);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_o);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_l5);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_b5);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_h[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn19.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_b5);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_h[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S4>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[20];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [20]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [20]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [20]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [20]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [20]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [20]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [20]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev29);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 10/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_b0);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_c3);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_d);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_n);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_f);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn20.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_f);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 10 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[21];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [21]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [21]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [21]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [21]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [21]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [21]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [21]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev210));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 10");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 10");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev210_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev210_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev210_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev210_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev210_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev210_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn21.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev210_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S5>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[22];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [22]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [22]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [22]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [22]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [22]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [22]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [22]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 11/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_eu);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_l);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_h);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_ea);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_g);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_g);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_h[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn22.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_g);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_h[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S5>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[23];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [23]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [23]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [23]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [23]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [23]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [23]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [23]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 11/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_p);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_n);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_kj);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_d);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_j2);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_h);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_k);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_p[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn23.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_k);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_p[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S5>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[24];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [24]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [24]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [24]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [24]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [24]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [24]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [24]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 11/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_g1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_op);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_gf);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_g);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_h);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn24.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_h);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S5>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[25];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [25]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [25]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [25]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [25]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [25]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [25]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [25]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev210);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 11/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_cm);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_ni);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_oc);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_my);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_o);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_n);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_j[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn25.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_n);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_j[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 11 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[26];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [26]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [26]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [26]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [26]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [26]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [26]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [26]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev211));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 11");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 11");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev211_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev211_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev211_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev211_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev211_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev211_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn26.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev211_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S6>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[27];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [27]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [27]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [27]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [27]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [27]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [27]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [27]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 12/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_lf);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_hx);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_dc);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_hh);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_kh);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_kd);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_pj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_m);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_d);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_l);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_e[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn27.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_l);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_e[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S6>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[28];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [28]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [28]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [28]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [28]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [28]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [28]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [28]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_j2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 12/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_kj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_od);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_k);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_l);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_a[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn28.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_l);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_a[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S6>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[29];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [29]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [29]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [29]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [29]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [29]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [29]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [29]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_m));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 12/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_kw);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_go);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_ma);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_ls);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_i);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_g);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_a);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn29.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_a);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S6>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[30];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [30]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [30]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [30]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [30]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [30]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [30]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [30]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev211);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 12/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_j0);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_o);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_n3);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_d0);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_g);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_e);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_k[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn30.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_k[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 12 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[31];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [31]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [31]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [31]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [31]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [31]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [31]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [31]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev212));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 12");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 12");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev212_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev212_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev212_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev212_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev212_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev212_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn31.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev212_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S7>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[32];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [32]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [32]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [32]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [32]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [32]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [32]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [32]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 13/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_po);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_ng);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_pv);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_hy);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_lk);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_ot);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_a);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_e);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_gr);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_i[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn32.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_gr);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_i[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S7>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[33];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [33]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [33]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [33]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [33]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [33]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [33]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [33]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode5_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 13/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P2_Size_b);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P9_Size_g);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P12_Size_or);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P16_Size_f);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK_k[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn33.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK_k[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S7>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[34];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [34]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [34]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [34]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [34]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [34]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [34]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [34]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 13/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_h);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_ns);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_kg);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_d);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_ki);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_l);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_p);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_p);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_e);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_e[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn34.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_e);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_e[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S7>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[35];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [35]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [35]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [35]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [35]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [35]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [35]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [35]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev212);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 13/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_oh);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_k);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_ip);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_ph);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_mw);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_e1);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_ci);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_mw[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn35.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_ci);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_mw[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 13 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[36];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [36]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [36]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [36]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [36]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [36]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [36]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [36]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev213));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 13");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 13");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev213_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev213_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev213_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev213_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev213_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev213_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn36.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev213_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S8>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[37];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [37]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [37]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [37]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [37]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [37]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [37]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [37]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_my));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 14/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_pu);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_m2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_ah);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_jz);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_dg);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_ez);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_ma);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_lj);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_k);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_p);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn37.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_p);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S8>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[38];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [38]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [38]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [38]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [38]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [38]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [38]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [38]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 14/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_kc);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_l);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_n);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_lc[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn38.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_n);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_lc[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S8>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[39];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [39]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [39]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [39]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [39]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [39]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [39]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [39]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 14/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_gw);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_bw);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_au);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_ci);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_ob);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_h1);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_ga);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_h);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_gc);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_p[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn39.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_p[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S8>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[40];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [40]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [40]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [40]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [40]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [40]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [40]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [40]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev213);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_c1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 14/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_ed);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_jy);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_am);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_aj);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_eb);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_g);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_fq);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_a);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_ex);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_f1);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_me[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn40.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_f1);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_me[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 14 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[41];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [41]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [41]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [41]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [41]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [41]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [41]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [41]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev214));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 14");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 14");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev214_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev214_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev214_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev214_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev214_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev214_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn41.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev214_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S9>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[42];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [42]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [42]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [42]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [42]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [42]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [42]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [42]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 15/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_h);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_om);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_c0);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_k2);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_kp);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_ao);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_o);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_he);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_m);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn42.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_m);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S9>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[43];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [43]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [43]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [43]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [43]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [43]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [43]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [43]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 15/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_g);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_i);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_fe);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_ht);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_i);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_a);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_c);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_f);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn43.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_f);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S9>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[44];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [44]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [44]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [44]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [44]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [44]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [44]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [44]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_cq));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 15/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_hr);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_nu);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_ix);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_oo);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_iy);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_f4);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_hi);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_a);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_ag);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_cp[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn44.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_ag);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_cp[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S9>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[45];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [45]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [45]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [45]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [45]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [45]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [45]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [45]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev214);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_oi));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 15/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_ev);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_a4);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_nl);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_mf);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_fu);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_m);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_i);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_f5[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn45.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_i);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_f5[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 15 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[46];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [46]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [46]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [46]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [46]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [46]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [46]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [46]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev215));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 15");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 15");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev215_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev215_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev215_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev215_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev215_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev215_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn46.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev215_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S10>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[47];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [47]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [47]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [47]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [47]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [47]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [47]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [47]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_al));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 16/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_ds);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_pi);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_gh);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_gy);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_ed);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_el);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_oz);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_eo);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_b3);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_g3);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_pr);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_hs[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn47.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_pr);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_hs[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S10>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[48];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [48]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [48]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [48]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [48]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [48]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [48]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [48]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 16/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_ka);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_aj);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_pl);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_ma);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_oj);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_gj);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_i);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn48.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_i);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S10>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[49];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [49]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [49]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [49]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [49]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [49]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [49]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [49]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_ou));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 16/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_pn);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_oo);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_du);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_bf);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_pf);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_pw);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_gy);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_pi);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_d);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_pe);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_ct);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_a[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn49.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_ct);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_a[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S10>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[50];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [50]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [50]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [50]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [50]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [50]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [50]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [50]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev215);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 16/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_ct);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_ku);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_oq);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_cx);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_i);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_gk);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_c);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_lj);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_fa);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_g[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn50.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_fa);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_g[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 2 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[51];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [51]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [51]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [51]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [51]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [51]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [51]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [51]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev22));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev22_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev22_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev22_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev22_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev22_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev22_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn51.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev22_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S12>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[52];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [52]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [52]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [52]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [52]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [52]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [52]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [52]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 3/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_l2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_js);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_f);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_ex);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_o3);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_ir);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_cv);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_f);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_h);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_o2[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn52.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_h);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_o2[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S12>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[53];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [53]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [53]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [53]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [53]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [53]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [53]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [53]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_ba));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 3/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_gy);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_au);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_jy);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_f);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_pu);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_m);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_cz);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_iz);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_f[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn53.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_iz);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_f[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S12>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[54];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [54]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [54]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [54]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [54]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [54]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [54]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [54]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 3/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_ly);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_ku);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_l5);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_cz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_in);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_gs);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_a5);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_cq[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn54.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_a5);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_cq[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S12>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[55];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [55]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [55]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [55]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [55]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [55]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [55]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [55]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev22);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 3/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_lm);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_fz);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_fq);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_dm);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_nv);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_ci3);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_o[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn55.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_ci3);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_o[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 3 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[56];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [56]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [56]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [56]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [56]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [56]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [56]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [56]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev23));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev23_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev23_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev23_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev23_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev23_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev23_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn56.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev23_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S13>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[57];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [57]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [57]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [57]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [57]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [57]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [57]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [57]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_pf));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 4/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_mq);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_hc);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_fk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_b);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_nt);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_a);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_hq);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_i);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_c);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_b);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_lf[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn57.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_b);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_lf[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S13>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[58];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [58]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [58]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [58]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [58]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [58]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [58]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [58]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 4/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_k1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_iy);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_f1);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_jb);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_kv);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_gw);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_eu);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_d3);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_m4);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_n);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_a);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_c);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_j[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn58.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_c);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_j[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S13>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[59];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [59]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [59]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [59]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [59]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [59]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [59]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [59]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 4/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_nx);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_ab);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_go);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_gm);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_ia);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_po);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_bf);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_m[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn59.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_bf);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_m[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S13>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[60];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [60]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [60]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [60]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [60]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [60]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [60]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [60]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev23);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_ff));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 4/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_nn);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_cd);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_pb);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_ja);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_fq);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_dt);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_mz);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_at);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_a);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_j);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_g);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_l[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn60.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_g);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_l[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 4 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[61];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [61]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [61]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [61]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [61]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [61]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [61]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [61]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev24));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 4");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev24_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev24_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev24_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev24_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev24_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev24_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn61.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev24_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S14>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[62];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [62]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [62]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [62]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [62]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [62]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [62]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [62]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_io));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 5/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_i1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_h2);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_gx);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_hj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_in);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_cm);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_k);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_c[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn62.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_k);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_c[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S14>/Decode 5 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[63];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [63]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [63]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [63]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [63]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [63]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [63]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [63]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode5_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 5/Decode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P2_Size_py);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P6_Size_ac);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P11_Size_ju);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P14_Size_p);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P15_Size_l);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode5_P16_Size_d);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK_d);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK_b[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn63.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_RWORK_d);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode5_IWORK_b[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S14>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[64];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [64]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [64]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [64]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [64]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [64]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [64]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [64]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_ny));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 5/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_pm);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_iu);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_l);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_gf);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_ka);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_ej);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_jl);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_ho);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_j);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_cb);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_pb[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn64.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_cb);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_pb[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S14>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[65];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [65]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [65]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [65]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [65]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [65]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [65]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [65]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev24);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 5/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_jb);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_j4);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_nv);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_jp);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_cj);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_lm);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_fd);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_kd);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_cu);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_d);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_p);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_ms[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn65.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_p);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_ms[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 5 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[66];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [66]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [66]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [66]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [66]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [66]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [66]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [66]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev25));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 5");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev25_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev25_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev25_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev25_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev25_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev25_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn66.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev25_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S15>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[67];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [67]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [67]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [67]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [67]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [67]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [67]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [67]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_gi));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 6/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_kc);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_ap);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_d0);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_au);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_jv);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_kb);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_a2);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_ml);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_k);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_dc);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_c1);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_ep[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn67.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_c1);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_ep[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S15>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[68];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [68]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [68]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [68]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [68]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [68]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [68]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [68]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 6/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_oq);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_ik);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_az);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_n);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_ke);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_k[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn68.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_ke);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_k[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S15>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[69];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [69]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [69]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [69]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [69]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [69]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [69]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [69]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_o4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 6/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_hc);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_n4);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_g4);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_j4);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_oo);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_ct);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_ly);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_pw);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_j);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_p3);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_h0);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_n[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn69.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_h0);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_n[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S15>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[70];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [70]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [70]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [70]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [70]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [70]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [70]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [70]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev25);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_f4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 6/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_jo);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_cs);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_iv);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_hq);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_op);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_ce);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_j);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_ok);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_lk);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_p);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_b);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_h);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_b);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_n[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn70.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_b);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_n[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 6 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[71];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [71]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [71]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [71]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [71]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [71]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [71]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [71]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev26));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 6");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 6");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev26_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev26_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev26_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev26_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev26_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev26_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn71.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev26_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S16>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[72];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [72]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [72]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [72]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [72]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [72]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [72]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [72]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_p1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 7/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_k0);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_az);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_h);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_f5);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_ih);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_pk);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_jo);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_cd);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_i3);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_d0);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_ea);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_e);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_ji);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_kw);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_f0[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn72.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_kw);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_f0[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S16>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[73];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [73]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [73]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [73]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [73]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [73]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [73]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [73]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 7/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_pp);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_o5);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_bk);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_du);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_dq);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_l2);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_p);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_p);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_m2[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn73.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_p);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_m2[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S16>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[74];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [74]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [74]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [74]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [74]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [74]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [74]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [74]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_lc));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 7/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_gj);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_gw);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_gj);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_gw);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_b);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_f);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_lr);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_bu);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_oq);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_f);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_jy);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_b0);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_ei[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn74.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_b0);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_ei[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S16>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[75];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [75]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [75]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [75]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [75]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [75]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [75]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [75]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev26);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 7/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_jq);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_fy);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_hm);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_df);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_l);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_me);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_ad);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_g3);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_g1);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_l);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_od);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_h);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_k);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_f1y);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_lq[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn75.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_f1y);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_lq[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Receive v2 7 (sg_io682_receive_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[76];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [76]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [76]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [76]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [76]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [76]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [76]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [76]);
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 51);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            speedgoat_test_SN5659_R2021b_IO682_B.Receivev27));
        }
      }

      /* path info */
      ssSetModelName(rts, "Receive v2 7");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Receive v2 7");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.params;
        ssSetSFcnParamsCount(rts, 5);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev27_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev27_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev27_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev27_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Receivev27_P5_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev27_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn76.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 3);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Receivev27_PWORK[0]);
      }

      /* registration */
      sg_io682_receive_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S17>/Decode 1 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[77];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [77]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [77]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [77]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [77]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [77]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [77]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [77]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode1_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 8/Decode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P5_Size_f53);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P7_Size_ff);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P8_Size_ft);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P9_Size_lj);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P10_Size_gx);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P14_Size_g2);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P15_Size_oo);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode1_P16_Size_b4);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_n);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_b0[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn77.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_RWORK_n);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode1_IWORK_b0[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S17>/Decode 2 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[78];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [78]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [78]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [78]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [78]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [78]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [78]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [78]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode2_nz));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 8/Decode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P2_Size_mr);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P4_Size_mn);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P5_Size_pd);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P15_Size_by);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode2_P16_Size_b);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_kk);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_d[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn78.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_RWORK_kk);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode2_IWORK_d[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S17>/Decode 3 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[79];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [79]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [79]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [79]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [79]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [79]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [79]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [79]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode3_mj));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 8/Decode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P1_Size_hrb);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P2_Size_l5);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P6_Size_c);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P7_Size_jq);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P8_Size_bfa);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P9_Size_hi);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P10_Size_j4);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P11_Size_i0);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P12_Size_fv);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P13_Size_gn);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P15_Size_l);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode3_P16_Size_o);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_g);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_o[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn79.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_RWORK_g);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode3_IWORK_o[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S17>/Decode 4 (sg_arinc429_decode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[80];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [80]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [80]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [80]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [80]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [80]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [80]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [80]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               speedgoat_test_SN5659_R2021b_IO682_B.Receivev27);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 51);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Decode4_m));
        }
      }

      /* path info */
      ssSetModelName(rts, "Decode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Decode Channel 8/Decode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.params;
        ssSetSFcnParamsCount(rts, 16);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P1_Size_nz);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P2_Size_c3);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P3_Size_b3);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P4_Size_dc);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P6_Size_as);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P7_Size_c2);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P8_Size_fz);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P12_Size_nx);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P13_Size_kw);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P14_Size_pp);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P15_Size_ki);
        ssSetSFcnParam(rts, 15, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Decode4_P16_Size_mt);
      }

      /* work vectors */
      ssSetRWork(rts, (real_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_e);
      ssSetIWork(rts, (int_T *)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_e[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn80.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 2);

        /* RWORK */
        ssSetDWorkWidth(rts, 0, 1);
        ssSetDWorkDataType(rts, 0,SS_DOUBLE);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_RWORK_e);

        /* IWORK */
        ssSetDWorkWidth(rts, 1, 2);
        ssSetDWorkDataType(rts, 1,SS_INTEGER);
        ssSetDWorkComplexSignal(rts, 1, 0);
        ssSetDWork(rts, 1,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Decode4_IWORK_e[0]);
      }

      /* registration */
      sg_arinc429_decode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 51);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S19>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[81];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [81]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [81]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [81]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [81]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [81]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [81]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [81]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 1/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn81.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S19>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[82];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [82]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [82]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [82]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [82]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [82]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [82]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [82]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode5));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 1/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn82.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S19>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[83];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [83]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [83]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [83]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [83]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [83]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [83]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [83]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 1/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn83.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S19>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[84];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [84]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [84]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [84]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [84]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [84]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [84]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [84]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 1/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn84.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2  (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[85];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [85]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [85]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [85]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [85]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [85]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [85]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [85]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode5;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 ");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 ");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv2_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv2_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv2_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv2_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn85.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv2_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S20>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[86];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [86]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [86]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [86]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [86]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [86]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [86]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [86]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_c);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 10/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn86.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_d);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S20>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[87];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [87]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [87]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [87]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [87]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [87]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [87]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [87]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_h);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 10/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn87.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_d);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_n);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_e);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S20>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[88];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [88]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [88]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [88]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [88]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [88]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [88]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [88]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_o);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 10/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn88.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_h);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_g);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S20>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[89];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [89]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [89]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [89]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [89]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [89]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [89]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [89]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_g);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 10/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn89.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 9 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[90];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [90]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [90]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [90]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [90]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [90]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [90]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [90]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_b;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_p;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_i;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 9");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 9");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv29_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv29_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv29_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv29_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn90.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv29_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S21>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[91];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [91]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [91]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [91]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [91]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [91]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [91]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [91]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 11/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn91.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_h5);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_bc);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_g);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S21>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[92];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [92]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [92]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [92]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [92]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [92]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [92]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [92]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_e);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 11/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn92.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_d);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_e);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S21>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[93];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [93]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [93]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [93]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [93]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [93]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [93]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [93]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_b));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 11/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn93.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_cj);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_c);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S21>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[94];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [94]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [94]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [94]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [94]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [94]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [94]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [94]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_i);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 11/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn94.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_j);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 10 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[95];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [95]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [95]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [95]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [95]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [95]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [95]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [95]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_f;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_f;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_b;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_i;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 10");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 10");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv210_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv210_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv210_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv210_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn95.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv210_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S22>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[96];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [96]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [96]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [96]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [96]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [96]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [96]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [96]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_b);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 12/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn96.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_n);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_b);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_l);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_b);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_nr);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S22>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[97];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [97]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [97]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [97]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [97]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [97]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [97]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [97]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_j);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 12/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn97.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_bm);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_g);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S22>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[98];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [98]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [98]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [98]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [98]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [98]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [98]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [98]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_k);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 12/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn98.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_i);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_p);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_lh);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_fe);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_j);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S22>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[99];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [99]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [99]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [99]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [99]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [99]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [99]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [99]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 12/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn99.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_e);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_e);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_hd);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_k);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_m);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 11 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[100];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [100]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [100]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [100]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [100]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [100]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [100]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [100]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_k;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_i;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_o;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_c;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 11");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 11");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv211_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv211_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv211_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv211_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn100.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv211_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S23>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[101];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [101]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [101]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [101]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [101]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [101]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [101]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [101]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_pz);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 13/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn101.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_j);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_a);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_o);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_c);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_f);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_cr);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_a);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_ci);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S23>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[102];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [102]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [102]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [102]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [102]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [102]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [102]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [102]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode5_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 13/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn102.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S23>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[103];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [103]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [103]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [103]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [103]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [103]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [103]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [103]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_p);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 13/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn103.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_p5);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_aw);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_p);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_o);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_k);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S23>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[104];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [104]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [104]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [104]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [104]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [104]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [104]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [104]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 13/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn104.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_b);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_i);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_da);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_m);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_bk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_l);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_c);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_j);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 12 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[105];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [105]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [105]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [105]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [105]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [105]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [105]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [105]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_l;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode5_d;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_p;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_j;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 12");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 12");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv212_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv212_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv212_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv212_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn105.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv212_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S24>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[106];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [106]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [106]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [106]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [106]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [106]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [106]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [106]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 14/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn106.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_n5);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_k);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_d2);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_m);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_kw);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_o);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_ke);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_o);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S24>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[107];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [107]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [107]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [107]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [107]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [107]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [107]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [107]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_o);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_fi));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 14/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn107.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_f);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_n1);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_h);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S24>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[108];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [108]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [108]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [108]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [108]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [108]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [108]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [108]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_g);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_f));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 14/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn108.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_g);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_b);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_c);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_b);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_j);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_m);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_e);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S24>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[109];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [109]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [109]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [109]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [109]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [109]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [109]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [109]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_gm);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_g));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 14/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn109.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_b1);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_a);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_l);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_jo);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_p);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_k);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_mv);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_a);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 13 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[110];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [110]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [110]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [110]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [110]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [110]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [110]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [110]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_p;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_fi;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_f;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_g;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 13");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 13");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv213_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv213_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv213_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv213_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn110.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv213_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S25>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[111];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [111]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [111]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [111]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [111]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [111]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [111]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [111]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_m);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_pb));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 15/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn111.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_fg);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_m);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_kv);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_e);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_j);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S25>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[112];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [112]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [112]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [112]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [112]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [112]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [112]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [112]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 15/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn112.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_l);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_id);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_k);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_b);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_c);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_no);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_b);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_m3);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_h);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_hn);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S25>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[113];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [113]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [113]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [113]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [113]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [113]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [113]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [113]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_kh);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 15/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn113.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_b);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_ab);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_m);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_iu);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_ck);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_cy);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_gk);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_h);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S25>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[114];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [114]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [114]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [114]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [114]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [114]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [114]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [114]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_ga);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 15/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn114.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_k);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_j);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_l);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_f);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_kh);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_n);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_d4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_c);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 14 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[115];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [115]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [115]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [115]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [115]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [115]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [115]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [115]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_pb;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_h;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_l;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_l;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 14");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 14");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv214_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv214_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv214_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv214_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn115.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv214_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S26>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[116];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [116]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [116]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [116]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [116]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [116]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [116]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [116]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_br);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_pbz));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 16/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn116.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_j);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_he);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_kq);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_o);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_dc);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_f);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_l);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_k);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S26>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[117];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [117]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [117]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [117]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [117]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [117]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [117]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [117]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_jr);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_hc));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 16/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn117.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_ch);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_dy);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_lk);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_g);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_f);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_a);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_m);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_m);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S26>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[118];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [118]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [118]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [118]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [118]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [118]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [118]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [118]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_a);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_ou));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 16/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn118.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_ng);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_om);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_m);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_cj);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_lf);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_me);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_e);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_k);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_n1);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_a);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_m);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S26>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[119];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [119]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [119]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [119]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [119]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [119]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [119]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [119]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_p));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 16/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn119.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_m);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_e);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_i);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_ma);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_d);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_gs);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_c);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_e);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 15 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[120];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [120]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [120]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [120]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [120]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [120]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [120]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [120]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_pbz;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_hc;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_ou;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_p;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 15");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 15");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv215_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv215_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv215_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv215_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn120.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0,
                   &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv215_PWORK[0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S27>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[121];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [121]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [121]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [121]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [121]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [121]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [121]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [121]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_e);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 2/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn121.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_ew);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_ai);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_m);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_kf);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_f);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_jp);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S27>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[122];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [122]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [122]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [122]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [122]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [122]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [122]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [122]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_hu);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_fb));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 2/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn122.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_a);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_k2);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_e0);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_l4);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_g);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_ev);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_po);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_nz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_l);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_g);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_c);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S27>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[123];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [123]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [123]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [123]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [123]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [123]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [123]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [123]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_o5);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 2/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn123.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_g);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_py);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_l);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_h);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_cd);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_ek);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_mz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_fe);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_lo);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_c3);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S27>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[124];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [124]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [124]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [124]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [124]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [124]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [124]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [124]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_l);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 2/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn124.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_jp);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_h);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_cg);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_f);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_d4);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_d);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_k);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_k1);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_j);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_lj);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_h);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_hf);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 1 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[125];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [125]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [125]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [125]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [125]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [125]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [125]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [125]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_h;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_fb;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_d;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_n;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 1");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv21_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv21_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv21_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv21_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn125.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv21_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S28>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[126];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [126]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [126]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [126]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [126]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [126]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [126]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [126]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_f0));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 3/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn126.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_jx);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_ke);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_h);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_c1);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_js);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_f2);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_mg);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_o);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_pu);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_ot);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_kz);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_b);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_bs);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S28>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[127];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [127]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [127]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [127]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [127]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [127]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [127]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [127]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_dd);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_iu));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 3/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn127.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_id);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_h);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_lf);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_a);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_e3);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_l);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_m);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_i);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_m1);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_a);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S28>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[128];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [128]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [128]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [128]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [128]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [128]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [128]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [128]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_oh);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_ik));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 3/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn128.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_n);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_jw);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_g);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_o);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_a);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_i5);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_f);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_j1);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_i);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_fl);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_mh);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_of);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S28>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[129];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [129]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [129]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [129]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [129]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [129]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [129]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [129]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_a);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_ix));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 3/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn129.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_c);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_i);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_ff);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_fk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_d);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_a);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_f);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_cz);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 2 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[130];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [130]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [130]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [130]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [130]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [130]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [130]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [130]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_f0;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_iu;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_ik;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_ix;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 2");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv22_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv22_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv22_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv22_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn130.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv22_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S29>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[131];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [131]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [131]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [131]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [131]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [131]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [131]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [131]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_g);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_c));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 4/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn131.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_ld);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_d4);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_mc);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_n);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_e);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_i);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_hk);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_ot);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_l1);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_cm);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_b);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_p);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S29>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[132];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [132]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [132]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [132]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [132]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [132]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [132]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [132]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_o));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 4/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn132.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_o);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_ky);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_j4);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_b);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_i);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_j);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_cp);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_eb);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_jm);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S29>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[133];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [133]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [133]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [133]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [133]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [133]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [133]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [133]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_g));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 4/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn133.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_gs);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_ow);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_g2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_h3);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_ik);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_gl);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_di);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_d);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_d);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_l);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S29>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[134];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [134]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [134]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [134]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [134]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [134]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [134]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [134]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_gh);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_j));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 4/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn134.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_ch);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_c);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_ob);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_jn);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_n);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_bf);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_n);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_o);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_os);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_ov);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_cr);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_i);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 3 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[135];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [135]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [135]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [135]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [135]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [135]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [135]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [135]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_c;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_o;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_g;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_j;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 3");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv23_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv23_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv23_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv23_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn135.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv23_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S30>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[136];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [136]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [136]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [136]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [136]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [136]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [136]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [136]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_i);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_e));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 5/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn136.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_k1);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_k);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_p);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_ap);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_i);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_g);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_k);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_ii);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_kr);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_g0);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_b1);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S30>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[137];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [137]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [137]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [137]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [137]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [137]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [137]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [137]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_hb);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode5_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 5/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn137.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P1_Size_lo);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P2_Size_e);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P3_Size_c);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P5_Size_i);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P8_Size_d);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P9_Size_p);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P12_Size_k);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P13_Size_c);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P14_Size_e);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P15_Size_a);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S30>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[138];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [138]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [138]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [138]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [138]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [138]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [138]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [138]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_bv));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 5/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn138.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_i2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_m);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_fu);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_g2);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_pf);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_i2);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_ap);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_ik);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_pv);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_b4);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_n);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_ck);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_g);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_k1);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_d);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S30>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[139];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [139]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [139]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [139]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [139]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [139]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [139]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [139]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_nb);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_l));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 5/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn139.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_d);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_f);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_g);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_a);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_cm);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_aj);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_lm);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_j);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_om);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_iz);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_n);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_k);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 4 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[140];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [140]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [140]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [140]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [140]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [140]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [140]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [140]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_e;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode5_a;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_bv;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_l;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 4");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv24_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv24_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv24_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv24_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn140.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv24_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S31>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[141];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [141]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [141]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [141]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [141]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [141]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [141]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [141]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_i2);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_d));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 6/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn141.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_ko);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_p);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_cp);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_fd);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_b4);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_kz);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_p);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_mu);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_c);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_mo);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_iv);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_h);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_e4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_d);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S31>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[142];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [142]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [142]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [142]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [142]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [142]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [142]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [142]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_n);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_pt));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 6/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn142.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_cl);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_o3);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_nh);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_ba);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_o);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_n5);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_pn);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_h);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_iz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_i);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_a);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_eo);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S31>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[143];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [143]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [143]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [143]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [143]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [143]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [143]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [143]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_fe);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_k));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 6/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn143.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_o2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_d);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_e);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_hh);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_ll);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_aa);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_j);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_m);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_g);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_cz);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_fn);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_b);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S31>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[144];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [144]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [144]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [144]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [144]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [144]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [144]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [144]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_f);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_cp));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 6/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn144.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_k);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_o);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_g);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_ne);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_e);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_i);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_bt);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_n1);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_hl);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_kf);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_d);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_k4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_b5);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 5 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[145];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [145]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [145]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [145]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [145]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [145]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [145]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [145]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_d;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_pt;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_k;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_cp;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 5");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv25_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv25_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv25_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv25_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn145.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv25_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S32>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[146];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [146]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [146]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [146]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [146]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [146]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [146]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [146]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_d);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_i));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 7/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn146.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_p2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_mq);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_i);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_j);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_h);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_bs);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_e1);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_ie);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_lo);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_p);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_hn);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_n);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_l);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_j);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_f);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S32>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[147];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [147]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [147]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [147]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [147]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [147]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [147]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [147]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_i);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_ik));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 7/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn147.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_f);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_g5);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_fc);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_m);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_fm);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_ol);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_pu);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_jo);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_e);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_my);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_hk);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_d0);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_l0);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_my);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S32>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[148];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [148]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [148]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [148]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [148]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [148]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [148]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [148]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_ff);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_dc));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 7/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn148.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_p);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_kv);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_nd);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_n);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_n);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_j);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_b);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_b);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_e5);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_m);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_b);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_e);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_o4);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_p);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S32>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[149];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [149]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [149]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [149]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [149]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [149]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [149]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [149]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_fw);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_cn));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 7/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn149.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_j2);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_aw);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_p);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_o);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_c);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_em);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_ki);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_j);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_dq);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_o);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_b);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_de);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_ct);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 6 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[150];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [150]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [150]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [150]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [150]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [150]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [150]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [150]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_i;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_ik;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_dc;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_cn;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 6");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 6");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv26_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv26_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv26_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv26_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn150.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv26_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S33>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[151];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [151]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [151]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [151]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [151]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [151]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [151]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [151]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_n4);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_ff));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 8/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn151.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_a);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_fv);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_k);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_bm);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_e);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_fz);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_cq);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_g);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_f);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_bs);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_d0);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S33>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[152];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [152]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [152]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [152]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [152]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [152]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [152]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [152]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_k);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_o4));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 8/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn152.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_bq);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_op);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_by);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_e3);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_gi);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_kl);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_aa);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_jn);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_bj);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_ce);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_l5);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_p);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_fi);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_lu);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_h2);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S33>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[153];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [153]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [153]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [153]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [153]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [153]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [153]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [153]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_m);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_dp));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 8/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn153.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_fp);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_hj);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_e3);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_l);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_p);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_f);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_n);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_hc);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_c);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_h);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_fq);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_fs);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_d);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_gx);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S33>/Encode 4 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[154];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [154]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [154]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [154]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [154]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [154]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [154]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [154]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_j);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_a));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 4");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 8/Encode 4");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn154.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P1_Size_mw);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P2_Size_l);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P3_Size_j);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P4_Size_av);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P5_Size_p);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P6_Size_dj);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P7_Size_kf);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P8_Size_aa);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P9_Size_a);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P10_Size_hz);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P11_Size_e);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P12_Size_c);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P13_Size_ff);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P14_Size_n);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode4_P15_Size_n);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 7 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[155];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [155]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [155]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [155]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [155]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [155]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [155]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [155]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_ff;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_o4;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_dp;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode4_a;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 7");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 7");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv27_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv27_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv27_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv27_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn155.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv27_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S34>/Encode 1 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[156];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [156]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [156]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [156]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [156]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [156]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [156]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [156]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Randomnumber_j);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_kq));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 1");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 9/Encode 1");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn156.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P1_Size_fb);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P2_Size_d2);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P3_Size_p2);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P4_Size_c);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P5_Size_kq);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P6_Size_g);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P7_Size_py);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P8_Size_o);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P9_Size_g4);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P10_Size_d2);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P11_Size_cy);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P12_Size_mr);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P13_Size_j);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P14_Size_bc);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode1_P15_Size_ox);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S34>/Encode 5 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[157];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [157]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [157]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [157]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [157]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [157]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [157]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [157]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion_dw);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode5_n));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 5");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 9/Encode 5");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn157.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P2_Size_n);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P3_Size_o);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P4_Size_d);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P5_Size_b);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P6_Size_d);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P7_Size_k);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P8_Size_a);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P9_Size_h);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P10_Size_a);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P11_Size_g);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P12_Size_o);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P13_Size_p);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P14_Size_l);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode5_P15_Size_o);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S34>/Encode 3 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[158];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [158]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [158]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [158]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [158]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [158]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [158]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [158]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.Sinewave_ao);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_h));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 3");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 9/Encode 3");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn158.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P1_Size_d);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P2_Size_cb);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P3_Size_ne);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P4_Size_f);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P5_Size_px);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P6_Size_h);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P7_Size_lt);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P8_Size_ng);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P9_Size_aa);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P10_Size_e0);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P11_Size_nw);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P12_Size_je);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P13_Size_m3);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P14_Size_o1);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode3_P15_Size_kn);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S34>/Encode 2 (sg_arinc429_encode_s_v2) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[159];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [159]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [159]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [159]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [159]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [159]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [159]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [159]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          ssSetInputPortRequiredContiguous(rts, 0, 1);
          ssSetInputPortSignal(rts, 0,
                               &speedgoat_test_SN5659_R2021b_IO682_B.DataTypeConversion1_e);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 1);
        }
      }

      /* outputs */
      {
        ssSetPortInfoForOutputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.outputPortInfo
          [0]);
        _ssSetNumOutputPorts(rts, 1);
        _ssSetPortInfo2ForOutputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.outputPortUnits
          [0]);
        ssSetOutputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForOutputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.outputPortCoSimAttribute
          [0]);
        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          _ssSetOutputPortNumDimensions(rts, 0, 1);
          ssSetOutputPortWidth(rts, 0, 1);
          ssSetOutputPortSignal(rts, 0, ((real_T *)
            &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_o3));
        }
      }

      /* path info */
      ssSetModelName(rts, "Encode 2");
      ssSetPath(rts,
                "speedgoat_test_SN5659_R2021b_IO682/IO682/Encode Channel 9/Encode 2");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn159.params;
        ssSetSFcnParamsCount(rts, 15);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P1_Size_e);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P2_Size_f);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P3_Size_ed);
        ssSetSFcnParam(rts, 3, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P4_Size_eu);
        ssSetSFcnParam(rts, 4, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P5_Size_az);
        ssSetSFcnParam(rts, 5, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P6_Size_m);
        ssSetSFcnParam(rts, 6, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P7_Size_il);
        ssSetSFcnParam(rts, 7, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P8_Size_b5);
        ssSetSFcnParam(rts, 8, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P9_Size_jc);
        ssSetSFcnParam(rts, 9, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P10_Size_ka);
        ssSetSFcnParam(rts, 10, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P11_Size_jj);
        ssSetSFcnParam(rts, 11, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P12_Size_lg);
        ssSetSFcnParam(rts, 12, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P13_Size_i3);
        ssSetSFcnParam(rts, 13, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P14_Size_i);
        ssSetSFcnParam(rts, 14, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Encode2_P15_Size_k);
      }

      /* registration */
      sg_arinc429_encode_s_v2(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);
      _ssSetOutputPortConnected(rts, 0, 1);
      _ssSetOutputPortBeingMerged(rts, 0, 0);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }

    /* Level2 S-Function Block: speedgoat_test_SN5659_R2021b_IO682/<S1>/Send v2 8 (sg_io682_send_s_v3) */
    {
      SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[160];

      /* timing info */
      time_T *sfcnPeriod =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.sfcnPeriod;
      time_T *sfcnOffset =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.sfcnOffset;
      int_T *sfcnTsMap =
        speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.sfcnTsMap;
      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,
                         sizeof(time_T)*1);
      (void) std::memset(static_cast<void*>(sfcnOffset), 0,
                         sizeof(time_T)*1);
      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);
      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);
      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);

      {
        ssSetBlkInfo2Ptr(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.blkInfo2
                         [160]);
      }

      _ssSetBlkInfo2PortInfo2Ptr(rts,
        &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.inputOutputPortInfo2
        [160]);

      /* Set up the mdlInfo pointer */
      ssSetRTWSfcnInfo(rts, speedgoat_test_SN5659_R2021b_IO682_M->sfcnInfo);

      /* Allocate memory of model methods 2 */
      {
        ssSetModelMethods2(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods2
                           [160]);
      }

      /* Allocate memory of model methods 3 */
      {
        ssSetModelMethods3(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods3
                           [160]);
      }

      /* Allocate memory of model methods 4 */
      {
        ssSetModelMethods4(rts,
                           &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.methods4
                           [160]);
      }

      /* Allocate memory for states auxilliary information */
      {
        ssSetStatesInfo2(rts,
                         &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.statesInfo2
                         [160]);
        ssSetPeriodicStatesInfo(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.periodicStatesInfo
          [160]);
      }

      /* inputs */
      {
        _ssSetNumInputPorts(rts, 1);
        ssSetPortInfoForInputs(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.inputPortInfo
          [0]);
        _ssSetPortInfo2ForInputUnits(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.inputPortUnits
          [0]);
        ssSetInputPortUnit(rts, 0, 0);
        _ssSetPortInfo2ForInputCoSimAttribute(rts,
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.inputPortCoSimAttribute
          [0]);
        ssSetInputPortIsContinuousQuantity(rts, 0, 0);

        /* port 0 */
        {
          real_T const **sfcnUPtrs = (real_T const **)
            &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.UPtrs0;
          sfcnUPtrs[0] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode1_kq;
          sfcnUPtrs[1] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode5_n;
          sfcnUPtrs[2] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode3_h;
          sfcnUPtrs[3] = &speedgoat_test_SN5659_R2021b_IO682_B.Encode2_o3;
          ssSetInputPortSignalPtrs(rts, 0, (InputPtrsType)&sfcnUPtrs[0]);
          _ssSetInputPortNumDimensions(rts, 0, 1);
          ssSetInputPortWidth(rts, 0, 4);
        }
      }

      /* path info */
      ssSetModelName(rts, "Send v2 8");
      ssSetPath(rts, "speedgoat_test_SN5659_R2021b_IO682/IO682/Send v2 8");
      ssSetRTModel(rts,speedgoat_test_SN5659_R2021b_IO682_M);
      ssSetParentSS(rts, (NULL));
      ssSetRootSS(rts, rts);
      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);

      /* parameters */
      {
        mxArray **sfcnParams = (mxArray **)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.params;
        ssSetSFcnParamsCount(rts, 3);
        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);
        ssSetSFcnParam(rts, 0, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv28_P1_Size);
        ssSetSFcnParam(rts, 1, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv28_P2_Size);
        ssSetSFcnParam(rts, 2, (mxArray*)
                       speedgoat_test_SN5659_R2021_cal->Sendv28_P3_Size);
      }

      /* work vectors */
      ssSetPWork(rts, (void **)
                 &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv28_PWORK[0]);

      {
        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.dWork;
        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)
          &speedgoat_test_SN5659_R2021b_IO682_M->NonInlinedSFcns.Sfcn160.dWorkAux;
        ssSetSFcnDWork(rts, dWorkRecord);
        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);
        _ssSetNumDWork(rts, 1);

        /* PWORK */
        ssSetDWorkWidth(rts, 0, 2);
        ssSetDWorkDataType(rts, 0,SS_POINTER);
        ssSetDWorkComplexSignal(rts, 0, 0);
        ssSetDWork(rts, 0, &speedgoat_test_SN5659_R2021b_IO682_DW.Sendv28_PWORK
                   [0]);
      }

      /* registration */
      sg_io682_send_s_v3(rts);
      sfcnInitializeSizes(rts);
      sfcnInitializeSampleTimes(rts);

      /* adjust sample time */
      ssSetSampleTime(rts, 0, 0.005);
      ssSetOffsetTime(rts, 0, 0.0);
      sfcnTsMap[0] = 0;

      /* set compiled values of dynamic vector attributes */
      ssSetInputPortWidth(rts, 0, 4);
      ssSetInputPortDataType(rts, 0, SS_DOUBLE);
      ssSetInputPortComplexSignal(rts, 0, 0);
      ssSetInputPortFrameData(rts, 0, 0);
      ssSetInputPortUnit(rts, 0, 0);
      ssSetInputPortIsContinuousQuantity(rts, 0, 0);
      ssSetNumNonsampledZCs(rts, 0);

      /* Update connectivity flags for each port */
      _ssSetInputPortConnected(rts, 0, 1);

      /* Update the BufferDstPort flags for each input port */
      ssSetInputPortBufferDstPort(rts, 0, -1);
    }
  }

  /* Start for S-Function (sg_io682_setup_s_v3): '<S1>/Setup v2 ' */
  /* Level2 S-Function Block: '<S1>/Setup v2 ' (sg_io682_setup_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[0];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 ' */
  /* Level2 S-Function Block: '<S1>/Receive v2 ' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[1];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 1' */
  /* Level2 S-Function Block: '<S3>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[2];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 5' */
  /* Level2 S-Function Block: '<S3>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[3];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 3' */
  /* Level2 S-Function Block: '<S3>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[4];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 4' */
  /* Level2 S-Function Block: '<S3>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[5];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 1' */
  /* Level2 S-Function Block: '<S1>/Receive v2 1' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[6];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 1' */
  /* Level2 S-Function Block: '<S11>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[7];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 2' */
  /* Level2 S-Function Block: '<S11>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[8];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 3' */
  /* Level2 S-Function Block: '<S11>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[9];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 4' */
  /* Level2 S-Function Block: '<S11>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[10];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 8' */
  /* Level2 S-Function Block: '<S1>/Receive v2 8' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[11];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 1' */
  /* Level2 S-Function Block: '<S18>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[12];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 5' */
  /* Level2 S-Function Block: '<S18>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[13];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 3' */
  /* Level2 S-Function Block: '<S18>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[14];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 4' */
  /* Level2 S-Function Block: '<S18>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[15];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 9' */
  /* Level2 S-Function Block: '<S1>/Receive v2 9' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[16];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 1' */
  /* Level2 S-Function Block: '<S4>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[17];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 2' */
  /* Level2 S-Function Block: '<S4>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[18];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 3' */
  /* Level2 S-Function Block: '<S4>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[19];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 4' */
  /* Level2 S-Function Block: '<S4>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[20];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 10' */
  /* Level2 S-Function Block: '<S1>/Receive v2 10' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[21];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 1' */
  /* Level2 S-Function Block: '<S5>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[22];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 2' */
  /* Level2 S-Function Block: '<S5>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[23];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 3' */
  /* Level2 S-Function Block: '<S5>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[24];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 4' */
  /* Level2 S-Function Block: '<S5>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[25];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 11' */
  /* Level2 S-Function Block: '<S1>/Receive v2 11' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[26];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 1' */
  /* Level2 S-Function Block: '<S6>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[27];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 2' */
  /* Level2 S-Function Block: '<S6>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[28];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 3' */
  /* Level2 S-Function Block: '<S6>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[29];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 4' */
  /* Level2 S-Function Block: '<S6>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[30];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 12' */
  /* Level2 S-Function Block: '<S1>/Receive v2 12' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[31];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 1' */
  /* Level2 S-Function Block: '<S7>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[32];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 5' */
  /* Level2 S-Function Block: '<S7>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[33];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 3' */
  /* Level2 S-Function Block: '<S7>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[34];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 4' */
  /* Level2 S-Function Block: '<S7>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[35];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 13' */
  /* Level2 S-Function Block: '<S1>/Receive v2 13' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[36];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 1' */
  /* Level2 S-Function Block: '<S8>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[37];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 2' */
  /* Level2 S-Function Block: '<S8>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[38];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 3' */
  /* Level2 S-Function Block: '<S8>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[39];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 4' */
  /* Level2 S-Function Block: '<S8>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[40];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 14' */
  /* Level2 S-Function Block: '<S1>/Receive v2 14' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[41];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 1' */
  /* Level2 S-Function Block: '<S9>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[42];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 2' */
  /* Level2 S-Function Block: '<S9>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[43];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 3' */
  /* Level2 S-Function Block: '<S9>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[44];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 4' */
  /* Level2 S-Function Block: '<S9>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[45];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 15' */
  /* Level2 S-Function Block: '<S1>/Receive v2 15' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[46];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 1' */
  /* Level2 S-Function Block: '<S10>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[47];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 2' */
  /* Level2 S-Function Block: '<S10>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[48];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 3' */
  /* Level2 S-Function Block: '<S10>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[49];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 4' */
  /* Level2 S-Function Block: '<S10>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[50];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 2' */
  /* Level2 S-Function Block: '<S1>/Receive v2 2' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[51];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 1' */
  /* Level2 S-Function Block: '<S12>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[52];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 2' */
  /* Level2 S-Function Block: '<S12>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[53];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 3' */
  /* Level2 S-Function Block: '<S12>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[54];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 4' */
  /* Level2 S-Function Block: '<S12>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[55];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 3' */
  /* Level2 S-Function Block: '<S1>/Receive v2 3' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[56];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 1' */
  /* Level2 S-Function Block: '<S13>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[57];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 2' */
  /* Level2 S-Function Block: '<S13>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[58];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 3' */
  /* Level2 S-Function Block: '<S13>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[59];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 4' */
  /* Level2 S-Function Block: '<S13>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[60];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 4' */
  /* Level2 S-Function Block: '<S1>/Receive v2 4' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[61];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 1' */
  /* Level2 S-Function Block: '<S14>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[62];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 5' */
  /* Level2 S-Function Block: '<S14>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[63];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 3' */
  /* Level2 S-Function Block: '<S14>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[64];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 4' */
  /* Level2 S-Function Block: '<S14>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[65];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 5' */
  /* Level2 S-Function Block: '<S1>/Receive v2 5' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[66];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 1' */
  /* Level2 S-Function Block: '<S15>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[67];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 2' */
  /* Level2 S-Function Block: '<S15>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[68];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 3' */
  /* Level2 S-Function Block: '<S15>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[69];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 4' */
  /* Level2 S-Function Block: '<S15>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[70];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 6' */
  /* Level2 S-Function Block: '<S1>/Receive v2 6' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[71];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 1' */
  /* Level2 S-Function Block: '<S16>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[72];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 2' */
  /* Level2 S-Function Block: '<S16>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[73];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 3' */
  /* Level2 S-Function Block: '<S16>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[74];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 4' */
  /* Level2 S-Function Block: '<S16>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[75];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 7' */
  /* Level2 S-Function Block: '<S1>/Receive v2 7' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[76];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 1' */
  /* Level2 S-Function Block: '<S17>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[77];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 2' */
  /* Level2 S-Function Block: '<S17>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[78];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 3' */
  /* Level2 S-Function Block: '<S17>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[79];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 4' */
  /* Level2 S-Function Block: '<S17>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[80];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 1' */
  /* Level2 S-Function Block: '<S19>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[81];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 5' */
  /* Level2 S-Function Block: '<S19>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[82];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 3' */
  /* Level2 S-Function Block: '<S19>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[83];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 2' */
  /* Level2 S-Function Block: '<S19>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[84];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 ' */
  /* Level2 S-Function Block: '<S1>/Send v2 ' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[85];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 1' */
  /* Level2 S-Function Block: '<S20>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[86];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 2' */
  /* Level2 S-Function Block: '<S20>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[87];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 3' */
  /* Level2 S-Function Block: '<S20>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[88];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 4' */
  /* Level2 S-Function Block: '<S20>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[89];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 9' */
  /* Level2 S-Function Block: '<S1>/Send v2 9' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[90];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 1' */
  /* Level2 S-Function Block: '<S21>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[91];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 2' */
  /* Level2 S-Function Block: '<S21>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[92];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 3' */
  /* Level2 S-Function Block: '<S21>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[93];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 4' */
  /* Level2 S-Function Block: '<S21>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[94];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 10' */
  /* Level2 S-Function Block: '<S1>/Send v2 10' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[95];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 1' */
  /* Level2 S-Function Block: '<S22>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[96];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 2' */
  /* Level2 S-Function Block: '<S22>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[97];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 3' */
  /* Level2 S-Function Block: '<S22>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[98];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 4' */
  /* Level2 S-Function Block: '<S22>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[99];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 11' */
  /* Level2 S-Function Block: '<S1>/Send v2 11' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[100];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 1' */
  /* Level2 S-Function Block: '<S23>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[101];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 5' */
  /* Level2 S-Function Block: '<S23>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[102];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 3' */
  /* Level2 S-Function Block: '<S23>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[103];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 2' */
  /* Level2 S-Function Block: '<S23>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[104];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 12' */
  /* Level2 S-Function Block: '<S1>/Send v2 12' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[105];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 1' */
  /* Level2 S-Function Block: '<S24>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[106];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 2' */
  /* Level2 S-Function Block: '<S24>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[107];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 3' */
  /* Level2 S-Function Block: '<S24>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[108];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 4' */
  /* Level2 S-Function Block: '<S24>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[109];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 13' */
  /* Level2 S-Function Block: '<S1>/Send v2 13' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[110];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 1' */
  /* Level2 S-Function Block: '<S25>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[111];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 2' */
  /* Level2 S-Function Block: '<S25>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[112];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 3' */
  /* Level2 S-Function Block: '<S25>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[113];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 4' */
  /* Level2 S-Function Block: '<S25>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[114];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 14' */
  /* Level2 S-Function Block: '<S1>/Send v2 14' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[115];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 1' */
  /* Level2 S-Function Block: '<S26>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[116];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 2' */
  /* Level2 S-Function Block: '<S26>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[117];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 3' */
  /* Level2 S-Function Block: '<S26>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[118];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 4' */
  /* Level2 S-Function Block: '<S26>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[119];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 15' */
  /* Level2 S-Function Block: '<S1>/Send v2 15' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[120];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 1' */
  /* Level2 S-Function Block: '<S27>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[121];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 2' */
  /* Level2 S-Function Block: '<S27>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[122];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 3' */
  /* Level2 S-Function Block: '<S27>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[123];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 4' */
  /* Level2 S-Function Block: '<S27>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[124];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 1' */
  /* Level2 S-Function Block: '<S1>/Send v2 1' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[125];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 1' */
  /* Level2 S-Function Block: '<S28>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[126];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 2' */
  /* Level2 S-Function Block: '<S28>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[127];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 3' */
  /* Level2 S-Function Block: '<S28>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[128];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 4' */
  /* Level2 S-Function Block: '<S28>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[129];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 2' */
  /* Level2 S-Function Block: '<S1>/Send v2 2' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[130];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 1' */
  /* Level2 S-Function Block: '<S29>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[131];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 2' */
  /* Level2 S-Function Block: '<S29>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[132];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 3' */
  /* Level2 S-Function Block: '<S29>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[133];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 4' */
  /* Level2 S-Function Block: '<S29>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[134];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 3' */
  /* Level2 S-Function Block: '<S1>/Send v2 3' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[135];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 1' */
  /* Level2 S-Function Block: '<S30>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[136];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 5' */
  /* Level2 S-Function Block: '<S30>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[137];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 3' */
  /* Level2 S-Function Block: '<S30>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[138];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 2' */
  /* Level2 S-Function Block: '<S30>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[139];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 4' */
  /* Level2 S-Function Block: '<S1>/Send v2 4' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[140];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 1' */
  /* Level2 S-Function Block: '<S31>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[141];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 2' */
  /* Level2 S-Function Block: '<S31>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[142];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 3' */
  /* Level2 S-Function Block: '<S31>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[143];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 4' */
  /* Level2 S-Function Block: '<S31>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[144];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 5' */
  /* Level2 S-Function Block: '<S1>/Send v2 5' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[145];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 1' */
  /* Level2 S-Function Block: '<S32>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[146];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 2' */
  /* Level2 S-Function Block: '<S32>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[147];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 3' */
  /* Level2 S-Function Block: '<S32>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[148];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 4' */
  /* Level2 S-Function Block: '<S32>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[149];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 6' */
  /* Level2 S-Function Block: '<S1>/Send v2 6' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[150];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 1' */
  /* Level2 S-Function Block: '<S33>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[151];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 2' */
  /* Level2 S-Function Block: '<S33>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[152];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 3' */
  /* Level2 S-Function Block: '<S33>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[153];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 4' */
  /* Level2 S-Function Block: '<S33>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[154];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 7' */
  /* Level2 S-Function Block: '<S1>/Send v2 7' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[155];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 1' */
  /* Level2 S-Function Block: '<S34>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[156];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 5' */
  /* Level2 S-Function Block: '<S34>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[157];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 3' */
  /* Level2 S-Function Block: '<S34>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[158];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 2' */
  /* Level2 S-Function Block: '<S34>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[159];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  /* Start for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 8' */
  /* Level2 S-Function Block: '<S1>/Send v2 8' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[160];
    sfcnStart(rts);
    if (ssGetErrorStatus(rts) != (NULL))
      return;
  }

  {
    real_T tmp;
    int32_T r;
    int32_T t;
    uint32_T tseed;

    /* InitializeConditions for RandomNumber: '<S19>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>
      (static_cast<uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput =
      rt_nrand_Upu32_Yd_f_pw_snf(&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed)
      * speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean;

    /* End of InitializeConditions for RandomNumber: '<S19>/Random number' */

    /* InitializeConditions for UnitDelay: '<S35>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_c =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_b;

    /* InitializeConditions for RandomNumber: '<S20>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_n);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_m = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_a =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_m) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_a +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_f;

    /* End of InitializeConditions for RandomNumber: '<S20>/Random number' */

    /* InitializeConditions for UnitDelay: '<S39>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition;

    /* InitializeConditions for RandomNumber: '<S21>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_h);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_h = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_n =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_h) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_l +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_k;

    /* End of InitializeConditions for RandomNumber: '<S21>/Random number' */

    /* InitializeConditions for UnitDelay: '<S43>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_o =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_n;

    /* InitializeConditions for RandomNumber: '<S22>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_f);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_k = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_f =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_k) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_j +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_fn;

    /* End of InitializeConditions for RandomNumber: '<S22>/Random number' */

    /* InitializeConditions for UnitDelay: '<S47>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_o0 =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_c;

    /* InitializeConditions for RandomNumber: '<S23>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_c);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_g = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_nj =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_g) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_k +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_a;

    /* End of InitializeConditions for RandomNumber: '<S23>/Random number' */

    /* InitializeConditions for UnitDelay: '<S51>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_m =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_k;

    /* InitializeConditions for RandomNumber: '<S24>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_p);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_f = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ni =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_f) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_g +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_h;

    /* End of InitializeConditions for RandomNumber: '<S24>/Random number' */

    /* InitializeConditions for UnitDelay: '<S55>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_oy =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_e;

    /* InitializeConditions for RandomNumber: '<S25>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_fj);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_f4 = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ft =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_f4) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_l4 +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_b;

    /* End of InitializeConditions for RandomNumber: '<S25>/Random number' */

    /* InitializeConditions for UnitDelay: '<S59>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_e =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_l;

    /* InitializeConditions for RandomNumber: '<S26>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_cd);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_i = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_i =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_i) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_n +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_fh;

    /* End of InitializeConditions for RandomNumber: '<S26>/Random number' */

    /* InitializeConditions for UnitDelay: '<S63>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_k =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_nl;

    /* InitializeConditions for RandomNumber: '<S27>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_nh);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_d = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_j =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_d) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_m +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_f3;

    /* End of InitializeConditions for RandomNumber: '<S27>/Random number' */

    /* InitializeConditions for UnitDelay: '<S67>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_e0 =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_j;

    /* InitializeConditions for RandomNumber: '<S28>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_fq);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_b = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_m =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_b) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_f +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_d;

    /* End of InitializeConditions for RandomNumber: '<S28>/Random number' */

    /* InitializeConditions for UnitDelay: '<S71>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_g =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_h;

    /* InitializeConditions for RandomNumber: '<S29>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_i);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_hi = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_h =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_hi) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_b +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_p;

    /* End of InitializeConditions for RandomNumber: '<S29>/Random number' */

    /* InitializeConditions for UnitDelay: '<S75>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_p =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_d;

    /* InitializeConditions for RandomNumber: '<S30>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_o);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_bw = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_ir =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_bw) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_mo +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_c;

    /* End of InitializeConditions for RandomNumber: '<S30>/Random number' */

    /* InitializeConditions for UnitDelay: '<S79>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_b =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_nb;

    /* InitializeConditions for RandomNumber: '<S31>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_cg);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_j = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_hu =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_j) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_o +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_l;

    /* End of InitializeConditions for RandomNumber: '<S31>/Random number' */

    /* InitializeConditions for UnitDelay: '<S83>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_f =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_h3;

    /* InitializeConditions for RandomNumber: '<S32>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_e);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_n = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_p =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_n) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_fs +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_pl;

    /* End of InitializeConditions for RandomNumber: '<S32>/Random number' */

    /* InitializeConditions for UnitDelay: '<S87>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_h =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_dr;

    /* InitializeConditions for RandomNumber: '<S33>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_l);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_l = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_jn =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_l) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_e +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_pz;

    /* End of InitializeConditions for RandomNumber: '<S33>/Random number' */

    /* InitializeConditions for UnitDelay: '<S91>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_m4 =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_a;

    /* InitializeConditions for RandomNumber: '<S34>/Random number' */
    tmp = std::floor(speedgoat_test_SN5659_R2021_cal->Randomnumber_Seed_j);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
      tmp = 0.0;
    } else {
      tmp = std::fmod(tmp, 4.294967296E+9);
    }

    tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(static_cast<
      uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) + t) << 16U) + t) + r;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_fs = tseed;
    speedgoat_test_SN5659_R2021b_IO682_DW.NextOutput_b =
      rt_nrand_Upu32_Yd_f_pw_snf
      (&speedgoat_test_SN5659_R2021b_IO682_DW.RandSeed_fs) *
      speedgoat_test_SN5659_R2021_cal->Randomnumber_StdDev_oa +
      speedgoat_test_SN5659_R2021_cal->Randomnumber_Mean_fb;

    /* End of InitializeConditions for RandomNumber: '<S34>/Random number' */

    /* InitializeConditions for UnitDelay: '<S95>/Output' */
    speedgoat_test_SN5659_R2021b_IO682_DW.Output_DSTATE_fw =
      speedgoat_test_SN5659_R2021_cal->Output_InitialCondition_aw;
  }

  /* Enable for Sin: '<S19>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable = 1;

  /* Enable for Sin: '<S20>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_n = 1;

  /* Enable for Sin: '<S21>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_b = 1;

  /* Enable for Sin: '<S22>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_f = 1;

  /* Enable for Sin: '<S23>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_m = 1;

  /* Enable for Sin: '<S24>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_j = 1;

  /* Enable for Sin: '<S25>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_a = 1;

  /* Enable for Sin: '<S26>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_p = 1;

  /* Enable for Sin: '<S27>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_ml = 1;

  /* Enable for Sin: '<S28>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_bx = 1;

  /* Enable for Sin: '<S29>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_g = 1;

  /* Enable for Sin: '<S30>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_pe = 1;

  /* Enable for Sin: '<S31>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_i = 1;

  /* Enable for Sin: '<S32>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_jy = 1;

  /* Enable for Sin: '<S33>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_gv = 1;

  /* Enable for Sin: '<S34>/Sine wave' */
  speedgoat_test_SN5659_R2021b_IO682_DW.systemEnable_o = 1;
}

/* Model terminate function */
void speedgoat_test_SN5659_R2021b_IO682_terminate(void)
{
  /* Terminate for S-Function (sg_io682_setup_s_v3): '<S1>/Setup v2 ' */
  /* Level2 S-Function Block: '<S1>/Setup v2 ' (sg_io682_setup_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[0];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 ' */
  /* Level2 S-Function Block: '<S1>/Receive v2 ' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[1];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 1' */
  /* Level2 S-Function Block: '<S3>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[2];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 5' */
  /* Level2 S-Function Block: '<S3>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[3];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 3' */
  /* Level2 S-Function Block: '<S3>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[4];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S3>/Decode 4' */
  /* Level2 S-Function Block: '<S3>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[5];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 1' */
  /* Level2 S-Function Block: '<S1>/Receive v2 1' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[6];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 1' */
  /* Level2 S-Function Block: '<S11>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[7];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 2' */
  /* Level2 S-Function Block: '<S11>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[8];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 3' */
  /* Level2 S-Function Block: '<S11>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[9];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S11>/Decode 4' */
  /* Level2 S-Function Block: '<S11>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[10];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 8' */
  /* Level2 S-Function Block: '<S1>/Receive v2 8' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[11];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 1' */
  /* Level2 S-Function Block: '<S18>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[12];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 5' */
  /* Level2 S-Function Block: '<S18>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[13];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 3' */
  /* Level2 S-Function Block: '<S18>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[14];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S18>/Decode 4' */
  /* Level2 S-Function Block: '<S18>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[15];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 9' */
  /* Level2 S-Function Block: '<S1>/Receive v2 9' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[16];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 1' */
  /* Level2 S-Function Block: '<S4>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[17];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 2' */
  /* Level2 S-Function Block: '<S4>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[18];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 3' */
  /* Level2 S-Function Block: '<S4>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[19];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S4>/Decode 4' */
  /* Level2 S-Function Block: '<S4>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[20];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 10' */
  /* Level2 S-Function Block: '<S1>/Receive v2 10' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[21];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 1' */
  /* Level2 S-Function Block: '<S5>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[22];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 2' */
  /* Level2 S-Function Block: '<S5>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[23];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 3' */
  /* Level2 S-Function Block: '<S5>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[24];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S5>/Decode 4' */
  /* Level2 S-Function Block: '<S5>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[25];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 11' */
  /* Level2 S-Function Block: '<S1>/Receive v2 11' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[26];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 1' */
  /* Level2 S-Function Block: '<S6>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[27];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 2' */
  /* Level2 S-Function Block: '<S6>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[28];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 3' */
  /* Level2 S-Function Block: '<S6>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[29];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S6>/Decode 4' */
  /* Level2 S-Function Block: '<S6>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[30];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 12' */
  /* Level2 S-Function Block: '<S1>/Receive v2 12' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[31];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 1' */
  /* Level2 S-Function Block: '<S7>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[32];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 5' */
  /* Level2 S-Function Block: '<S7>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[33];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 3' */
  /* Level2 S-Function Block: '<S7>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[34];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S7>/Decode 4' */
  /* Level2 S-Function Block: '<S7>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[35];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 13' */
  /* Level2 S-Function Block: '<S1>/Receive v2 13' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[36];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 1' */
  /* Level2 S-Function Block: '<S8>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[37];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 2' */
  /* Level2 S-Function Block: '<S8>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[38];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 3' */
  /* Level2 S-Function Block: '<S8>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[39];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S8>/Decode 4' */
  /* Level2 S-Function Block: '<S8>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[40];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 14' */
  /* Level2 S-Function Block: '<S1>/Receive v2 14' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[41];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 1' */
  /* Level2 S-Function Block: '<S9>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[42];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 2' */
  /* Level2 S-Function Block: '<S9>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[43];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 3' */
  /* Level2 S-Function Block: '<S9>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[44];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S9>/Decode 4' */
  /* Level2 S-Function Block: '<S9>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[45];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 15' */
  /* Level2 S-Function Block: '<S1>/Receive v2 15' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[46];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 1' */
  /* Level2 S-Function Block: '<S10>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[47];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 2' */
  /* Level2 S-Function Block: '<S10>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[48];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 3' */
  /* Level2 S-Function Block: '<S10>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[49];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S10>/Decode 4' */
  /* Level2 S-Function Block: '<S10>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[50];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 2' */
  /* Level2 S-Function Block: '<S1>/Receive v2 2' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[51];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 1' */
  /* Level2 S-Function Block: '<S12>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[52];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 2' */
  /* Level2 S-Function Block: '<S12>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[53];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 3' */
  /* Level2 S-Function Block: '<S12>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[54];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S12>/Decode 4' */
  /* Level2 S-Function Block: '<S12>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[55];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 3' */
  /* Level2 S-Function Block: '<S1>/Receive v2 3' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[56];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 1' */
  /* Level2 S-Function Block: '<S13>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[57];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 2' */
  /* Level2 S-Function Block: '<S13>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[58];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 3' */
  /* Level2 S-Function Block: '<S13>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[59];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S13>/Decode 4' */
  /* Level2 S-Function Block: '<S13>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[60];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 4' */
  /* Level2 S-Function Block: '<S1>/Receive v2 4' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[61];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 1' */
  /* Level2 S-Function Block: '<S14>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[62];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 5' */
  /* Level2 S-Function Block: '<S14>/Decode 5' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[63];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 3' */
  /* Level2 S-Function Block: '<S14>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[64];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S14>/Decode 4' */
  /* Level2 S-Function Block: '<S14>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[65];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 5' */
  /* Level2 S-Function Block: '<S1>/Receive v2 5' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[66];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 1' */
  /* Level2 S-Function Block: '<S15>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[67];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 2' */
  /* Level2 S-Function Block: '<S15>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[68];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 3' */
  /* Level2 S-Function Block: '<S15>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[69];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S15>/Decode 4' */
  /* Level2 S-Function Block: '<S15>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[70];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 6' */
  /* Level2 S-Function Block: '<S1>/Receive v2 6' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[71];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 1' */
  /* Level2 S-Function Block: '<S16>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[72];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 2' */
  /* Level2 S-Function Block: '<S16>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[73];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 3' */
  /* Level2 S-Function Block: '<S16>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[74];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S16>/Decode 4' */
  /* Level2 S-Function Block: '<S16>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[75];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_receive_s_v3): '<S1>/Receive v2 7' */
  /* Level2 S-Function Block: '<S1>/Receive v2 7' (sg_io682_receive_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[76];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 1' */
  /* Level2 S-Function Block: '<S17>/Decode 1' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[77];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 2' */
  /* Level2 S-Function Block: '<S17>/Decode 2' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[78];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 3' */
  /* Level2 S-Function Block: '<S17>/Decode 3' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[79];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_decode_s_v2): '<S17>/Decode 4' */
  /* Level2 S-Function Block: '<S17>/Decode 4' (sg_arinc429_decode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[80];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 1' */
  /* Level2 S-Function Block: '<S19>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[81];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 5' */
  /* Level2 S-Function Block: '<S19>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[82];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 3' */
  /* Level2 S-Function Block: '<S19>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[83];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S19>/Encode 2' */
  /* Level2 S-Function Block: '<S19>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[84];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 ' */
  /* Level2 S-Function Block: '<S1>/Send v2 ' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[85];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 1' */
  /* Level2 S-Function Block: '<S20>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[86];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 2' */
  /* Level2 S-Function Block: '<S20>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[87];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 3' */
  /* Level2 S-Function Block: '<S20>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[88];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S20>/Encode 4' */
  /* Level2 S-Function Block: '<S20>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[89];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 9' */
  /* Level2 S-Function Block: '<S1>/Send v2 9' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[90];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 1' */
  /* Level2 S-Function Block: '<S21>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[91];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 2' */
  /* Level2 S-Function Block: '<S21>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[92];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 3' */
  /* Level2 S-Function Block: '<S21>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[93];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S21>/Encode 4' */
  /* Level2 S-Function Block: '<S21>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[94];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 10' */
  /* Level2 S-Function Block: '<S1>/Send v2 10' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[95];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 1' */
  /* Level2 S-Function Block: '<S22>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[96];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 2' */
  /* Level2 S-Function Block: '<S22>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[97];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 3' */
  /* Level2 S-Function Block: '<S22>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[98];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S22>/Encode 4' */
  /* Level2 S-Function Block: '<S22>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[99];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 11' */
  /* Level2 S-Function Block: '<S1>/Send v2 11' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[100];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 1' */
  /* Level2 S-Function Block: '<S23>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[101];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 5' */
  /* Level2 S-Function Block: '<S23>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[102];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 3' */
  /* Level2 S-Function Block: '<S23>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[103];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S23>/Encode 2' */
  /* Level2 S-Function Block: '<S23>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[104];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 12' */
  /* Level2 S-Function Block: '<S1>/Send v2 12' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[105];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 1' */
  /* Level2 S-Function Block: '<S24>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[106];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 2' */
  /* Level2 S-Function Block: '<S24>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[107];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 3' */
  /* Level2 S-Function Block: '<S24>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[108];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S24>/Encode 4' */
  /* Level2 S-Function Block: '<S24>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[109];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 13' */
  /* Level2 S-Function Block: '<S1>/Send v2 13' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[110];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 1' */
  /* Level2 S-Function Block: '<S25>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[111];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 2' */
  /* Level2 S-Function Block: '<S25>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[112];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 3' */
  /* Level2 S-Function Block: '<S25>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[113];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S25>/Encode 4' */
  /* Level2 S-Function Block: '<S25>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[114];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 14' */
  /* Level2 S-Function Block: '<S1>/Send v2 14' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[115];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 1' */
  /* Level2 S-Function Block: '<S26>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[116];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 2' */
  /* Level2 S-Function Block: '<S26>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[117];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 3' */
  /* Level2 S-Function Block: '<S26>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[118];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S26>/Encode 4' */
  /* Level2 S-Function Block: '<S26>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[119];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 15' */
  /* Level2 S-Function Block: '<S1>/Send v2 15' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[120];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 1' */
  /* Level2 S-Function Block: '<S27>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[121];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 2' */
  /* Level2 S-Function Block: '<S27>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[122];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 3' */
  /* Level2 S-Function Block: '<S27>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[123];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S27>/Encode 4' */
  /* Level2 S-Function Block: '<S27>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[124];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 1' */
  /* Level2 S-Function Block: '<S1>/Send v2 1' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[125];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 1' */
  /* Level2 S-Function Block: '<S28>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[126];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 2' */
  /* Level2 S-Function Block: '<S28>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[127];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 3' */
  /* Level2 S-Function Block: '<S28>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[128];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S28>/Encode 4' */
  /* Level2 S-Function Block: '<S28>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[129];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 2' */
  /* Level2 S-Function Block: '<S1>/Send v2 2' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[130];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 1' */
  /* Level2 S-Function Block: '<S29>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[131];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 2' */
  /* Level2 S-Function Block: '<S29>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[132];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 3' */
  /* Level2 S-Function Block: '<S29>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[133];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S29>/Encode 4' */
  /* Level2 S-Function Block: '<S29>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[134];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 3' */
  /* Level2 S-Function Block: '<S1>/Send v2 3' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[135];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 1' */
  /* Level2 S-Function Block: '<S30>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[136];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 5' */
  /* Level2 S-Function Block: '<S30>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[137];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 3' */
  /* Level2 S-Function Block: '<S30>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[138];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S30>/Encode 2' */
  /* Level2 S-Function Block: '<S30>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[139];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 4' */
  /* Level2 S-Function Block: '<S1>/Send v2 4' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[140];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 1' */
  /* Level2 S-Function Block: '<S31>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[141];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 2' */
  /* Level2 S-Function Block: '<S31>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[142];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 3' */
  /* Level2 S-Function Block: '<S31>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[143];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S31>/Encode 4' */
  /* Level2 S-Function Block: '<S31>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[144];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 5' */
  /* Level2 S-Function Block: '<S1>/Send v2 5' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[145];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 1' */
  /* Level2 S-Function Block: '<S32>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[146];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 2' */
  /* Level2 S-Function Block: '<S32>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[147];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 3' */
  /* Level2 S-Function Block: '<S32>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[148];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S32>/Encode 4' */
  /* Level2 S-Function Block: '<S32>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[149];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 6' */
  /* Level2 S-Function Block: '<S1>/Send v2 6' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[150];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 1' */
  /* Level2 S-Function Block: '<S33>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[151];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 2' */
  /* Level2 S-Function Block: '<S33>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[152];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 3' */
  /* Level2 S-Function Block: '<S33>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[153];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S33>/Encode 4' */
  /* Level2 S-Function Block: '<S33>/Encode 4' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[154];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 7' */
  /* Level2 S-Function Block: '<S1>/Send v2 7' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[155];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 1' */
  /* Level2 S-Function Block: '<S34>/Encode 1' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[156];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 5' */
  /* Level2 S-Function Block: '<S34>/Encode 5' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[157];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 3' */
  /* Level2 S-Function Block: '<S34>/Encode 3' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[158];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_arinc429_encode_s_v2): '<S34>/Encode 2' */
  /* Level2 S-Function Block: '<S34>/Encode 2' (sg_arinc429_encode_s_v2) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[159];
    sfcnTerminate(rts);
  }

  /* Terminate for S-Function (sg_io682_send_s_v3): '<S1>/Send v2 8' */
  /* Level2 S-Function Block: '<S1>/Send v2 8' (sg_io682_send_s_v3) */
  {
    SimStruct *rts = speedgoat_test_SN5659_R2021b_IO682_M->childSfunctions[160];
    sfcnTerminate(rts);
  }
}
